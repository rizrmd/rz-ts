generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model academic_agendas {
  id                  BigInt               @id @default(autoincrement())
  school_id           Int
  title               String               @db.VarChar(100)
  description         String
  excerpt             String?              @db.VarChar(255)
  start_date          DateTime             @db.Timestamp(0)
  end_date            DateTime?            @db.Timestamp(0)
  class_id            Int?
  classroom_id        BigInt?
  created_at          DateTime?            @db.Timestamp(0)
  updated_at          DateTime?            @db.Timestamp(0)
  academic_classes    academic_classes?    @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_agendas_class_id_foreign")
  academic_classrooms academic_classrooms? @relation(fields: [classroom_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_agendas_classroom_id_foreign")
  schools             schools              @relation(fields: [school_id], references: [id], onUpdate: NoAction)
}

model academic_assignment {
  id                        BigInt                      @id @default(autoincrement())
  school_id                 Int
  course_id                 Int
  class_id                  Int?
  period_id                 Int
  classroom_id              BigInt?
  topic                     String?                     @db.VarChar(255)
  accept_file_type          String?                     @db.VarChar(255)
  name                      String                      @db.VarChar(255)
  description               String
  teacher_id                BigInt
  created_at                DateTime?                   @db.Timestamp(0)
  updated_at                DateTime?                   @db.Timestamp(0)
  active_date               DateTime?                   @db.Date
  due_date                  DateTime?                   @db.Date
  deleted_at                DateTime?                   @db.Timestamp(6)
  academic_classes          academic_classes?           @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_assignment_class_id_foreign")
  academic_classrooms       academic_classrooms?        @relation(fields: [classroom_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_assignment_classroom_id_foreign")
  academic_courses          academic_courses            @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "course_asses_competence_course_fk")
  academic_period           academic_period             @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_assignment_period_id_foreign")
  schools                   schools                     @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_assignment_school_id_foreign")
  human_resource_staff      human_resource_staff        @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "course_asses_competence_teacher_fk")
  academic_assignment_pools academic_assignment_pools[] @ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model academic_assignment_pools {
  id                  BigInt              @default(autoincrement())
  attachment_id       BigInt?
  assignment_id       BigInt
  student_id          BigInt
  score               Int?
  created_at          DateTime?           @db.Timestamp(0)
  updated_at          DateTime?           @db.Timestamp(0)
  school_id           Int
  note                String?
  classroom_id        BigInt?
  answer              String?
  file_type           String?             @db.VarChar(255)
  custom_type         String?             @db.VarChar(255)
  academic_assignment academic_assignment @relation(fields: [assignment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_assignment_pools_assignment_id_foreign")
  attachments         attachments?        @relation(fields: [attachment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_assignment_pools_attachment_id_foreign")
  academic_students   academic_students   @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_assignment_pools_student_id_foreign")

  @@unique([attachment_id, assignment_id], map: "academic_assignment_pools_attachment_id_assignment_id")
  @@ignore
}

model academic_attendances {
  id               BigInt            @id @default(autoincrement())
  school_id        Int
  period_id        Int
  user_id          BigInt
  subject_id       Int?
  attendance_date  DateTime          @db.Date
  start            DateTime?         @db.Timestamp(0)
  end              DateTime?         @db.Timestamp(0)
  scan_in          DateTime?         @db.Timestamp(0)
  scan_out         DateTime?         @db.Timestamp(0)
  late_time        DateTime?         @db.Timestamp(0)
  duration         String?           @db.VarChar(255)
  machine          String?           @db.VarChar(255)
  presence         Int?              @db.SmallInt
  absent_cause     String?           @db.VarChar(255)
  notes            String?
  created_by       BigInt?
  deleted_at       DateTime?         @db.Timestamp(0)
  created_at       DateTime?         @db.Timestamp(0)
  updated_at       DateTime?         @db.Timestamp(0)
  updated_by       BigInt?
  is_late          Boolean?
  latitude         String?           @db.VarChar
  longitude        String?           @db.VarChar
  academic_period  academic_period   @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_attendances_period_id_foreign")
  schools          schools           @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_attendances_school_id_foreign")
  academic_dataset academic_dataset? @relation(fields: [subject_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users            users             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_attendances_user_id_foreign")
}

model academic_classes {
  id                                   Int                                    @id @default(autoincrement())
  school_id                            Int
  level                                String                                 @db.VarChar(255)
  name                                 String                                 @db.VarChar(255)
  specialization                       String?                                @db.VarChar(255)
  description                          String?                                @db.VarChar(255)
  created_at                           DateTime?                              @db.Timestamp(0)
  updated_at                           DateTime?                              @db.Timestamp(0)
  deleted_at                           DateTime?                              @db.Timestamp(0)
  level_int                            Int?                                   @default(1) @db.SmallInt
  schools                              schools                                @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_classes_school_id_foreign")
  academic_agendas                     academic_agendas[]
  academic_assignment                  academic_assignment[]
  academic_classrooms                  academic_classrooms[]
  academic_courses_teachers            academic_courses_teachers[]
  academic_curriculum_competence_core  academic_curriculum_competence_core[]
  academic_curriculum_predicate_course academic_curriculum_predicate_course[] @ignore
  academic_curriculum_programs         academic_curriculum_programs[]
  academic_student_report_card_details academic_student_report_card_details[]
  academic_student_report_cards        academic_student_report_cards[]
  academic_students                    academic_students[]
  finance_cost_classes                 finance_cost_classes[]                 @ignore
  message_whatsapp                     message_whatsapp[]

  @@index([level_int], map: "academic_classes_level_index")
  @@index([specialization], map: "academic_classes_specialization_index")
}

model academic_classroom_journal {
  id                  BigInt              @id @default(autoincrement())
  classroom_id        BigInt
  created_by          BigInt
  course_id           Int?
  date                DateTime            @db.Timestamp(0)
  notes               String
  created_at          DateTime?           @db.Timestamp(0)
  updated_at          DateTime?           @db.Timestamp(0)
  school_id           Int?
  academic_classrooms academic_classrooms @relation(fields: [classroom_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  academic_courses    academic_courses?   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_classroom_journal_course_id_foreign")
  users               users               @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_classroom_journal_created_by_foreign")
  schools             schools?            @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model academic_classroom_journal_pjj {
  id               BigInt            @id @default(autoincrement())
  school_id        Int
  classroom_id     Int
  created_by       BigInt
  course_id        Int?
  date             DateTime          @db.Timestamp(0)
  notes            String
  competence_basic String            @db.VarChar(255)
  subject          String            @db.VarChar(255)
  start_time       String            @db.VarChar(255)
  end_time         String            @db.VarChar(255)
  media            String            @db.VarChar(255)
  created_at       DateTime?         @db.Timestamp(0)
  updated_at       DateTime?         @db.Timestamp(0)
  academic_courses academic_courses? @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_classroom_journal_pjj_course_id_foreign")
  users            users             @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_classroom_journal_pjj_created_by_foreign")
}

model academic_classroom_students {
  classroom_id        BigInt
  student_id          BigInt
  created_at          DateTime?           @db.Timestamp(0)
  updated_at          DateTime?           @db.Timestamp(0)
  deleted_at          DateTime?           @db.Timestamp(0)
  type                String?             @default("next") @db.Char(20)
  notes               String?
  sort_number         Int                 @default(1) @db.SmallInt
  academic_classrooms academic_classrooms @relation(fields: [classroom_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_classroom_students_classroom_id_foreign")
  academic_students   academic_students   @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_classroom_students_student_id_foreign")

  @@unique([classroom_id, student_id], map: "academic_classroom_students_classroom_id_student_id")
}

model academic_classrooms {
  id                                                                               BigInt                                 @id @default(autoincrement())
  school_id                                                                        Int
  type                                                                             String                                 @default("course") @db.VarChar(255)
  period_id                                                                        Int
  curriculum_id                                                                    Int?
  class_id                                                                         Int?
  course_id                                                                        Int?
  program_id                                                                       Int?
  homeroom_teacher_id                                                              BigInt?
  class_leader_student_id                                                          BigInt?
  name                                                                             String                                 @db.VarChar(255)
  room                                                                             String?                                @db.VarChar(255)
  description                                                                      String?
  deleted_at                                                                       DateTime?                              @db.Timestamp(0)
  created_at                                                                       DateTime?                              @db.Timestamp(0)
  updated_at                                                                       DateTime?                              @db.Timestamp(0)
  curriculum_local                                                                 Int?
  specialization_id                                                                Int?
  cover                                                                            String?                                @db.VarChar
  image                                                                            String?                                @db.VarChar
  academic_classes                                                                 academic_classes?                      @relation(fields: [class_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  academic_students_academic_classrooms_class_leader_student_idToacademic_students academic_students?                     @relation("academic_classrooms_class_leader_student_idToacademic_students", fields: [class_leader_student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  academic_courses                                                                 academic_courses?                      @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  academic_curriculum                                                              academic_curriculum?                   @relation(fields: [curriculum_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_classrooms_curriculum_id_foreign")
  human_resource_staff                                                             human_resource_staff?                  @relation(fields: [homeroom_teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  academic_period                                                                  academic_period                        @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_classrooms_period_id_foreign")
  schools                                                                          schools                                @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_classrooms_school_id_foreign")
  academic_agendas                                                                 academic_agendas[]
  academic_assignment                                                              academic_assignment[]
  academic_classroom_journal                                                       academic_classroom_journal[]
  academic_classroom_students                                                      academic_classroom_students[]
  academic_course_schedules                                                        academic_course_schedules[]
  academic_student_course_attendances                                              academic_student_course_attendances[]
  academic_student_courses                                                         academic_student_courses[]
  academic_student_report_card_details                                             academic_student_report_card_details[]
  academic_student_report_cards                                                    academic_student_report_cards[]
  academic_students_academic_classroomsToacademic_students_last_boarding_id        academic_students[]                    @relation("academic_classroomsToacademic_students_last_boarding_id")
  academic_students_academic_classroomsToacademic_students_last_classroom_id       academic_students[]                    @relation("academic_classroomsToacademic_students_last_classroom_id")
  academic_teacher_course_attendances                                              academic_teacher_course_attendances[]
  lms_lesson_classroom                                                             lms_lesson_classroom[]
  message_whatsapp                                                                 message_whatsapp[]
}

model academic_committee {
  id                           Int                            @id @default(autoincrement())
  school_id                    Int
  period_id                    Int
  code                         String                         @db.VarChar(255)
  name                         String                         @db.VarChar(255)
  description                  String
  is_active                    Boolean                        @default(false)
  category                     String                         @default("general") @db.VarChar(255)
  created_at                   DateTime?                      @db.Timestamp(0)
  updated_at                   DateTime?                      @db.Timestamp(0)
  deleted_at                   DateTime?                      @db.Timestamp(0)
  academic_period              academic_period                @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_committee_period_id_foreign")
  schools                      schools                        @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_committee_school_id_foreign")
  academic_committee_structure academic_committee_structure[]
  academic_committee_users     academic_committee_users[]
}

model academic_committee_structure {
  id                       Int                        @id @default(autoincrement())
  school_id                Int
  committee_id             Int
  code                     String                     @db.VarChar(255)
  name                     String                     @db.VarChar(255)
  description              String
  created_at               DateTime?                  @db.Timestamp(0)
  updated_at               DateTime?                  @db.Timestamp(0)
  academic_committee       academic_committee         @relation(fields: [committee_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_committee_structure_committee_id_foreign")
  schools                  schools                    @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_committee_structure_school_id_foreign")
  academic_committee_users academic_committee_users[]
}

model academic_committee_users {
  id                           Int                          @id @default(autoincrement())
  school_id                    Int
  committee_id                 Int
  structure_id                 Int
  user_id                      BigInt
  created_at                   DateTime?                    @db.Timestamp(0)
  updated_at                   DateTime?                    @db.Timestamp(0)
  academic_committee           academic_committee           @relation(fields: [committee_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_committee_users_committee_id_foreign")
  schools                      schools                      @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_committee_users_school_id_foreign")
  academic_committee_structure academic_committee_structure @relation(fields: [structure_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_committee_users_structure_id_foreign")
  users                        users                        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_committee_users_user_id_foreign")
}

model academic_course_assessment_competence_basic_formulas {
  id                               BigInt                           @id @default(autoincrement())
  term_id                          Int
  course_id                        Int
  competence_id                    Int
  teacher_id                       BigInt
  type_id                          Int
  assignment_name                  String?                          @db.VarChar(255)
  operator                         String                           @db.VarChar(255)
  remedial                         Boolean                          @default(false)
  created_at                       DateTime?                        @db.Timestamp(0)
  updated_at                       DateTime?                        @db.Timestamp(0)
  school_id                        Int
  academic_curriculum_competence   academic_curriculum_competence   @relation(fields: [competence_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "course_asses_combas_comp_fk")
  academic_courses                 academic_courses                 @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "course_asses_compbas_course_fk")
  schools                          schools                          @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_assessment_competence_basic_form_school_id_fkey")
  human_resource_staff             human_resource_staff             @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "course_asses_compbas_teacher_fk")
  academic_terms                   academic_terms                   @relation(fields: [term_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "course_asses_compbas_terms_fk")
  academic_course_assessment_types academic_course_assessment_types @relation(fields: [type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "course_asses_compbas_type_fk")
}

model academic_course_assessment_competence_formula_details {
  id                                             BigInt                                         @id @default(autoincrement())
  formula_id                                     BigInt
  type_id                                        Int
  operator                                       String                                         @db.VarChar(255)
  value                                          Int?
  created_at                                     DateTime?                                      @db.Timestamp(0)
  updated_at                                     DateTime?                                      @db.Timestamp(0)
  school_id                                      Int?
  academic_course_assessment_competence_formulas academic_course_assessment_competence_formulas @relation(fields: [formula_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "course_asses_comp_formula_fk")
  academic_course_assessment_types               academic_course_assessment_types               @relation(fields: [type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "course_asses_comp_det_type_fk")
}

model academic_course_assessment_competence_formulas {
  id                                                    BigInt                                                  @id @default(autoincrement())
  school_id                                             Int?
  term_id                                               Int
  course_id                                             Int
  competence_id                                         Int
  teacher_id                                            BigInt
  operator                                              String                                                  @db.VarChar(255)
  created_at                                            DateTime?                                               @db.Timestamp(0)
  updated_at                                            DateTime?                                               @db.Timestamp(0)
  academic_curriculum_competence                        academic_curriculum_competence                          @relation(fields: [competence_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "course_asses_competence_id_fk")
  academic_courses                                      academic_courses                                        @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "course_asses_competence_course_fk")
  schools                                               schools?                                                @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_assessment_competence_formulas_school_id_foreig")
  human_resource_staff                                  human_resource_staff                                    @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "course_asses_competence_teacher_fk")
  academic_terms                                        academic_terms                                          @relation(fields: [term_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "course_asses_competence_terms_fk")
  academic_course_assessment_competence_formula_details academic_course_assessment_competence_formula_details[]
}

model academic_course_assessment_details {
  id                                   BigInt                               @id @default(autoincrement())
  assessment_id                        BigInt
  competence_basic_id                  Int
  score                                Float
  notes                                String?
  deleted_at                           DateTime?                            @db.Timestamp(0)
  created_at                           DateTime?                            @db.Timestamp(0)
  updated_at                           DateTime?                            @db.Timestamp(0)
  school_id                            Int?
  academic_course_assessments          academic_course_assessments          @relation(fields: [assessment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_assessment_details_assessment_id_foreign")
  academic_curriculum_competence_basic academic_curriculum_competence_basic @relation(fields: [competence_basic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_assessment_details_competence_basic_id_foreign")
}

model academic_course_assessment_notes_default {
  id            BigInt    @id @default(autoincrement())
  school_id     Int?
  course_id     Int
  competence_id Int
  notes         String?
  deleted_at    DateTime? @db.Timestamp(0)
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  schools       schools?  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_assessment_notes_default_school_id_foreign")
}

model academic_course_assessment_rubic {
  id                               Int                              @id @default(autoincrement())
  type_id                          Int
  name                             String                           @db.VarChar(255)
  notes                            String?
  created_at                       DateTime?                        @db.Timestamp(0)
  updated_at                       DateTime?                        @db.Timestamp(0)
  deleted_at                       DateTime?                        @db.Timestamp(0)
  school_id                        Int?
  academic_course_assessment_types academic_course_assessment_types @relation(fields: [type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_assessment_rubic_type_id_foreign")
}

model academic_course_assessment_types {
  id                                                    Int                                                     @id @default(autoincrement())
  competence_id                                         Int
  name                                                  String                                                  @db.VarChar(255)
  notes                                                 String?
  deleted_at                                            DateTime?                                               @db.Timestamp(0)
  created_at                                            DateTime?                                               @db.Timestamp(0)
  updated_at                                            DateTime?                                               @db.Timestamp(0)
  school_id                                             Int?
  academic_curriculum_competence                        academic_curriculum_competence                          @relation(fields: [competence_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_assessment_types_competence_id_foreign")
  schools                                               schools?                                                @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  academic_course_assessment_competence_basic_formulas  academic_course_assessment_competence_basic_formulas[]
  academic_course_assessment_competence_formula_details academic_course_assessment_competence_formula_details[]
  academic_course_assessment_rubic                      academic_course_assessment_rubic[]
  academic_course_assessments                           academic_course_assessments[]
}

model academic_course_assessments {
  id                                 BigInt                               @id @default(autoincrement())
  period_id                          Int
  course_id                          Int
  competence_id                      Int
  teacher_id                         BigInt
  student_id                         BigInt
  type_id                            Int
  assignment_name                    String?                              @db.VarChar(255)
  assignment_slug                    String                               @db.VarChar(50)
  assignment_date                    DateTime                             @db.Date
  score                              Float
  notes                              String?
  remedial                           Boolean                              @default(false)
  parent_id                          BigInt?
  deleted_at                         DateTime?                            @db.Timestamp(0)
  created_at                         DateTime?                            @db.Timestamp(0)
  updated_at                         DateTime?                            @db.Timestamp(0)
  school_id                          Int?
  source_id                          BigInt?
  term_id                            Int?
  term_code                          Int?                                 @db.SmallInt
  term_variant                       String?                              @db.VarChar(255)
  academic_curriculum_competence     academic_curriculum_competence       @relation(fields: [competence_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_assessments_competence_id_foreign")
  academic_courses                   academic_courses                     @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_assessments_course_id_foreign")
  academic_course_assessments        academic_course_assessments?         @relation("academic_course_assessmentsToacademic_course_assessments_parent_id", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_assessments_parent_id_foreign")
  academic_period                    academic_period                      @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_assessments_period_id_foreign")
  schools                            schools?                             @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  academic_students                  academic_students                    @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_assessments_student_id_foreign")
  human_resource_staff               human_resource_staff                 @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_assessments_teacher_id_foreign")
  academic_terms                     academic_terms?                      @relation(fields: [term_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "academic_course_assessments_term_id_foreign")
  academic_course_assessment_types   academic_course_assessment_types     @relation(fields: [type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_assessments_type_id_foreign")
  academic_course_assessment_details academic_course_assessment_details[]
  other_academic_course_assessments  academic_course_assessments[]        @relation("academic_course_assessmentsToacademic_course_assessments_parent_id")
}

model academic_course_schedule_student {
  id                        BigInt                    @id @default(autoincrement())
  course_schedule_id        BigInt
  student_id                BigInt
  deleted_at                DateTime?                 @db.Timestamp(0)
  created_at                DateTime?                 @db.Timestamp(0)
  updated_at                DateTime?                 @db.Timestamp(0)
  school_id                 Int
  academic_course_schedules academic_course_schedules @relation(fields: [course_schedule_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_schedule_student_course_schedule_id_foreign")
  academic_students         academic_students         @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_schedule_student_student_id_foreign")
}

model academic_course_schedules {
  id                                                                              BigInt                                @id @default(autoincrement())
  school_id                                                                       Int?
  period_id                                                                       Int
  classroom_id                                                                    BigInt
  course_id                                                                       Int
  teacher_id                                                                      BigInt?
  days                                                                            String                                @db.VarChar(255)
  start_id                                                                        BigInt?
  end_id                                                                          BigInt?
  duration                                                                        String?                               @db.VarChar(255)
  notes                                                                           String?
  deleted_at                                                                      DateTime?                             @db.Timestamp(0)
  created_at                                                                      DateTime?                             @db.Timestamp(0)
  updated_at                                                                      DateTime?                             @db.Timestamp(0)
  academic_classrooms                                                             academic_classrooms                   @relation(fields: [classroom_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_schedules_classroom_id_foreign")
  academic_courses                                                                academic_courses                      @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_schedules_course_id_foreign")
  academic_school_hours_academic_course_schedules_end_idToacademic_school_hours   academic_school_hours?                @relation("academic_course_schedules_end_idToacademic_school_hours", fields: [end_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_schedules_end_id_foreign")
  academic_period                                                                 academic_period                       @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_schedules_period_id_foreign")
  schools                                                                         schools?                              @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_schedules_school_id_foreign")
  academic_school_hours_academic_course_schedules_start_idToacademic_school_hours academic_school_hours?                @relation("academic_course_schedules_start_idToacademic_school_hours", fields: [start_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_schedules_start_id_foreign")
  human_resource_staff                                                            human_resource_staff?                 @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_course_schedules_teacher_id_foreign")
  academic_course_schedule_student                                                academic_course_schedule_student[]
  academic_teacher_course_attendances                                             academic_teacher_course_attendances[]
}

model academic_courses {
  id                                                   Int                                                    @id @default(autoincrement())
  school_id                                            Int
  course_master_id                                     BigInt?
  type                                                 String                                                 @default("course") @db.VarChar(255)
  level                                                String                                                 @default("sma") @db.VarChar(255)
  picture                                              String?                                                @db.VarChar(255)
  code                                                 String?                                                @db.VarChar(255)
  name                                                 String                                                 @db.VarChar(255)
  description                                          String?
  deleted_at                                           DateTime?                                              @db.Timestamp(0)
  created_at                                           DateTime?                                              @db.Timestamp(0)
  updated_at                                           DateTime?                                              @db.Timestamp(0)
  curriculum_id                                        Int?
  sort_by                                              Int                                                    @default(0) @db.SmallInt
  classifications                                      classifications?                                       @relation(fields: [course_master_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_courses_course_master_id_foreign")
  schools                                              schools                                                @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_courses_school_id_foreign")
  academic_assignment                                  academic_assignment[]
  academic_classroom_journal                           academic_classroom_journal[]
  academic_classroom_journal_pjj                       academic_classroom_journal_pjj[]
  academic_classrooms                                  academic_classrooms[]
  academic_course_assessment_competence_basic_formulas academic_course_assessment_competence_basic_formulas[]
  academic_course_assessment_competence_formulas       academic_course_assessment_competence_formulas[]
  academic_course_assessments                          academic_course_assessments[]
  academic_course_schedules                            academic_course_schedules[]
  academic_courses_teachers                            academic_courses_teachers[]
  academic_curriculum_competence_basic                 academic_curriculum_competence_basic[]
  academic_curriculum_competence_core                  academic_curriculum_competence_core[]
  academic_curriculum_competence_syllabus              academic_curriculum_competence_syllabus[]
  academic_curriculum_predicate_course                 academic_curriculum_predicate_course[]                 @ignore
  academic_student_course_attendances                  academic_student_course_attendances[]
  academic_student_courses                             academic_student_courses[]
  academic_student_report_card_details                 academic_student_report_card_details[]
  academic_teacher_course_attendances                  academic_teacher_course_attendances[]
  cbt_questions                                        cbt_questions[]
  lms_lessons                                          lms_lessons[]

  @@index([code], map: "academic_courses_code_index")
  @@index([level], map: "academic_courses_level_index")
  @@index([type], map: "academic_courses_type_index")
}

model academic_courses_teachers {
  id                   BigInt               @id @default(autoincrement())
  course_id            Int
  teacher_id           BigInt
  class_id             Int?
  time                 Int?
  created_at           DateTime?            @db.Timestamp(0)
  updated_at           DateTime?            @db.Timestamp(0)
  school_id            Int?
  academic_classes     academic_classes?    @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_courses_teachers_class_id_foreign")
  academic_courses     academic_courses     @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_courses_teachers_course_id_foreign")
  schools              schools?             @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  human_resource_staff human_resource_staff @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_courses_teachers_teacher_id_foreign")

  @@unique([course_id, teacher_id, class_id], map: "unique_email")
}

model academic_curriculum {
  id                                                 Int                                    @id @default(autoincrement())
  school_id                                          Int
  code                                               String                                 @db.VarChar(255)
  name                                               String                                 @db.VarChar(255)
  description                                        String?                                @db.VarChar(255)
  created_at                                         DateTime?                              @db.Timestamp(0)
  updated_at                                         DateTime?                              @db.Timestamp(0)
  deleted_at                                         DateTime?                              @db.Timestamp(0)
  schools_academic_curriculum_school_idToschools     schools                                @relation("academic_curriculum_school_idToschools", fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_curriculum_school_id_foreign")
  academic_classrooms                                academic_classrooms[]
  academic_curriculum_competence                     academic_curriculum_competence[]
  academic_curriculum_predicate_course               academic_curriculum_predicate_course[] @ignore
  academic_curriculum_programs                       academic_curriculum_programs[]
  schools_academic_curriculumToschools_curriculum_id schools[]                              @relation("academic_curriculumToschools_curriculum_id")

  @@unique([school_id, code], map: "academic_curriculum_school_id_code")
}

model academic_curriculum_competence {
  id                                                   Int                                                    @id @default(autoincrement())
  curriculum_id                                        Int
  code                                                 String                                                 @db.VarChar(255)
  name                                                 String                                                 @db.VarChar(255)
  description                                          String?                                                @db.VarChar(255)
  only_predicate                                       Boolean                                                @default(false)
  created_at                                           DateTime?                                              @db.Timestamp(0)
  updated_at                                           DateTime?                                              @db.Timestamp(0)
  deleted_at                                           DateTime?                                              @db.Timestamp(0)
  school_id                                            Int?
  is_scoring                                           Boolean?
  type                                                 Int?                                                   @default(0) @db.SmallInt
  academic_curriculum                                  academic_curriculum                                    @relation(fields: [curriculum_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_curriculum_competence_curriculum_id_foreign")
  academic_course_assessment_competence_basic_formulas academic_course_assessment_competence_basic_formulas[]
  academic_course_assessment_competence_formulas       academic_course_assessment_competence_formulas[]
  academic_course_assessment_types                     academic_course_assessment_types[]
  academic_course_assessments                          academic_course_assessments[]
  academic_curriculum_competence_basic                 academic_curriculum_competence_basic[]
  academic_curriculum_competence_core                  academic_curriculum_competence_core[]
  academic_curriculum_competence_score_rules           academic_curriculum_competence_score_rules[]
  academic_curriculum_predicate_course                 academic_curriculum_predicate_course[]                 @ignore
  academic_student_report_card_details                 academic_student_report_card_details[]
}

model academic_curriculum_competence_basic {
  id                                       Int                                        @id @default(autoincrement())
  competence_id                            Int
  course_id                                Int
  term_type                                Int?                                       @db.SmallInt
  class_id                                 Int?
  code                                     String?                                    @db.VarChar(255)
  name                                     String
  summary                                  String?
  created_at                               DateTime?                                  @db.Timestamp(0)
  updated_at                               DateTime?                                  @db.Timestamp(0)
  deleted_at                               DateTime?                                  @db.Timestamp(0)
  academic_curriculum_competence           academic_curriculum_competence             @relation(fields: [competence_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_curriculum_competence_basic_competence_id_foreign")
  academic_courses                         academic_courses                           @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_curriculum_competence_basic_course_id_foreign")
  academic_course_assessment_details       academic_course_assessment_details[]
  academic_curriculum_competence_indicator academic_curriculum_competence_indicator[]
  academic_curriculum_competence_syllabus  academic_curriculum_competence_syllabus[]
}

model academic_curriculum_competence_core {
  id                             Int                            @id @default(autoincrement())
  competence_id                  Int
  course_id                      Int
  class_id                       Int?
  code                           String?                        @db.VarChar(255)
  name                           String
  description                    String?
  created_at                     DateTime?                      @db.Timestamp(0)
  updated_at                     DateTime?                      @db.Timestamp(0)
  deleted_at                     DateTime?                      @db.Timestamp(0)
  academic_classes               academic_classes?              @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_curriculum_competence_core_class_id_foreign")
  academic_curriculum_competence academic_curriculum_competence @relation(fields: [competence_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_curriculum_competence_core_competence_id_foreign")
  academic_courses               academic_courses               @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_curriculum_competence_core_course_id_foreign")
}

model academic_curriculum_competence_indicator {
  id                                   Int                                  @id @default(autoincrement())
  basic_id                             Int
  code                                 String?                              @db.VarChar(255)
  name                                 String
  description                          String?
  created_at                           DateTime?                            @db.Timestamp(0)
  updated_at                           DateTime?                            @db.Timestamp(0)
  deleted_at                           DateTime?                            @db.Timestamp(0)
  academic_curriculum_competence_basic academic_curriculum_competence_basic @relation(fields: [basic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_curriculum_competence_indicator_basic_id_foreign")
}

model academic_curriculum_competence_score_rules {
  id                             Int                            @id @default(autoincrement())
  competence_id                  Int
  predicate                      String                         @db.VarChar(30)
  score_start                    Float
  score_end                      Float
  description                    String?
  created_at                     DateTime?                      @db.Timestamp(0)
  updated_at                     DateTime?                      @db.Timestamp(0)
  school_id                      Int?
  academic_curriculum_competence academic_curriculum_competence @relation(fields: [competence_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_curriculum_competence_score_rules_competence_id_foreig")
}

model academic_curriculum_competence_syllabus {
  id                                   Int                                  @id @default(autoincrement())
  basic_id                             Int
  course_id                            Int
  class_id                             Int?
  ipk                                  String
  materi_pokok                         String
  pembelajaran                         String
  penilaian                            String
  alokasi_waktu                        String                               @db.VarChar(255)
  sumber_belajar                       String
  created_at                           DateTime?                            @db.Timestamp(0)
  updated_at                           DateTime?                            @db.Timestamp(0)
  deleted_at                           DateTime?                            @db.Timestamp(0)
  academic_curriculum_competence_basic academic_curriculum_competence_basic @relation(fields: [basic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_curriculum_competence_syllabus_basic_id_foreign")
  academic_courses                     academic_courses                     @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_curriculum_competence_syllabus_course_id_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model academic_curriculum_predicate_course {
  curriculum_id                  Int
  competence_id                  Int
  predicate_id                   Int
  course_id                      Int
  created_at                     DateTime?                      @db.Timestamp(0)
  updated_at                     DateTime?                      @db.Timestamp(0)
  deleted_at                     DateTime?                      @db.Timestamp(0)
  class_id                       Int?
  academic_classes               academic_classes?              @relation(fields: [class_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "academic_curriculum_predicate_course_class_id_foreign")
  academic_curriculum_competence academic_curriculum_competence @relation(fields: [competence_id], references: [id], onUpdate: NoAction, map: "academic_curriculum_predicate_course_competence_id_foreign")
  academic_courses               academic_courses               @relation(fields: [course_id], references: [id], onUpdate: NoAction, map: "academic_curriculum_predicate_course_course_id_foreign")
  academic_curriculum            academic_curriculum            @relation(fields: [curriculum_id], references: [id], onUpdate: NoAction, map: "academic_curriculum_predicate_course_curriculum_id_foreign")
  academic_predicates            academic_predicates            @relation(fields: [predicate_id], references: [id], onUpdate: NoAction, map: "academic_curriculum_predicate_course_predicate_id_foreign")

  @@ignore
}

model academic_curriculum_programs {
  id                                                                             Int                 @id @default(autoincrement())
  curriculum_id                                                                  Int
  course_groups_id                                                               BigInt
  course_master_id                                                               BigInt?
  class_id                                                                       Int?
  order                                                                          Int?                @db.SmallInt
  deleted_at                                                                     DateTime?           @db.Timestamp(0)
  created_at                                                                     DateTime?           @db.Timestamp(0)
  updated_at                                                                     DateTime?           @db.Timestamp(0)
  school_id                                                                      Int?
  academic_classes                                                               academic_classes?   @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_curriculum_programs_class_id_foreign")
  classifications_academic_curriculum_programs_course_groups_idToclassifications classifications     @relation("academic_curriculum_programs_course_groups_idToclassifications", fields: [course_groups_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_curriculum_programs_course_groups_id_foreign")
  classifications_academic_curriculum_programs_course_master_idToclassifications classifications?    @relation("academic_curriculum_programs_course_master_idToclassifications", fields: [course_master_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_curriculum_programs_course_master_id_foreign")
  academic_curriculum                                                            academic_curriculum @relation(fields: [curriculum_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_curriculum_programs_curriculum_id_foreign")
}

model academic_dataset {
  id                                                                                                 Int                              @id(map: "admission_dataset_pkey") @default(autoincrement())
  school_id                                                                                          Int?
  code                                                                                               String                           @db.VarChar(255)
  name                                                                                               String                           @db.VarChar(255)
  description                                                                                        String?
  is_active                                                                                          Boolean                          @default(false)
  type                                                                                               String                           @default("default") @db.VarChar(255)
  sorting                                                                                            Int?                             @db.SmallInt
  created_at                                                                                         DateTime?                        @db.Timestamp(0)
  updated_at                                                                                         DateTime?                        @db.Timestamp(0)
  deleted_at                                                                                         DateTime?                        @db.Timestamp(0)
  options                                                                                            String?
  schools                                                                                            schools?                         @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_dataset_school_id_foreign")
  academic_attendances                                                                               academic_attendances[]
  academic_student_courses                                                                           academic_student_courses[]
  academic_students_academic_datasetToacademic_students_line_id                                      academic_students[]              @relation("academic_datasetToacademic_students_line_id")
  academic_students_academic_datasetToacademic_students_program_id                                   academic_students[]              @relation("academic_datasetToacademic_students_program_id")
  academic_students_academic_datasetToacademic_students_specialization_id                            academic_students[]              @relation("academic_datasetToacademic_students_specialization_id")
  admission_applicant_pemetaan_academic_datasetToadmission_applicant_pemetaan_program_final          admission_applicant_pemetaan[]   @relation("academic_datasetToadmission_applicant_pemetaan_program_final")
  admission_applicant_pemetaan_academic_datasetToadmission_applicant_pemetaan_program_origin         admission_applicant_pemetaan[]   @relation("academic_datasetToadmission_applicant_pemetaan_program_origin")
  admission_applicant_pemetaan_academic_datasetToadmission_applicant_pemetaan_program_recommendation admission_applicant_pemetaan[]   @relation("academic_datasetToadmission_applicant_pemetaan_program_recommendation")
  admission_applicants_academic_datasetToadmission_applicants_line_id                                admission_applicants[]           @relation("academic_datasetToadmission_applicants_line_id")
  admission_applicants_academic_datasetToadmission_applicants_program_id                             admission_applicants[]           @relation("academic_datasetToadmission_applicants_program_id")
  admission_applicants_academic_datasetToadmission_applicants_specialization_id                      admission_applicants[]           @relation("academic_datasetToadmission_applicants_specialization_id")
  admission_applicants_academic_datasetToadmission_applicants_typephase_id                           admission_applicants[]           @relation("academic_datasetToadmission_applicants_typephase_id")
  admission_phase_dataset                                                                            admission_phase_dataset[]        @ignore
  admission_phases                                                                                   admission_phases[]
  admission_progress_receivables                                                                     admission_progress_receivables[] @ignore
  finance_cost_specialization                                                                        finance_cost_specialization[]    @ignore
  finance_costs_academic_datasetTofinance_costs_line_id                                              finance_costs[]                  @relation("academic_datasetTofinance_costs_line_id")
  finance_costs_academic_datasetTofinance_costs_program_id                                           finance_costs[]                  @relation("academic_datasetTofinance_costs_program_id")
  finance_costs_academic_datasetTofinance_costs_typephase_id                                         finance_costs[]                  @relation("academic_datasetTofinance_costs_typephase_id")
}

model academic_dataset_metadata {
  id    Int    @id(map: "admission_dataset_metadata_pkey") @default(autoincrement())
  key   String @db.VarChar(255)
  value String
  type  String @default("string") @db.VarChar(255)

  @@index([key, id], map: "admission_dataset_metadata_key_id_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model academic_parent_students {
  parent_id         BigInt
  student_id        BigInt
  academic_parents  academic_parents  @relation(fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_parent_students_parent_id_foreign")
  academic_students academic_students @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_parent_students_student_id_foreign")

  @@ignore
}

model academic_parents {
  id                       BigInt                     @id @default(autoincrement())
  person_id                BigInt
  user_id                  BigInt
  type                     String?                    @db.VarChar(255)
  last_education           String?                    @db.VarChar(255)
  occupation               String?                    @db.VarChar(255)
  monthly_expenditure      String?                    @db.VarChar(255)
  daily_language           String?                    @db.VarChar(255)
  website                  String?                    @db.VarChar(255)
  created_at               DateTime?                  @db.Timestamp(0)
  updated_at               DateTime?                  @db.Timestamp(0)
  deleted_at               DateTime?                  @db.Timestamp(0)
  school_id                Int?
  people                   people                     @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_parents_person_id_foreign")
  users                    users                      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_parents_user_id_foreign")
  academic_parent_students academic_parent_students[] @ignore
}

model academic_period {
  id                                  Int                                   @id @default(autoincrement())
  school_id                           Int
  name                                String                                @db.VarChar(255)
  start_date                          DateTime                              @db.Date
  end_date                            DateTime                              @db.Date
  term_type                           String                                @default("semester") @db.VarChar(255)
  created_at                          DateTime?                             @db.Timestamp(0)
  updated_at                          DateTime?                             @db.Timestamp(0)
  deleted_at                          DateTime?                             @db.Timestamp(0)
  applicant_number_pattern            String                                @default("") @db.VarChar(20)
  student_number_pattern              String                                @default("") @db.VarChar(20)
  student_number_method               Int                                   @default(1) @db.SmallInt
  schools                             schools                               @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_period_school_id_foreign")
  academic_assignment                 academic_assignment[]
  academic_attendances                academic_attendances[]
  academic_classrooms                 academic_classrooms[]
  academic_committee                  academic_committee[]
  academic_course_assessments         academic_course_assessments[]
  academic_course_schedules           academic_course_schedules[]
  academic_student_course_attendances academic_student_course_attendances[]
  academic_student_courses            academic_student_courses[]
  academic_student_status             academic_student_status[]
  academic_students                   academic_students[]
  academic_teacher_course_attendances academic_teacher_course_attendances[]
  academic_terms                      academic_terms[]
  academic_user_permit                academic_user_permit[]
  admission_phases                    admission_phases[]
  boardings                           boardings[]
  finance_costs                       finance_costs[]
  finance_rapbs                       finance_rapbs[]
  finance_rapbs_licensors             finance_rapbs_licensors[]
  hr_staff_attendances                hr_staff_attendances[]
  human_resource_staff_status         human_resource_staff_status[]
  message_whatsapp                    message_whatsapp[]
  mpls_group                          mpls_group[]
  mpls_group_applicant_attendances    mpls_group_applicant_attendances[]

  @@index([end_date], map: "academic_period_end_date_index")
  @@index([start_date], map: "academic_period_start_date_index")
  @@index([term_type], map: "academic_period_term_type_index")
}

model academic_predicate_rules {
  id                  BigInt              @id @default(autoincrement())
  predicate_id        Int
  name                String              @db.VarChar(50)
  score_start         Float
  score_end           Float
  description         String              @default("") @db.VarChar(255)
  created_at          DateTime?           @db.Timestamp(0)
  updated_at          DateTime?           @db.Timestamp(0)
  academic_predicates academic_predicates @relation(fields: [predicate_id], references: [id], onUpdate: NoAction, map: "academic_predicate_rules_predicate_id_foreign")
}

model academic_predicates {
  id                                          Int                                    @id @default(autoincrement())
  school_id                                   Int?
  base_id                                     Int?
  name                                        String                                 @db.VarChar(255)
  display                                     String                                 @default("") @db.VarChar(30)
  description                                 String                                 @default("") @db.VarChar(255)
  created_at                                  DateTime?                              @db.Timestamp(0)
  updated_at                                  DateTime?                              @db.Timestamp(0)
  created_by                                  BigInt?
  updated_by                                  BigInt?
  deleted_at                                  DateTime?                              @db.Timestamp(0)
  deleted_by                                  BigInt?
  academic_predicates                         academic_predicates?                   @relation("academic_predicatesToacademic_predicates_base_id", fields: [base_id], references: [id], onUpdate: NoAction, map: "academic_predicates_base_id_foreign")
  users_academic_predicates_created_byTousers users?                                 @relation("academic_predicates_created_byTousers", fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_predicates_created_by_foreign")
  users_academic_predicates_deleted_byTousers users?                                 @relation("academic_predicates_deleted_byTousers", fields: [deleted_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_predicates_deleted_by_foreign")
  schools                                     schools?                               @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_predicates_school_id_foreign")
  users_academic_predicates_updated_byTousers users?                                 @relation("academic_predicates_updated_byTousers", fields: [updated_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_predicates_updated_by_foreign")
  academic_curriculum_predicate_course        academic_curriculum_predicate_course[] @ignore
  academic_predicate_rules                    academic_predicate_rules[]
  other_academic_predicates                   academic_predicates[]                  @relation("academic_predicatesToacademic_predicates_base_id")
}

model academic_report_card {
  id                                           Int                             @id @default(autoincrement())
  school_id                                    Int?
  scope                                        Int                             @default(1) @db.SmallInt
  type                                         Int                             @default(1) @db.SmallInt
  name                                         String                          @db.VarChar(255)
  curriculum                                   String                          @db.VarChar(255)
  created_at                                   DateTime?                       @db.Timestamp(0)
  updated_at                                   DateTime?                       @db.Timestamp(0)
  deleted_at                                   DateTime?                       @db.Timestamp(0)
  created_by                                   BigInt?
  updated_by                                   BigInt?
  option                                       Json?
  users_academic_report_card_created_byTousers users?                          @relation("academic_report_card_created_byTousers", fields: [created_by], references: [id], onDelete: Cascade)
  schools                                      schools?                        @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_report_card_school_id_foreign")
  users_academic_report_card_updated_byTousers users?                          @relation("academic_report_card_updated_byTousers", fields: [updated_by], references: [id], onDelete: Cascade)
  academic_student_report_cards                academic_student_report_cards[]

  @@unique([school_id, type, name, curriculum], map: "academic_report_card_school_id_type_name_curriculum_unique")
  @@index([school_id, type, name, curriculum], map: "academic_report_card_school_id_type_name_curriculum_index")
}

model academic_school_hours {
  id                                                                                  BigInt                      @id @default(autoincrement())
  school_id                                                                           Int
  days                                                                                String                      @db.VarChar(255)
  name                                                                                String                      @db.VarChar(255)
  start                                                                               String                      @db.VarChar(255)
  end                                                                                 String                      @db.VarChar(255)
  duration                                                                            String                      @db.VarChar(255)
  notes                                                                               String?
  deleted_at                                                                          DateTime?                   @db.Timestamp(0)
  created_at                                                                          DateTime?                   @db.Timestamp(0)
  updated_at                                                                          DateTime?                   @db.Timestamp(0)
  schools                                                                             schools                     @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_school_hours_school_id_foreign")
  academic_course_schedules_academic_course_schedules_end_idToacademic_school_hours   academic_course_schedules[] @relation("academic_course_schedules_end_idToacademic_school_hours")
  academic_course_schedules_academic_course_schedules_start_idToacademic_school_hours academic_course_schedules[] @relation("academic_course_schedules_start_idToacademic_school_hours")

  @@index([days], map: "academic_school_hours_days_index")
  @@index([duration], map: "academic_school_hours_duration_index")
  @@index([end], map: "academic_school_hours_end_index")
  @@index([start], map: "academic_school_hours_start_index")
}

model academic_student_course_attendances {
  id                  BigInt               @id @default(autoincrement())
  school_id           Int?
  period_id           Int
  course_schedule_id  BigInt?
  classroom_id        BigInt?
  student_id          BigInt
  attendance_date     DateTime             @db.Timestamp(6)
  presence            Int                  @db.SmallInt
  absent_cause        String?              @db.VarChar(255)
  notes               String?
  deleted_at          DateTime?            @db.Timestamp(0)
  created_at          DateTime?            @db.Timestamp(0)
  updated_at          DateTime?            @db.Timestamp(0)
  course_id           Int
  created_by          BigInt?
  latitude            String?              @db.VarChar
  longitude           String?              @db.VarChar
  academic_classrooms academic_classrooms? @relation(fields: [classroom_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_course_attendances_classroom_id_foreign")
  academic_courses    academic_courses     @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users               users?               @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  academic_period     academic_period      @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_course_attendances_period_id_foreign")
  schools             schools?             @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_course_attendances_school_id_foreign")
  academic_students   academic_students    @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_course_attendances_student_id_foreign")
}

model academic_student_courses {
  id                                               BigInt               @id @default(autoincrement())
  school_id                                        Int
  period_id                                        Int
  student_id                                       BigInt
  classroom_id                                     BigInt
  course_id                                        Int
  teacher_id                                       BigInt
  curriculum_ids                                   String?              @db.VarChar(100)
  curriculum                                       String?              @db.VarChar(500)
  term                                             String?              @db.VarChar(500)
  group_id                                         Int?
  groups                                           String?              @db.VarChar(255)
  duration                                         Int?                 @db.SmallInt
  order                                            Int?                 @db.SmallInt
  options                                          String?
  created_at                                       DateTime?            @db.Timestamp(0)
  updated_at                                       DateTime?            @db.Timestamp(0)
  created_by                                       BigInt?
  updated_by                                       BigInt?
  sort_by                                          Int                  @default(0) @db.SmallInt
  academic_classrooms                              academic_classrooms  @relation(fields: [classroom_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_courses_classroom_id_foreign")
  academic_courses                                 academic_courses     @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_courses_course_id_foreign")
  users_academic_student_courses_created_byTousers users?               @relation("academic_student_courses_created_byTousers", fields: [created_by], references: [id], onDelete: Cascade)
  academic_dataset                                 academic_dataset?    @relation(fields: [group_id], references: [id], onUpdate: NoAction, map: "academic_student_courses_group_id_foreign")
  academic_period                                  academic_period      @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_courses_period_id_foreign")
  schools                                          schools              @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_courses_school_id_foreign")
  academic_students                                academic_students    @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_courses_student_id_foreign")
  human_resource_staff                             human_resource_staff @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_courses_teacher_id_foreign")
  users_academic_student_courses_updated_byTousers users?               @relation("academic_student_courses_updated_byTousers", fields: [updated_by], references: [id], onDelete: Cascade)

  @@unique([school_id, period_id, course_id, student_id, classroom_id, teacher_id, curriculum, term, group_id, groups], map: "unique_student_course")
  @@index([school_id, period_id, course_id, student_id, classroom_id, teacher_id, curriculum, term, group_id, groups], map: "academic_student_course_base_index")
}

model academic_student_journal {
  id                BigInt            @id @default(autoincrement())
  student_id        BigInt
  created_by        BigInt
  date              DateTime?         @db.Date
  notes             String
  created_at        DateTime?         @db.Timestamp(0)
  updated_at        DateTime?         @db.Timestamp(0)
  activity          String            @db.VarChar(255)
  school_id         Int?
  users             users             @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_journal_created_by_foreign")
  academic_students academic_students @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_journal_student_id_foreign")
}

model academic_student_report_card_details {
  school_id                      Int?
  id                             BigInt                          @id @default(autoincrement())
  student_report_card_id         BigInt?
  course_id                      Int?
  course_teacher_id              BigInt?
  competence_id                  Int?
  score                          Float?                          @default(0)
  notes                          String?
  created_at                     DateTime?                       @db.Timestamp(0)
  updated_at                     DateTime?                       @db.Timestamp(0)
  deleted_at                     DateTime?                       @db.Timestamp(0)
  student_id                     BigInt
  class_id                       Int
  classroom_id                   BigInt
  term_id                        Int
  term_code                      Int?                            @default(1) @db.SmallInt
  term_variant                   String?                         @default("full") @db.VarChar(20)
  predicate                      String?                         @db.VarChar(50)
  sort_by                        Int                             @default(0) @db.SmallInt
  academic_classes               academic_classes                @relation(fields: [class_id], references: [id], map: "academic_student_report_card_details_class_id_foreign")
  academic_classrooms            academic_classrooms             @relation(fields: [classroom_id], references: [id], map: "academic_student_report_card_details_classroom_id_foreign")
  academic_curriculum_competence academic_curriculum_competence? @relation(fields: [competence_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_report_card_details_competence_id_foreign")
  academic_courses               academic_courses?               @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_report_card_details_course_id_foreign")
  human_resource_staff           human_resource_staff?           @relation(fields: [course_teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_report_card_details_course_teacher_id_foreign")
  schools                        schools?                        @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_report_card_details_school_id_foreign")
  academic_students              academic_students               @relation(fields: [student_id], references: [id], map: "academic_student_report_card_details_student_id_foreign")
  academic_student_report_cards  academic_student_report_cards?  @relation(fields: [student_report_card_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_report_card_details_report_card_id_foreign")
  academic_terms                 academic_terms                  @relation(fields: [term_id], references: [id], map: "academic_student_report_card_details_term_id_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model academic_student_report_card_variant {
  student_report_card_id        BigInt
  student_report_card_detail_id BigInt
  score                         Float?
  notes                         String?
  created_at                    DateTime? @db.Timestamp(0)
  updated_at                    DateTime? @db.Timestamp(0)

  @@ignore
}

model academic_student_report_cards {
  id                                   BigInt                                 @id @default(autoincrement())
  school_id                            Int?
  term_id                              Int
  student_id                           BigInt
  class_id                             Int
  classroom_id                         BigInt
  promote_grade_status                 String?                                @db.VarChar(255)
  status                               String                                 @default("drafted") @db.VarChar(255)
  revision                             Int?                                   @db.SmallInt
  approval_status                      String                                 @default("approved") @db.VarChar(255)
  student_notes                        String?
  rejected_notes                       String?
  absent_permission                    Int                                    @default(0) @db.SmallInt
  absent_sick                          Int                                    @default(0) @db.SmallInt
  absent_unknown                       Int                                    @default(0) @db.SmallInt
  created_at                           DateTime?                              @db.Timestamp(0)
  updated_at                           DateTime?                              @db.Timestamp(0)
  deleted_at                           DateTime?                              @db.Timestamp(0)
  term_code                            Int                                    @default(1) @db.SmallInt
  term_variant                         String                                 @default("full") @db.VarChar(20)
  report_card_id                       Int?                                   @default(1)
  option                               Json?
  academic_classes                     academic_classes                       @relation(fields: [class_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  academic_classrooms                  academic_classrooms                    @relation(fields: [classroom_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_report_cards_classroom_id_foreign")
  academic_report_card                 academic_report_card?                  @relation(fields: [report_card_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "academic_student_report_cards_report_card_id_foreign")
  schools                              schools?                               @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_report_cards_school_id_foreign")
  academic_students                    academic_students                      @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_report_cards_student_id_foreign")
  academic_terms                       academic_terms                         @relation(fields: [term_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_report_cards_term_id_foreign")
  academic_student_report_card_details academic_student_report_card_details[]
}

model academic_student_status {
  student_id        BigInt
  period_id         Int
  status            String            @default("active") @db.VarChar(50)
  reason            String?           @db.VarChar(255)
  date              DateTime?         @db.Date
  performed_by      BigInt
  created_at        DateTime?         @db.Timestamp(0)
  updated_at        DateTime?         @db.Timestamp(0)
  users             users             @relation(fields: [performed_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_status_performed_by_foreign")
  academic_period   academic_period   @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_status_period_id_foreign")
  academic_students academic_students @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_student_status_student_id_foreign")

  @@id([student_id, period_id])
}

model academic_students {
  id                                                                                 BigInt                                 @id @default(autoincrement())
  person_id                                                                          BigInt
  user_id                                                                            BigInt
  class_id                                                                           Int
  period_id                                                                          Int
  line_id                                                                            Int?
  program_id                                                                         Int?
  specialization_id                                                                  Int?
  year_in                                                                            Int?                                   @db.SmallInt
  year_out                                                                           Int?                                   @db.SmallInt
  registration_number                                                                String?                                @db.VarChar(255)
  nisn                                                                               String?                                @db.VarChar(255)
  nis                                                                                String?                                @db.VarChar(255)
  no_akta                                                                            String?                                @db.VarChar(255)
  school_origin                                                                      String?                                @db.VarChar(255)
  child_number                                                                       Int                                    @default(0) @db.SmallInt
  total_sibling                                                                      Int                                    @default(0) @db.SmallInt
  total_foster_sibling                                                               Int                                    @default(0) @db.SmallInt
  total_step_sibling                                                                 Int                                    @default(0) @db.SmallInt
  daily_language                                                                     String?                                @db.VarChar(255)
  website                                                                            String?                                @db.VarChar(255)
  mutation                                                                           Boolean                                @default(false)
  mutation_date                                                                      DateTime?                              @db.Date
  mutation_reason                                                                    String?
  is_boarding                                                                        Boolean                                @default(false)
  is_graduate                                                                        Boolean                                @default(false)
  created_at                                                                         DateTime?                              @db.Timestamp(0)
  updated_at                                                                         DateTime?                              @db.Timestamp(0)
  deleted_at                                                                         DateTime?                              @db.Timestamp(0)
  is_promoted                                                                        Boolean?
  is_indent                                                                          Boolean?
  school_id                                                                          Int
  mutation_type                                                                      String?                                @db.VarChar(50)
  nus                                                                                Float?
  status_graduate                                                                    String?                                @db.VarChar(50)
  typephase_id                                                                       Int?
  is_mutation                                                                        Boolean?
  status                                                                             String                                 @default("active") @db.VarChar(50)
  verified_at                                                                        DateTime?                              @db.Timestamp(6)
  verified_by                                                                        BigInt?
  is_locked                                                                          Boolean?                               @default(false)
  last_classroom_id                                                                  BigInt?
  last_boarding_id                                                                   BigInt?
  academic_classes                                                                   academic_classes                       @relation(fields: [class_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  academic_classrooms_academic_classroomsToacademic_students_last_boarding_id        academic_classrooms?                   @relation("academic_classroomsToacademic_students_last_boarding_id", fields: [last_boarding_id], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "academic_students_last_boarding_id_foreign")
  academic_classrooms_academic_classroomsToacademic_students_last_classroom_id       academic_classrooms?                   @relation("academic_classroomsToacademic_students_last_classroom_id", fields: [last_classroom_id], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "academic_students_last_classroom_id_foreign")
  academic_dataset_academic_datasetToacademic_students_line_id                       academic_dataset?                      @relation("academic_datasetToacademic_students_line_id", fields: [line_id], references: [id], onUpdate: NoAction)
  academic_period                                                                    academic_period                        @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_students_period_id_foreign")
  people                                                                             people                                 @relation(fields: [person_id], references: [id], onUpdate: NoAction)
  academic_dataset_academic_datasetToacademic_students_program_id                    academic_dataset?                      @relation("academic_datasetToacademic_students_program_id", fields: [program_id], references: [id], onUpdate: NoAction)
  schools                                                                            schools                                @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_students_school_id_b_fkey")
  academic_dataset_academic_datasetToacademic_students_specialization_id             academic_dataset?                      @relation("academic_datasetToacademic_students_specialization_id", fields: [specialization_id], references: [id], onUpdate: NoAction)
  users                                                                              users                                  @relation(fields: [user_id], references: [id], onUpdate: NoAction)
  academic_assignment_pools                                                          academic_assignment_pools[]            @ignore
  academic_classroom_students                                                        academic_classroom_students[]
  academic_classrooms_academic_classrooms_class_leader_student_idToacademic_students academic_classrooms[]                  @relation("academic_classrooms_class_leader_student_idToacademic_students")
  academic_course_assessments                                                        academic_course_assessments[]
  academic_course_schedule_student                                                   academic_course_schedule_student[]
  academic_parent_students                                                           academic_parent_students[]             @ignore
  academic_student_course_attendances                                                academic_student_course_attendances[]
  academic_student_courses                                                           academic_student_courses[]
  academic_student_journal                                                           academic_student_journal[]
  academic_student_report_card_details                                               academic_student_report_card_details[]
  academic_student_report_cards                                                      academic_student_report_cards[]
  academic_student_status                                                            academic_student_status[]
  boarding_students                                                                  boarding_students[]
  boardings                                                                          boardings[]
  counseling_case_offenders                                                          counseling_case_offenders[]
  counseling_consultation_students                                                   counseling_consultation_students[]
  finance_summary_receivable                                                         finance_summary_receivable[]
  studentship_achievement_student                                                    studentship_achievement_student[]
  studentship_case_offenders                                                         studentship_case_offenders[]
  studentship_student_meal                                                           studentship_student_meal[]
  studentship_student_medical                                                        studentship_student_medical[]
  studentship_tahfidz                                                                studentship_tahfidz[]

  @@index([school_id, user_id, mutation_type], map: "academic_students_school_id_user_id_mutation_type")
  @@index([user_id], map: "academic_students_user_id")
}

model academic_teacher_course_attendances {
  id                        BigInt                     @id @default(autoincrement())
  school_id                 Int?
  period_id                 Int
  course_schedule_id        BigInt?
  classroom_id              BigInt?
  teacher_id                BigInt
  attendance_date           DateTime                   @db.Timestamp(6)
  presence                  Int                        @db.SmallInt
  absent_cause              String?                    @db.VarChar(255)
  notes                     String?
  deleted_at                DateTime?                  @db.Timestamp(0)
  created_at                DateTime?                  @db.Timestamp(0)
  updated_at                DateTime?                  @db.Timestamp(0)
  course_id                 Int
  academic_classrooms       academic_classrooms?       @relation(fields: [classroom_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_teacher_course_attendances_classroom_id_foreign")
  academic_courses          academic_courses           @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  academic_course_schedules academic_course_schedules? @relation(fields: [course_schedule_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_teacher_course_attendances_course_schedule_id_foreign")
  academic_period           academic_period            @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_teacher_course_attendances_period_id_foreign")
  schools                   schools?                   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_teacher_course_attendances_school_id_foreign")
  human_resource_staff      human_resource_staff       @relation(fields: [teacher_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_teacher_course_attendances_teacher_id_foreign")
}

model academic_terms {
  id                                                   Int                                                    @id @default(autoincrement())
  school_id                                            Int
  period_id                                            Int
  name                                                 String                                                 @db.VarChar(255)
  start_date                                           DateTime?                                              @db.Date
  end_date                                             DateTime?                                              @db.Date
  status                                               Boolean?
  code                                                 Int                                                    @default(1) @db.SmallInt
  academic_period                                      academic_period                                        @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_terms_period_id_foreign")
  schools                                              schools                                                @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "academic_terms_school_id_foreign")
  academic_course_assessment_competence_basic_formulas academic_course_assessment_competence_basic_formulas[]
  academic_course_assessment_competence_formulas       academic_course_assessment_competence_formulas[]
  academic_course_assessments                          academic_course_assessments[]
  academic_student_report_card_details                 academic_student_report_card_details[]
  academic_student_report_cards                        academic_student_report_cards[]
  studentship_tahfidz                                  studentship_tahfidz[]

  @@index([end_date], map: "academic_terms_end_date_index")
  @@index([start_date], map: "academic_terms_start_date_index")
}

model academic_user_permit {
  id                                           BigInt          @id(map: "studentship_student_permit_pkey") @default(autoincrement())
  school_id                                    Int
  period_id                                    Int
  created_by                                   BigInt
  approved_by                                  BigInt?
  category_id                                  Int
  from                                         DateTime        @db.Timestamp(0)
  to                                           DateTime        @db.Timestamp(0)
  reason                                       String          @db.VarChar(255)
  notes                                        String
  status                                       String          @db.VarChar(255)
  created_at                                   DateTime?       @db.Timestamp(0)
  updated_at                                   DateTime?       @db.Timestamp(0)
  user_id                                      BigInt?
  in                                           DateTime?       @db.Timestamp(6)
  reject_reason                                String?
  users_academic_user_permit_created_byTousers users           @relation("academic_user_permit_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction, map: "studentship_student_permit_created_by_fkey")
  academic_period                              academic_period @relation(fields: [period_id], references: [id], onUpdate: NoAction, map: "studentship_student_permit_period_id_fkey")
  schools                                      schools         @relation(fields: [school_id], references: [id], onUpdate: NoAction, map: "studentship_student_permit_school_id_fkey")
  users_academic_user_permit_user_idTousers    users?          @relation("academic_user_permit_user_idTousers", fields: [user_id], references: [id], onDelete: Restrict, map: "studentship_student_permit_user_id_fkey")
}

model activity_log {
  id           BigInt    @id @default(autoincrement())
  school_id    Int?
  log_name     String?   @db.VarChar(255)
  description  String    @db.VarChar(255)
  subject_id   BigInt?
  subject_type String?   @db.VarChar(255)
  causer_id    BigInt?
  causer_type  String?   @db.VarChar(255)
  properties   String?
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model admission_applicant_checklist {
  school_id                 Int?
  applicant_id              BigInt
  checklist_id              Int
  is_complete               Boolean                   @default(false)
  admission_applicants      admission_applicants      @relation(fields: [applicant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "applicant_foreign")
  admission_phase_checklist admission_phase_checklist @relation(fields: [checklist_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "checklist_foreign")

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model admission_applicant_data {
  applicant_id BigInt
  key          String  @db.VarChar(255)
  value        String?
  type         String  @default("string") @db.VarChar(255)

  @@index([key, applicant_id], map: "admission_applicant_data_key_applicant_id_index")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model admission_applicant_interview {
  school_id                  Int?
  applicant_id               BigInt
  interview_id               Int
  present_at                 DateTime?                  @db.Timestamp(0)
  admission_applicants       admission_applicants       @relation(fields: [applicant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_applicant_interview_applicant_id_foreign")
  admission_phase_interviews admission_phase_interviews @relation(fields: [interview_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_applicant_interview_interview_id_foreign")

  @@ignore
}

model admission_applicant_pemetaan {
  id                                                                                     BigInt                                 @id @default(autoincrement())
  school_id                                                                              Int
  applicant_id                                                                           BigInt
  program_origin                                                                         Int
  program_recommendation                                                                 Int
  notes                                                                                  String?                                @db.VarChar(255)
  created_by                                                                             BigInt?
  updated_by                                                                             BigInt?
  created_at                                                                             DateTime?                              @db.Timestamp(0)
  updated_at                                                                             DateTime?                              @db.Timestamp(0)
  publish_by                                                                             BigInt?
  publish_at                                                                             DateTime?                              @db.Timestamp(6)
  program_final                                                                          Int
  admission_applicants                                                                   admission_applicants                   @relation(fields: [applicant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_applicant_pemetaan_applicant_id_foreign")
  users_admission_applicant_pemetaan_created_byTousers                                   users?                                 @relation("admission_applicant_pemetaan_created_byTousers", fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_applicant_pemetaan_created_by_foreign")
  academic_dataset_academic_datasetToadmission_applicant_pemetaan_program_final          academic_dataset                       @relation("academic_datasetToadmission_applicant_pemetaan_program_final", fields: [program_final], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_applicant_pemetaan_program_final_foreign")
  academic_dataset_academic_datasetToadmission_applicant_pemetaan_program_origin         academic_dataset                       @relation("academic_datasetToadmission_applicant_pemetaan_program_origin", fields: [program_origin], references: [id], onDelete: Cascade, map: "admission_applicant_pemetaan_program_origin_foreign")
  academic_dataset_academic_datasetToadmission_applicant_pemetaan_program_recommendation academic_dataset                       @relation("academic_datasetToadmission_applicant_pemetaan_program_recommendation", fields: [program_recommendation], references: [id], onDelete: Cascade, map: "admission_applicant_pemetaan_program_resolve_foreign")
  users_admission_applicant_pemetaan_publish_byTousers                                   users?                                 @relation("admission_applicant_pemetaan_publish_byTousers", fields: [publish_by], references: [id], onDelete: Cascade, map: "admission_applicant_pemetaan_publish_by_foreign")
  schools                                                                                schools                                @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_applicant_pemetaan_school_id_foreign")
  users_admission_applicant_pemetaan_updated_byTousers                                   users?                                 @relation("admission_applicant_pemetaan_updated_byTousers", fields: [updated_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_applicant_pemetaan_updated_by_foreign")
  admission_applicant_pemetaan_details                                                   admission_applicant_pemetaan_details[] @ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model admission_applicant_pemetaan_details {
  applicant_pemetaan_id                                        BigInt
  pemetaan_id                                                  Int
  score                                                        Int                          @default(0) @db.SmallInt
  created_by                                                   BigInt?
  updated_by                                                   BigInt?
  created_at                                                   DateTime?                    @db.Timestamp(0)
  updated_at                                                   DateTime?                    @db.Timestamp(0)
  admission_applicant_pemetaan                                 admission_applicant_pemetaan @relation(fields: [applicant_pemetaan_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_applicant_pemetaan_details_applicant_pemetaan_id_fore")
  users_admission_applicant_pemetaan_details_created_byTousers users?                       @relation("admission_applicant_pemetaan_details_created_byTousers", fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_applicant_pemetaan_details_created_by_foreign")
  admission_pemetaan                                           admission_pemetaan           @relation(fields: [pemetaan_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_applicant_pemetaan_details_pemetaan_id_foreign")
  users_admission_applicant_pemetaan_details_updated_byTousers users?                       @relation("admission_applicant_pemetaan_details_updated_byTousers", fields: [updated_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_applicant_pemetaan_details_updated_by_foreign")

  @@ignore
}

model admission_applicant_progress {
  id                   BigInt               @id @default(autoincrement())
  school_id            Int?
  applicant_id         BigInt
  created_by           BigInt
  status               String               @db.VarChar(255)
  notes                String?              @db.VarChar(1000)
  created_at           DateTime?            @db.Timestamp(0)
  updated_at           DateTime?            @db.Timestamp(0)
  admission_applicants admission_applicants @relation(fields: [applicant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_applicant_progress_applicant_id_foreign")
  users                users                @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_applicant_progress_created_by_foreign")
}

model admission_applicants {
  id                                                                        BigInt                             @id @default(autoincrement())
  school_id                                                                 Int
  user_id                                                                   BigInt
  phase_id                                                                  Int                                @default(0)
  line_id                                                                   Int?
  program_id                                                                Int?
  specialization_id                                                         Int?
  boarding_id                                                               Int?
  registration_number                                                       String                             @db.VarChar(255)
  nisn                                                                      String?                            @db.VarChar(255)
  nik                                                                       String?                            @db.VarChar(255)
  no_akta                                                                   String?                            @db.VarChar(255)
  name                                                                      String                             @db.VarChar(255)
  nickname                                                                  String?                            @db.VarChar(255)
  gender                                                                    String                             @default("other") @db.VarChar(255)
  religion                                                                  String                             @default("other") @db.VarChar(255)
  phone                                                                     String?                            @db.VarChar(255)
  school_origin                                                             String?                            @db.VarChar(255)
  address                                                                   String?
  city_id                                                                   Int?
  birthplace                                                                String?                            @db.VarChar(255)
  birthday                                                                  DateTime?                          @db.Date
  website                                                                   String?                            @db.VarChar(255)
  mother_name                                                               String?                            @db.VarChar(255)
  child_number                                                              Int                                @default(0) @db.SmallInt
  total_sibling                                                             Int                                @default(0) @db.SmallInt
  total_foster_sibling                                                      Int                                @default(0) @db.SmallInt
  total_step_sibling                                                        Int                                @default(0) @db.SmallInt
  daily_language                                                            String?                            @db.VarChar(255)
  family_status                                                             String?                            @db.VarChar(255)
  nationality                                                               String?                            @db.VarChar(255)
  is_approved                                                               Boolean                            @default(false)
  approved_by                                                               BigInt                             @default(0)
  is_boarding                                                               Boolean                            @default(false)
  status                                                                    String?                            @db.VarChar(50)
  created_at                                                                DateTime?                          @db.Timestamp(0)
  updated_at                                                                DateTime?                          @db.Timestamp(0)
  person_id                                                                 BigInt?
  is_mutation                                                               Boolean?
  is_indent                                                                 Boolean?
  no_kk                                                                     String?                            @db.VarChar(255)
  typephase_id                                                              Int?
  class_id                                                                  Int?
  test_location_id                                                          Int?
  verified_at                                                               DateTime?                          @db.Timestamp(6)
  verified_by                                                               BigInt?
  is_locked                                                                 Boolean?                           @default(false)
  deleted_at                                                                DateTime?                          @db.Timestamp(0)
  deleted_by                                                                BigInt?
  users_admission_applicants_deleted_byTousers                              users?                             @relation("admission_applicants_deleted_byTousers", fields: [deleted_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_applicants_deleted_by_foreign")
  academic_dataset_academic_datasetToadmission_applicants_line_id           academic_dataset?                  @relation("academic_datasetToadmission_applicants_line_id", fields: [line_id], references: [id], onUpdate: NoAction)
  admission_phases                                                          admission_phases                   @relation(fields: [phase_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  academic_dataset_academic_datasetToadmission_applicants_program_id        academic_dataset?                  @relation("academic_datasetToadmission_applicants_program_id", fields: [program_id], references: [id], onUpdate: NoAction)
  schools                                                                   schools                            @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_applicants_school_id_foreign")
  academic_dataset_academic_datasetToadmission_applicants_specialization_id academic_dataset?                  @relation("academic_datasetToadmission_applicants_specialization_id", fields: [specialization_id], references: [id], onUpdate: NoAction)
  academic_dataset_academic_datasetToadmission_applicants_typephase_id      academic_dataset?                  @relation("academic_datasetToadmission_applicants_typephase_id", fields: [typephase_id], references: [id], onUpdate: NoAction)
  users_admission_applicants_user_idTousers                                 users                              @relation("admission_applicants_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_applicants_user_id_foreign")
  admission_applicant_checklist                                             admission_applicant_checklist[]    @ignore
  admission_applicant_interview                                             admission_applicant_interview[]    @ignore
  admission_applicant_pemetaan                                              admission_applicant_pemetaan[]
  admission_applicant_progress                                              admission_applicant_progress[]
  mpls_group_applicant                                                      mpls_group_applicant[]
  mpls_group_applicant_attendances                                          mpls_group_applicant_attendances[]

  @@unique([school_id, registration_number], map: "admission_applicants_school_id_registration_number")
  @@index([phase_id, line_id, program_id, specialization_id, boarding_id, status, name, registration_number], map: "admission_applicants_phase_id_line_id_program_id_specialization")
}

model admission_pemetaan {
  id                                         Int                                    @id @default(autoincrement())
  school_id                                  Int
  code                                       String?                                @db.VarChar(255)
  name                                       String                                 @db.VarChar(255)
  max_score                                  Int                                    @default(0) @db.SmallInt
  description                                String?                                @db.VarChar(255)
  sorting                                    Int                                    @default(1) @db.SmallInt
  created_by                                 BigInt?
  updated_by                                 BigInt?
  created_at                                 DateTime?                              @db.Timestamp(0)
  updated_at                                 DateTime?                              @db.Timestamp(0)
  deleted_at                                 DateTime?                              @db.Timestamp(0)
  users_admission_pemetaan_created_byTousers users?                                 @relation("admission_pemetaan_created_byTousers", fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_pemetaan_created_by_foreign")
  schools                                    schools                                @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_pemetaan_school_id_foreign")
  users_admission_pemetaan_updated_byTousers users?                                 @relation("admission_pemetaan_updated_byTousers", fields: [updated_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_pemetaan_updated_by_foreign")
  admission_applicant_pemetaan_details       admission_applicant_pemetaan_details[] @ignore
}

model admission_phase_checklist {
  id                            Int                             @id @default(autoincrement())
  phase_id                      Int
  name                          String                          @db.VarChar(255)
  description                   String?
  type                          String                          @default("general") @db.VarChar(255)
  options                       String?
  admission_phases              admission_phases                @relation(fields: [phase_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_phase_checklist_phase_id_foreign")
  admission_applicant_checklist admission_applicant_checklist[] @ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model admission_phase_dataset {
  dataset_id       Int
  phase_id         Int
  academic_dataset academic_dataset @relation(fields: [dataset_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_phase_dataset_dataset_id_foreign")
  admission_phases admission_phases @relation(fields: [phase_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_phase_dataset_phase_id_foreign")

  @@index([dataset_id, phase_id], map: "admission_phase_dataset_dataset_id_phase_id_index")
  @@ignore
}

model admission_phase_interviews {
  id                            Int                             @id @default(autoincrement())
  phase_id                      Int
  name                          String                          @db.VarChar(255)
  scheduled_start               DateTime?                       @db.Timestamp(0)
  scheduled_end                 DateTime?                       @db.Timestamp(0)
  place                         String?                         @db.VarChar(255)
  quota                         Int?
  instructions                  String?
  created_at                    DateTime?                       @db.Timestamp(0)
  updated_at                    DateTime?                       @db.Timestamp(0)
  admission_phases              admission_phases                @relation(fields: [phase_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_phase_interviews_phase_id_foreign")
  admission_applicant_interview admission_applicant_interview[] @ignore
}

model admission_phases {
  id                             Int                              @id @default(autoincrement())
  school_id                      Int?
  period_id                      Int
  code                           String                           @db.VarChar(255)
  name                           String                           @db.VarChar(255)
  start_date                     DateTime?                        @db.Date
  end_date                       DateTime?                        @db.Date
  is_boarding                    Boolean                          @default(false)
  is_active                      Boolean                          @default(false)
  quota                          Int                              @default(0)
  created_at                     DateTime?                        @db.Timestamp(0)
  updated_at                     DateTime?                        @db.Timestamp(0)
  deleted_at                     DateTime?                        @db.Timestamp(0)
  typephase_id                   Int?
  check_bill                     Boolean?                         @default(true)
  academic_period                academic_period                  @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_phases_period_id_foreign")
  schools                        schools?                         @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_phases_school_id_foreign")
  academic_dataset               academic_dataset?                @relation(fields: [typephase_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  admission_applicants           admission_applicants[]
  admission_phase_checklist      admission_phase_checklist[]
  admission_phase_dataset        admission_phase_dataset[]        @ignore
  admission_phase_interviews     admission_phase_interviews[]
  admission_progress_receivables admission_progress_receivables[] @ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model admission_progress_receivables {
  dataset_id                  Int?
  phase_id                    Int
  ar_id                       Int
  finance_account_receivables finance_account_receivables @relation(fields: [ar_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_progress_receivables_ar_id_foreign")
  academic_dataset            academic_dataset?           @relation(fields: [dataset_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_progress_receivables_dataset_id_foreign")
  admission_phases            admission_phases            @relation(fields: [phase_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "admission_progress_receivables_phase_id_foreign")

  @@index([dataset_id, phase_id], map: "admission_progress_receivables_dataset_id_phase_id_index")
  @@ignore
}

model asset_circulations {
  id                 BigInt     @id @default(autoincrement())
  school_id          Int
  type               String     @db.VarChar(255)
  item_id            BigInt
  date               DateTime?  @db.Timestamp(0)
  date_out           DateTime?  @db.Timestamp(0)
  date_move          DateTime?  @db.Timestamp(0)
  loaned_at          DateTime?  @db.Timestamp(0)
  should_returned_at DateTime?  @db.Timestamp(0)
  returned_at        DateTime?  @db.Timestamp(0)
  item_in            BigInt?
  moved_from         BigInt?
  moved_to           BigInt?
  condition          String     @db.VarChar(255)
  note               String?
  loaned_by          BigInt?
  received_by        BigInt?
  performed_by       BigInt?
  created_at         DateTime?  @db.Timestamp(0)
  updated_at         DateTime?  @db.Timestamp(0)
  deleted_at         DateTime?  @db.Timestamp(0)
  asset_item         asset_item @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_circulations_item_id_foreign")
  schools            schools    @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_circulations_school_id_foreign")

  @@index([item_id], map: "asset_circulations_item_id_index")
}

model asset_dataset {
  id             BigInt    @id @default(autoincrement())
  school_id      Int
  order          Int       @default(0)
  parent         Int?
  depth          Int       @default(0)
  right          Int       @default(0)
  left           Int       @default(1)
  image          String?   @db.VarChar(255)
  code           String?   @db.VarChar(255)
  name           String    @db.VarChar(255)
  slug           String?   @db.VarChar(255)
  classification String?   @db.VarChar(255)
  description    String?
  options        String?
  sorting        Int       @default(0)
  is_active      Boolean   @default(true)
  type           String    @default("default") @db.VarChar(255)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
  deleted_at     DateTime? @db.Timestamp(0)
  schools        schools   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_dataset_school_id_foreign")
}

model asset_item {
  id                                 BigInt                @id @default(autoincrement())
  school_id                          Int
  master_item_id                     BigInt?
  department_id                      BigInt?
  supplier_id                        BigInt?
  brand_id                           BigInt?
  transaction_detail_id              BigInt?
  date_of_purchase                   DateTime?             @db.Date
  register_date                      DateTime?             @db.Timestamp(0)
  serial_number                      String?               @db.VarChar(255)
  summary                            String?
  length                             String?               @db.VarChar(255)
  width                              String?               @db.VarChar(255)
  height                             String?               @db.VarChar(255)
  weight                             String?               @db.VarChar(255)
  color                              String?               @db.VarChar(255)
  buy_price                          Float?
  sell_price                         Float?
  fund_source                        String?               @db.VarChar(255)
  condition                          String                @db.VarChar(255)
  status                             String                @db.VarChar(255)
  created_by                         BigInt
  updated_by                         BigInt?
  deleted_by                         BigInt?
  created_at                         DateTime?             @db.Timestamp(0)
  updated_at                         DateTime?             @db.Timestamp(0)
  deleted_at                         DateTime?             @db.Timestamp(0)
  code                               String?               @db.VarChar
  users_asset_item_created_byTousers users                 @relation("asset_item_created_byTousers", fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_item_created_by_foreign")
  users_asset_item_deleted_byTousers users?                @relation("asset_item_deleted_byTousers", fields: [deleted_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_item_deleted_by_foreign")
  asset_master_item                  asset_master_item?    @relation(fields: [master_item_id], references: [id], onDelete: Cascade)
  schools                            schools               @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_item_school_id_foreign")
  users_asset_item_updated_byTousers users?                @relation("asset_item_updated_byTousers", fields: [updated_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_item_updated_by_foreign")
  asset_circulations                 asset_circulations[]
  asset_item_metadata                asset_item_metadata[]
}

model asset_item_metadata {
  id         BigInt     @id @default(autoincrement())
  school_id  Int
  item_id    BigInt
  key        String     @db.VarChar(255)
  value      String
  asset_item asset_item @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_item_metadata_item_id_foreign")
  schools    schools    @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_item_metadata_school_id_foreign")
}

model asset_land_building {
  id                                          Int           @id @default(autoincrement())
  school_id                                   Int
  type                                        String        @default("building") @db.VarChar(255)
  land_id                                     Int?
  code                                        String?       @db.VarChar(255)
  name                                        String        @db.VarChar(255)
  date_buy                                    DateTime?     @db.Date
  date_build                                  DateTime?     @db.Date
  ownership_status                            String?       @db.VarChar(255)
  condition                                   String?       @db.VarChar(255)
  area                                        String?       @db.VarChar(255)
  construction                                String?       @db.VarChar(255)
  price                                       Float?
  description                                 String?
  created_by                                  BigInt
  updated_by                                  BigInt?
  deleted_by                                  BigInt?
  created_at                                  DateTime?     @db.Timestamp(0)
  updated_at                                  DateTime?     @db.Timestamp(0)
  deleted_at                                  DateTime?     @db.Timestamp(0)
  users_asset_land_building_created_byTousers users         @relation("asset_land_building_created_byTousers", fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_land_building_created_by_foreign")
  users_asset_land_building_deleted_byTousers users?        @relation("asset_land_building_deleted_byTousers", fields: [deleted_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_land_building_deleted_by_foreign")
  schools                                     schools       @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_land_building_school_id_foreign")
  users_asset_land_building_updated_byTousers users?        @relation("asset_land_building_updated_byTousers", fields: [updated_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_land_building_updated_by_foreign")
  asset_rooms                                 asset_rooms[]
}

model asset_master_item {
  id                                        BigInt       @id @default(autoincrement())
  school_id                                 Int
  category_id                               BigInt?
  code                                      String?      @db.VarChar(255)
  name                                      String       @db.VarChar(255)
  summary                                   String?
  stock_in                                  BigInt?      @default(0)
  stock_out                                 BigInt?      @default(0)
  stock_last                                BigInt?      @default(0)
  created_by                                BigInt
  updated_by                                BigInt?
  deleted_by                                BigInt?
  created_at                                DateTime?    @db.Timestamp(0)
  updated_at                                DateTime?    @db.Timestamp(0)
  deleted_at                                DateTime?    @db.Timestamp(0)
  users_asset_master_item_created_byTousers users        @relation("asset_master_item_created_byTousers", fields: [created_by], references: [id])
  users_asset_master_item_deleted_byTousers users?       @relation("asset_master_item_deleted_byTousers", fields: [deleted_by], references: [id], onDelete: Restrict, onUpdate: Restrict)
  schools                                   schools      @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_master_item_school_id_foreign")
  asset_item                                asset_item[]
}

model asset_rooms {
  id                                      BigInt               @id @default(autoincrement())
  school_id                               Int
  building_id                             Int?
  code                                    String?              @db.VarChar(255)
  name                                    String               @db.VarChar(255)
  created_by                              BigInt
  updated_by                              BigInt?
  deleted_by                              BigInt?
  created_at                              DateTime?            @db.Timestamp(0)
  updated_at                              DateTime?            @db.Timestamp(0)
  deleted_at                              DateTime?            @db.Timestamp(0)
  responsible_by                          BigInt?
  asset_land_building                     asset_land_building? @relation(fields: [building_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_rooms_building_id_foreign")
  users_asset_rooms_created_byTousers     users                @relation("asset_rooms_created_byTousers", fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_rooms_created_by_foreign")
  users_asset_rooms_deleted_byTousers     users?               @relation("asset_rooms_deleted_byTousers", fields: [deleted_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_rooms_deleted_by_foreign")
  users_asset_rooms_responsible_byTousers users?               @relation("asset_rooms_responsible_byTousers", fields: [responsible_by], references: [id], onDelete: Restrict)
  schools                                 schools              @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_rooms_school_id_foreign")
  users_asset_rooms_updated_byTousers     users?               @relation("asset_rooms_updated_byTousers", fields: [updated_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_rooms_updated_by_foreign")
}

model asset_supplier {
  id          BigInt    @id @default(autoincrement())
  school_id   Int
  code        String?   @db.VarChar(255)
  pic_name    String    @db.VarChar(255)
  name        String    @db.VarChar(255)
  address     String?   @db.VarChar(255)
  city        String?   @db.VarChar(255)
  phone       String?   @db.VarChar(255)
  contact     String?   @db.VarChar(255)
  fax         String?   @db.VarChar(255)
  email       String?   @db.VarChar(255)
  website     String?   @db.VarChar(255)
  description String?
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  deleted_at  DateTime? @db.Timestamp(0)
  schools     schools   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "asset_supplier_school_id_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model attachables {
  attachment_id   BigInt
  attachable_id   BigInt
  attachable_type String      @db.VarChar(255)
  attachments     attachments @relation(fields: [attachment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "attachables_attachment_id_foreign")

  @@index([attachable_id], map: "attachable_type")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model attachment_logs {
  school_id     Int
  attachment_id BigInt
  opened_by     BigInt
  opened_at     DateTime    @db.Timestamp(0)
  attachments   attachments @relation(fields: [attachment_id], references: [id], onDelete: Cascade, map: "attachment_logs_attachment_id_foreign")
  users         users       @relation(fields: [opened_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "attachment_logs_opened_by_foreign")
  schools       schools     @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "attachment_logs_school_id_foreign")

  @@ignore
}

model attachments {
  id                                                       BigInt                      @id @default(autoincrement())
  path                                                     String                      @db.VarChar(255)
  title                                                    String?                     @db.VarChar(255)
  mime                                                     String?                     @db.VarChar(255)
  type                                                     String                      @default("attachment") @db.VarChar(255)
  uploaded_by                                              BigInt?
  additional                                               String?
  created_at                                               DateTime?                   @db.Timestamp(0)
  updated_at                                               DateTime?                   @db.Timestamp(0)
  school_id                                                Int?
  users                                                    users?                      @relation(fields: [uploaded_by], references: [id], onDelete: Cascade, onUpdate: NoAction)
  academic_assignment_pools                                academic_assignment_pools[] @ignore
  attachables                                              attachables[]               @ignore
  attachment_logs                                          attachment_logs[]           @ignore
  lms_lesson_materials                                     lms_lesson_materials[]      @ignore
  people_signs_attachmentsTopeople_signs_attachment_alt_id people_signs[]              @relation("attachmentsTopeople_signs_attachment_alt_id")
  people_signs_attachmentsTopeople_signs_attachment_id     people_signs[]              @relation("attachmentsTopeople_signs_attachment_id")

  @@index([uploaded_by], map: "attachments_uploaded_by_index")
  @@index([type], map: "uploaded_by")
}

model banks {
  id                    Int                     @id @default(autoincrement())
  code                  String?                 @db.VarChar(255)
  brand                 String?                 @db.VarChar(255)
  name                  String                  @db.VarChar(255)
  description           String?                 @db.VarChar(255)
  image                 String?                 @db.VarChar(255)
  deleted_at            DateTime?               @db.Timestamp(0)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  slug                  String?                 @db.VarChar(255)
  finance_bank_accounts finance_bank_accounts[]
  finance_bank_payments finance_bank_payments[]
}

model boarding_students {
  boarding_id       BigInt
  student_id        BigInt
  notes             String?
  created_at        DateTime?         @db.Timestamp(0)
  updated_at        DateTime?         @db.Timestamp(0)
  deleted_at        DateTime?         @db.Timestamp(0)
  boardings         boardings         @relation(fields: [boarding_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "boarding_students_boarding_id_foreign")
  academic_students academic_students @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "boarding_students_student_id_foreign")

  @@unique([boarding_id, student_id], map: "boarding_students_boarding_id_student_id")
}

model boardings {
  id                      BigInt              @id @default(autoincrement())
  school_id               Int?
  period_id               Int
  type                    String              @default("general") @db.VarChar(255)
  homeroom_id             BigInt?
  class_leader_student_id BigInt?
  name                    String              @db.VarChar(255)
  room                    String?             @db.VarChar(255)
  description             String?
  deleted_at              DateTime?           @db.Timestamp(0)
  created_at              DateTime?           @db.Timestamp(0)
  updated_at              DateTime?           @db.Timestamp(0)
  academic_students       academic_students?  @relation(fields: [class_leader_student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "boardings_class_leader_student_id_foreign")
  users                   users?              @relation(fields: [homeroom_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "boardings_homeroom_id_foreign")
  academic_period         academic_period     @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "boardings_period_id_foreign")
  schools                 schools?            @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "boardings_school_id_foreign")
  boarding_students       boarding_students[]
}

model canteen {
  id                  BigInt                @id @default(autoincrement())
  name                String                @db.VarChar(255)
  pic                 String                @db.VarChar(255)
  opening_minutes     Int                   @default(0)
  closing_minutes     Int                   @default(1440)
  is_open             Boolean               @default(true)
  address             String?
  handphone           String?               @db.VarChar(255)
  notes               String?
  created_at          DateTime?             @db.Timestamp(0)
  updated_at          DateTime?             @db.Timestamp(0)
  deleted_at          DateTime?             @db.Timestamp(0)
  canteen_attachments canteen_attachments[]
  canteen_school      canteen_school[]
  canteen_staff       canteen_staff[]
}

model canteen_attachments {
  id           BigInt        @id @default(autoincrement())
  menu_id      BigInt?
  canteen_id   BigInt?
  path         String        @db.VarChar(255)
  title        String?       @db.VarChar(255)
  mime         String?       @db.VarChar(255)
  type         String        @default("attachment") @db.VarChar(255)
  uploaded_by  BigInt?
  additional   String?
  created_at   DateTime?     @db.Timestamp(0)
  updated_at   DateTime?     @db.Timestamp(0)
  canteen      canteen?      @relation(fields: [canteen_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "canteen_attachments_canteen_id_foreign")
  canteen_menu canteen_menu? @relation(fields: [menu_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "canteen_attachments_menu_id_foreign")

  @@index([uploaded_by], map: "canteen_attachments_uploaded_by_index")
}

model canteen_dataset {
  id             BigInt           @id @default(autoincrement())
  school_id      Int
  order          Int              @default(0)
  parent         Int?
  depth          Int              @default(0)
  right          Int              @default(0)
  left           Int              @default(1)
  code           String           @db.VarChar(255)
  name           String           @db.VarChar(255)
  slug           String           @db.VarChar(255)
  description    String
  is_active      Boolean          @default(false)
  type           String           @default("category") @db.VarChar(255)
  created_at     DateTime?        @db.Timestamp(0)
  updated_at     DateTime?        @db.Timestamp(0)
  deleted_at     DateTime?        @db.Timestamp(0)
  schools        schools          @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "canteen_dataset_school_id_foreign")
  canteen_tenant canteen_tenant[]

  @@index([code], map: "canteen_dataset_code_index")
  @@index([order, parent, depth, right, left], map: "canteen_dataset_order_parent_depth_right_left_index")
  @@index([slug], map: "canteen_dataset_slug_index")
  @@index([type], map: "canteen_dataset_type_index")
}

model canteen_keyword {
  id         BigInt    @id @default(autoincrement())
  keyword    String    @db.VarChar(255)
  count      BigInt    @default(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model canteen_menu {
  id                          BigInt                        @id @default(autoincrement())
  picture                     String?                       @db.VarChar(255)
  tenant_id                   BigInt
  category                    String                        @db.VarChar(255)
  name                        String                        @db.VarChar(255)
  price                       Float
  rating                      Float                         @default(0)
  rate_count                  Int                           @default(0)
  notes                       String?
  created_at                  DateTime?                     @db.Timestamp(0)
  updated_at                  DateTime?                     @db.Timestamp(0)
  deleted_at                  DateTime?                     @db.Timestamp(0)
  is_available                Boolean                       @default(true)
  canteen_tenant              canteen_tenant                @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "canteen_menu_tenant_id_foreign")
  canteen_attachments         canteen_attachments[]
  canteen_transaction_details canteen_transaction_details[]
}

model canteen_school {
  id           BigInt    @id @default(autoincrement())
  school_id    Int
  canteen_id   BigInt
  is_active    Boolean   @default(true)
  type         String    @db.VarChar(255)
  performed_by BigInt
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  canteen      canteen   @relation(fields: [canteen_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "canteen_school_canteen_id_foreign")
  users        users     @relation(fields: [performed_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "canteen_school_performed_by_foreign")
  schools      schools   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "canteen_school_school_id_foreign")
}

model canteen_staff {
  id         BigInt    @id @default(autoincrement())
  canteen_id BigInt
  person_id  BigInt
  user_id    BigInt
  nip        String?   @db.VarChar(50)
  status     String?   @db.VarChar(255)
  active     Boolean   @default(true)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  canteen    canteen   @relation(fields: [canteen_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "canteen_staff_canteen_id_foreign")
  people     people    @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "canteen_staff_person_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "canteen_staff_user_id_foreign")
}

model canteen_tenant {
  id                   BigInt                 @id @default(autoincrement())
  owner_id             BigInt?
  location_id          BigInt?
  code                 String?                @db.VarChar(255)
  name                 String                 @db.VarChar(255)
  pic                  String                 @db.VarChar(255)
  address              String?
  handphone            String?                @db.VarChar(255)
  rating               Float                  @default(0)
  rate_count           Int                    @default(0)
  notes                String?
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  deleted_at           DateTime?              @db.Timestamp(0)
  canteen_id           BigInt
  require_pin          Int                    @default(1) @db.SmallInt
  school_id            Int?
  payment_method_type  Int                    @default(3) @db.SmallInt
  options              String?
  canteen_dataset      canteen_dataset?       @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "canteen_tenant_location_id_foreign")
  users                users?                 @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "canteen_tenant_owner_id_foreign")
  canteen_menu         canteen_menu[]
  canteen_tenant_staff canteen_tenant_staff[]
  canteen_transactions canteen_transactions[]
}

model canteen_tenant_staff {
  id             BigInt         @id @default(autoincrement())
  tenant_id      BigInt
  person_id      BigInt
  user_id        BigInt
  nip            String?        @db.VarChar(50)
  status         String?        @db.VarChar(255)
  active         Boolean        @default(true)
  created_at     DateTime?      @db.Timestamp(0)
  updated_at     DateTime?      @db.Timestamp(0)
  deleted_at     DateTime?      @db.Timestamp(0)
  type           Int            @default(2) @db.SmallInt
  people         people         @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "canteen_tenant_staff_person_id_foreign")
  canteen_tenant canteen_tenant @relation(fields: [tenant_id], references: [id], onUpdate: NoAction)
  users          users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "canteen_tenant_staff_user_id_foreign")
}

model canteen_transaction_details {
  id                   Int                  @id @default(autoincrement())
  school_id            Int
  transaction_id       BigInt
  menu_id              BigInt?
  payment_method       String?              @db.VarChar(255)
  title                String               @db.VarChar(255)
  description          String?              @db.VarChar(255)
  quantity             Int                  @default(1)
  unit_price           Float
  discount             Float?
  remaining            Float
  itemable_id          BigInt
  itemable_type        String               @db.VarChar(255)
  created_at           DateTime?            @db.Timestamp(0)
  updated_at           DateTime?            @db.Timestamp(0)
  canteen_menu         canteen_menu?        @relation(fields: [menu_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "canteen_transaction_details_menu_id_foreign")
  schools              schools              @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "canteen_transaction_details_school_id_foreign")
  canteen_transactions canteen_transactions @relation(fields: [transaction_id], references: [id], onUpdate: NoAction)
}

model canteen_transactions {
  id                                             BigInt                        @id @default(autoincrement())
  school_id                                      Int
  tenant_id                                      BigInt
  user_id                                        BigInt
  performed_by                                   BigInt?
  payment_method                                 String                        @db.VarChar(255)
  type                                           String                        @db.VarChar(255)
  status                                         String                        @db.VarChar(255)
  trx_date                                       DateTime                      @db.Timestamp(0)
  ref_number                                     String                        @db.VarChar(255)
  total_amount                                   Float
  notes                                          String?
  created_at                                     DateTime?                     @db.Timestamp(0)
  updated_at                                     DateTime?                     @db.Timestamp(0)
  deleted_at                                     DateTime?                     @db.Timestamp(0)
  finance_transaction_id                         BigInt?
  finance_transactions                           finance_transactions?         @relation(fields: [finance_transaction_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  users_canteen_transactions_performed_byTousers users?                        @relation("canteen_transactions_performed_byTousers", fields: [performed_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "canteen_transactions_performed_by_foreign")
  schools                                        schools                       @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "canteen_transactions_school_id_foreign")
  canteen_tenant                                 canteen_tenant                @relation(fields: [tenant_id], references: [id], onUpdate: NoAction)
  users_canteen_transactions_user_idTousers      users                         @relation("canteen_transactions_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "canteen_transactions_user_id_foreign")
  canteen_transaction_details                    canteen_transaction_details[]
}

model cashless_card {
  id                 BigInt    @id @default(autoincrement())
  school_id          Int
  user_id            BigInt
  sn_card            String?   @db.VarChar(64)
  qr_code            String?   @db.VarChar(64)
  limit_day          Int?      @default(0)
  limit_trx          Int?      @default(0)
  limit_accumulation Int?
  options            String?
  status             Boolean   @default(true)
  created_at         DateTime? @db.Timestamp(0)
  updated_at         DateTime? @db.Timestamp(0)
  deleted_at         DateTime? @db.Timestamp(0)
  revision           Int       @default(0) @db.SmallInt
  registered_number  String?   @db.VarChar(100)
  registered_at      DateTime? @db.Timestamp(0)
  approved_at        DateTime? @db.Timestamp(0)
  schools            schools   @relation(fields: [school_id], references: [id], onUpdate: NoAction, map: "cashless_card_school_id_foreign")
  users              users     @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "cashless_card_user_id_foreign")

  @@unique([school_id, user_id, revision], map: "cashless_card_school_id_user_id_revision")
  @@index([status, sn_card, qr_code, school_id], map: "cashless_card_status_sn_card_qr_code_school_id_index")
}

model cbt_attempt_question {
  attempt_id    BigInt
  question_id   BigInt
  answer        String
  score         Float?
  notes         String?
  created_at    DateTime?     @db.Timestamp(0)
  updated_at    DateTime?     @db.Timestamp(0)
  cbt_attempts  cbt_attempts  @relation(fields: [attempt_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cbt_attempt_question_attempt_id_foreign")
  cbt_questions cbt_questions @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cbt_attempt_question_question_id_foreign")

  @@unique([attempt_id, question_id], map: "cbt_attempt_question_attempt_id_question_id_unique")
}

model cbt_attempts {
  id                   BigInt                 @id @default(autoincrement())
  attempted_by         BigInt
  quiz_id              BigInt
  session_id           BigInt
  ip_address           String                 @db.VarChar(255)
  attempt_token        String                 @db.VarChar(255)
  started_at           DateTime?              @db.Timestamp(0)
  ended_at             DateTime?              @db.Timestamp(0)
  correct_answers      Int                    @default(0)
  total_score          Float                  @default(0)
  penalty              Int                    @default(0)
  school_id            Int?
  expired_at           DateTime?              @db.Timestamp(0)
  last_active          DateTime?              @db.Timestamp(0)
  reveal_score         Boolean                @default(true)
  users                users                  @relation(fields: [attempted_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cbt_attempts_attempted_by_foreign")
  cbt_quizzes          cbt_quizzes            @relation(fields: [quiz_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cbt_attempts_quiz_id_foreign")
  cbt_sessions         cbt_sessions           @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cbt_attempts_session_id_foreign")
  cbt_attempt_question cbt_attempt_question[]

  @@unique([attempted_by, quiz_id, session_id], map: "cbt_attempts_attempted_by_quiz_id_session_id")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model cbt_collaborators {
  quiz_id     BigInt
  user_id     BigInt
  cbt_quizzes cbt_quizzes @relation(fields: [quiz_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cbt_collaborators_quiz_id_foreign")

  @@ignore
}

model cbt_exam_participant {
  id        BigInt    @id @default(autoincrement())
  exam_id   BigInt
  user_id   BigInt
  room      String    @default("Ruang 1") @db.VarChar(255)
  options   String?
  order     String    @db.VarChar(255)
  school_id Int?
  cbt_exams cbt_exams @relation(fields: [exam_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cbt_exam_participant_exam_id_foreign")
  users     users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cbt_exam_participant_user_id_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model cbt_exam_quiz {
  quiz_id     BigInt
  exam_id     BigInt
  cbt_exams   cbt_exams   @relation(fields: [exam_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cbt_exam_quiz_exam_id_foreign")
  cbt_quizzes cbt_quizzes @relation(fields: [quiz_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cbt_exam_quiz_quiz_id_foreign")

  @@ignore
}

model cbt_exams {
  id                   BigInt                 @id @default(autoincrement())
  provider             String                 @default("local") @db.VarChar(255)
  code                 String                 @db.VarChar(255)
  name                 String                 @db.VarChar(255)
  days                 String                 @db.VarChar(255)
  description          String
  started_on           DateTime?              @db.Date
  ended_on             DateTime?              @db.Date
  is_active            Boolean                @default(false)
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  school_id            Int?
  cbt_exam_participant cbt_exam_participant[]
  cbt_exam_quiz        cbt_exam_quiz[]        @ignore
}

model cbt_provider_server {
  id            Int       @id @default(autoincrement())
  host          String    @db.VarChar(255)
  name          String    @db.VarChar(255)
  server_id     String?   @db.VarChar(255)
  server_key    String    @db.VarChar(255)
  server_secret String    @db.VarChar(255)
  description   String?
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  school_id     Int?
}

model cbt_question_answers {
  id                BigInt        @id @default(autoincrement())
  question_id       BigInt
  answer            String
  options           String?
  is_correct_answer Boolean       @default(false)
  created_at        DateTime?     @db.Timestamp(0)
  updated_at        DateTime?     @db.Timestamp(0)
  school_id         Int?
  cbt_questions     cbt_questions @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cbt_question_answers_question_id_foreign")
}

model cbt_questions {
  id                   BigInt                 @id @default(autoincrement())
  created_by           BigInt
  course_id            Int?
  basic_id             String?                @db.VarChar(255)
  level                String?                @default("general") @db.VarChar(255)
  type                 String                 @default("simple") @db.VarChar(255)
  topic                String?                @db.VarChar(255)
  question             String
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  deleted_at           DateTime?              @db.Timestamp(0)
  school_id            Int?
  academic_courses     academic_courses?      @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cbt_attempt_question cbt_attempt_question[]
  cbt_question_answers cbt_question_answers[]
  cbt_quiz_question    cbt_quiz_question[]    @ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model cbt_quiz_question {
  quiz_id       BigInt
  question_id   BigInt
  order         Int           @default(0)
  weight        Int           @default(0)
  score         Float         @default(0)
  penalty       Float         @default(0)
  section       Int           @default(0)
  school_id     Int?
  cbt_questions cbt_questions @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cbt_quizzes   cbt_quizzes   @relation(fields: [quiz_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cbt_quiz_question_quiz_id_foreign")

  @@ignore
}

model cbt_quiz_type {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String?
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  school_id   Int?
}

model cbt_quizzes {
  id                BigInt              @id @default(autoincrement())
  code              String              @db.VarChar(255)
  name              String              @db.VarChar(255)
  description       String
  owner_id          BigInt
  is_private        Boolean             @default(true)
  type_id           Int?
  class_id          Int?
  course_id         Int?
  published_at      DateTime?           @db.Timestamp(0)
  options           String?
  is_protected      Boolean             @default(false)
  created_at        DateTime?           @db.Timestamp(0)
  updated_at        DateTime?           @db.Timestamp(0)
  deleted_at        DateTime?           @db.Timestamp(0)
  school_id         Int?
  course            String?             @db.VarChar
  classes           String?             @db.VarChar
  users             users               @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  schools           schools?            @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cbt_attempts      cbt_attempts[]
  cbt_collaborators cbt_collaborators[] @ignore
  cbt_exam_quiz     cbt_exam_quiz[]     @ignore
  cbt_quiz_question cbt_quiz_question[] @ignore
  cbt_sessions      cbt_sessions[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model cbt_session_attendance {
  session_id   BigInt
  user_id      BigInt
  room         String?      @db.VarChar(255)
  school_id    Int?
  cbt_sessions cbt_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cbt_session_attendance_session_id_foreign")
  users        users        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cbt_session_attendance_user_id_foreign")

  @@ignore
}

model cbt_session_tokens {
  id           BigInt       @default(autoincrement())
  session_id   BigInt
  token        String       @db.VarChar(255)
  expired_at   DateTime     @db.Timestamp(0)
  created_at   DateTime?    @db.Timestamp(0)
  updated_at   DateTime?    @db.Timestamp(0)
  school_id    Int?
  schools      schools?     @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cbt_sessions cbt_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cbt_session_tokens_session_id_foreign")

  @@unique([session_id, token], map: "cbt_session_tokens_session_id_token")
}

model cbt_sessions {
  id                     BigInt                   @id @default(autoincrement())
  quiz_id                BigInt
  name                   String?                  @db.VarChar(255)
  scheduled_at           DateTime?                @db.Timestamp(0)
  room                   String?                  @db.VarChar(255)
  supervise_token        String?                  @db.VarChar(255)
  duration               Int?
  started_at             DateTime?                @db.Timestamp(0)
  ended_at               DateTime?                @db.Timestamp(0)
  options                String?
  created_at             DateTime?                @db.Timestamp(0)
  updated_at             DateTime?                @db.Timestamp(0)
  school_id              Int?
  reveal_score           Boolean                  @default(true)
  reveal_answer          Boolean                  @default(true)
  cbt_quizzes            cbt_quizzes              @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  cbt_attempts           cbt_attempts[]
  cbt_session_attendance cbt_session_attendance[] @ignore
  cbt_session_tokens     cbt_session_tokens[]
}

model cid_billing_customer {
  id                           Int                            @id @default(autoincrement())
  name                         String                         @db.VarChar(255)
  code                         String?                        @db.VarChar(50)
  description                  String?
  cid_billing_customer_product cid_billing_customer_product[]

  @@index([name], map: "cid_billing_customer_name_index")
}

model cid_billing_customer_product {
  id                   Int                   @id @default(autoincrement())
  customer_id          Int?
  product_id           Int?
  cid_billing_customer cid_billing_customer? @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cid_billing_customer_product_customer_id_foreign")
  cid_billing_product  cid_billing_product?  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cid_billing_customer_product_product_id_foreign")
}

model cid_billing_product {
  id                           Int                            @id @default(autoincrement())
  name                         String                         @db.VarChar(255)
  code                         String?                        @db.VarChar(50)
  description                  String?
  cid_billing_customer_product cid_billing_customer_product[]

  @@index([name], map: "cid_billing_product_name_index")
}

model cid_billing_subscription {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  code        String? @db.VarChar(50)
  description String?

  @@index([name], map: "cid_billing_subscription_name_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model classifiables {
  classification_id BigInt
  classifiable_id   BigInt
  classifiable_type String          @db.VarChar(255)
  classifications   classifications @relation(fields: [classification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "classifiables_classification_id_foreign")

  @@index([classifiable_id], map: "classifiable_type")
  @@ignore
}

model classifications {
  id                                                                                          BigInt                            @id @default(autoincrement())
  school_id                                                                                   Int?
  order                                                                                       Int                               @default(0)
  parent                                                                                      Int?
  depth                                                                                       Int                               @default(0)
  right                                                                                       Int                               @default(0)
  left                                                                                        Int                               @default(1)
  code                                                                                        String?                           @db.VarChar(255)
  name                                                                                        String                            @db.VarChar(255)
  slug                                                                                        String                            @db.VarChar(255)
  description                                                                                 String?                           @db.VarChar(255)
  image                                                                                       String?                           @db.VarChar(255)
  type                                                                                        String                            @default("category") @db.VarChar(255)
  created_at                                                                                  DateTime?                         @db.Timestamp(0)
  updated_at                                                                                  DateTime?                         @db.Timestamp(0)
  deleted_at                                                                                  DateTime?                         @db.Timestamp(0)
  schools                                                                                     schools?                          @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "classifications_school_id_foreign")
  academic_courses                                                                            academic_courses[]
  academic_curriculum_programs_academic_curriculum_programs_course_groups_idToclassifications academic_curriculum_programs[]    @relation("academic_curriculum_programs_course_groups_idToclassifications")
  academic_curriculum_programs_academic_curriculum_programs_course_master_idToclassifications academic_curriculum_programs[]    @relation("academic_curriculum_programs_course_master_idToclassifications")
  classifiables                                                                               classifiables[]                   @ignore
  cms_article_category                                                                        cms_article_category[]            @ignore
  cms_category_lang                                                                           cms_category_lang[]
  finance_account_payables                                                                    finance_account_payables[]
  finance_account_receivable_tags                                                             finance_account_receivable_tags[]
  finance_account_receivables                                                                 finance_account_receivables[]
  finance_chart_of_accounts                                                                   finance_chart_of_accounts[]
  posts_category                                                                              posts_category[]                  @ignore

  @@index([code], map: "classifications_code_index")
  @@index([order, parent, depth, right, left], map: "classifications_order_parent_depth_right_left_index")
  @@index([slug], map: "classifications_slug_index")
  @@index([type], map: "classifications_type_index")
}

model clinic_medical_record {
  id                                              Int       @id @default(autoincrement())
  school_id                                       Int
  user_id                                         BigInt
  performed_by                                    BigInt
  datetime                                        DateTime  @db.Timestamp(0)
  diagnosis                                       String    @db.VarChar(255)
  action                                          String    @db.VarChar(255)
  notes                                           String?
  created_at                                      DateTime? @db.Timestamp(0)
  updated_at                                      DateTime? @db.Timestamp(0)
  users_clinic_medical_record_performed_byTousers users     @relation("clinic_medical_record_performed_byTousers", fields: [performed_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "clinic_medical_record_performed_by_foreign")
  schools                                         schools   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "clinic_medical_record_school_id_foreign")
  users_clinic_medical_record_user_idTousers      users     @relation("clinic_medical_record_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "clinic_medical_record_user_id_foreign")
}

model cms_article {
  id                   BigInt                 @id @default(autoincrement())
  author_id            BigInt
  type                 String                 @default("article") @db.VarChar(255)
  name                 String                 @db.VarChar(255)
  has_url              Boolean                @default(true)
  options              String?                @db.VarChar(255)
  publish_on           DateTime?              @db.Timestamp(0)
  publish_off          DateTime?              @db.Timestamp(0)
  deleted_at           DateTime?              @db.Timestamp(0)
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  school_id            Int?
  online               Boolean?               @default(true)
  users                users                  @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cms_article_author_id_foreign")
  schools              schools?               @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cms_article_category cms_article_category[] @ignore
  cms_article_lang     cms_article_lang[]
  cms_article_medias   cms_article_medias[]
  cms_page_article     cms_page_article[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model cms_article_category {
  article_id      BigInt
  category_id     BigInt
  school_id       Int?
  cms_article     cms_article     @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cms_article_category_article_id_foreign")
  classifications classifications @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cms_article_category_category_id_foreign")
  schools         schools?        @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@ignore
}

model cms_article_lang {
  id               BigInt      @id @default(autoincrement())
  article_id       BigInt
  lang             String      @db.VarChar(20)
  title            String      @db.VarChar(255)
  slug             String      @db.VarChar(255)
  subtitle         String?     @db.VarChar(255)
  content          String
  meta_title       String?     @db.VarChar(255)
  meta_description String?     @db.VarChar(255)
  meta_keywords    String?     @db.VarChar(255)
  online           Boolean     @default(true)
  options          String?     @db.VarChar(255)
  created_at       DateTime?   @db.Timestamp(0)
  updated_at       DateTime?   @db.Timestamp(0)
  school_id        Int?
  cms_article      cms_article @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cms_article_lang_article_id_foreign")
  schools          schools?    @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model cms_article_medias {
  id          BigInt      @id @default(autoincrement())
  article_id  BigInt
  lang        String      @db.VarChar(20)
  order       Int         @default(0) @db.SmallInt
  type        String      @db.VarChar(255)
  position    String      @db.VarChar(255)
  text        String?     @db.VarChar(255)
  sub_text    String?     @db.VarChar(255)
  path        String
  created_at  DateTime?   @db.Timestamp(0)
  updated_at  DateTime?   @db.Timestamp(0)
  school_id   Int?
  cms_article cms_article @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cms_article_medias_article_id_foreign")
  schools     schools?    @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model cms_category_lang {
  id              BigInt          @id @default(autoincrement())
  category_id     BigInt
  lang            String          @db.VarChar(20)
  title           String          @db.VarChar(255)
  slug            String          @db.VarChar(255)
  subtitle        String?         @db.VarChar(255)
  options         String?         @db.VarChar(255)
  publish_on      DateTime        @db.Timestamp(0)
  publish_off     DateTime        @db.Timestamp(0)
  created_at      DateTime?       @db.Timestamp(0)
  updated_at      DateTime?       @db.Timestamp(0)
  school_id       Int?
  classifications classifications @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cms_category_lang_category_id_foreign")
  schools         schools?        @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model cms_fields {
  id          BigInt    @id @default(autoincrement())
  title       String    @db.VarChar(255)
  name        String    @db.VarChar(255)
  label       String?   @db.VarChar(255)
  type        String    @db.VarChar(255)
  note        String?   @db.VarChar(255)
  description String?   @db.VarChar(255)
  options     String?   @db.VarChar(255)
  deleted_at  DateTime? @db.Timestamp(0)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  school_id   Int?
  schools     schools?  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model cms_fields_content {
  fields_id  BigInt
  item_id    BigInt
  content    String
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  school_id  Int?
  schools    schools?  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@ignore
}

model cms_menu {
  id            BigInt          @id @default(autoincrement())
  module        String          @default("admission") @db.VarChar(255)
  name          String          @db.VarChar(255)
  ordering      String?         @db.VarChar(255)
  options       String?
  deleted_at    DateTime?       @db.Timestamp(0)
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  school_id     Int?
  schools       schools?        @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cms_menu_lang cms_menu_lang[]
  cms_page      cms_page[]
}

model cms_menu_lang {
  id         BigInt    @id @default(autoincrement())
  menu_id    BigInt
  lang       String    @db.VarChar(20)
  title      String    @db.VarChar(255)
  subtitle   String    @db.VarChar(255)
  options    String?   @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  school_id  Int?
  cms_menu   cms_menu  @relation(fields: [menu_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cms_menu_lang_menu_id_foreign")
  schools    schools?  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model cms_page {
  id               BigInt             @id @default(autoincrement())
  menu_id          BigInt
  author_id        BigInt
  order            Int                @default(0)
  parent           Int?
  depth            Int                @default(0)
  right            Int                @default(0)
  left             Int                @default(1)
  name             String             @db.VarChar(255)
  link_type        String?            @db.VarChar(255)
  link             String?            @db.VarChar(255)
  has_url          Boolean            @default(true)
  online           Boolean            @default(true)
  options          String?            @db.VarChar(255)
  publish_on       DateTime?          @db.Timestamp(0)
  publish_off      DateTime?          @db.Timestamp(0)
  deleted_at       DateTime?          @db.Timestamp(0)
  created_at       DateTime?          @db.Timestamp(0)
  updated_at       DateTime?          @db.Timestamp(0)
  school_id        Int?
  users            users              @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cms_page_author_id_foreign")
  cms_menu         cms_menu           @relation(fields: [menu_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cms_page_menu_id_foreign")
  schools          schools?           @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cms_page_article cms_page_article[]
  cms_page_lang    cms_page_lang[]
  cms_page_medias  cms_page_medias[]
}

model cms_page_article {
  id          BigInt      @id @default(autoincrement())
  page_id     BigInt
  article_id  BigInt
  ordering    String?     @db.VarChar(255)
  online      Boolean     @default(true)
  created_at  DateTime?   @db.Timestamp(0)
  updated_at  DateTime?   @db.Timestamp(0)
  school_id   Int?
  cms_article cms_article @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cms_page_article_article_id_foreign")
  cms_page    cms_page    @relation(fields: [page_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cms_page_article_page_id_foreign")
}

model cms_page_lang {
  id               BigInt    @id @default(autoincrement())
  page_id          BigInt
  lang             String    @db.VarChar(20)
  title            String    @db.VarChar(255)
  subtitle         String    @db.VarChar(255)
  slug             String    @db.VarChar(255)
  meta_title       String?   @db.VarChar(255)
  meta_description String?   @db.VarChar(255)
  meta_keywords    String?   @db.VarChar(255)
  online           Boolean   @default(true)
  options          String?   @db.VarChar(255)
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  school_id        Int?
  cms_page         cms_page  @relation(fields: [page_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cms_page_lang_page_id_foreign")
  schools          schools?  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model cms_page_medias {
  id         BigInt    @id @default(autoincrement())
  page_id    BigInt
  lang       String    @db.VarChar(20)
  order      Int       @default(0) @db.SmallInt
  type       String    @db.VarChar(255)
  position   String    @db.VarChar(255)
  text       String?   @db.VarChar(255)
  sub_text   String?   @db.VarChar(255)
  path       String
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  school_id  Int?
  cms_page   cms_page  @relation(fields: [page_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cms_page_medias_page_id_foreign")
  schools    schools?  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model cms_tags {
  id         BigInt    @id @default(autoincrement())
  title      String    @db.VarChar(255)
  slug       String    @db.VarChar(255)
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  school_id  Int?
  schools    schools?  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model configurations {
  id         Int       @id @default(autoincrement())
  key        String    @db.VarChar(255)
  value      String?
  type       String    @default("string") @db.VarChar(255)
  autoload   Boolean   @default(false)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  school_id  Int?
  schools    schools?  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([autoload], map: "configurations_autoload_index")
  @@index([key], map: "configurations_key_index")
  @@index([type], map: "configurations_type_index")
}

model conversations {
  id         Int       @id @default(autoincrement())
  user_one   Int
  user_two   Int
  status     Boolean
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model counseling_attachment {
  school_id       Int?
  attachment_id   BigInt
  attachable_id   BigInt
  attachable_type String @db.VarChar(255)

  @@ignore
}

model counseling_case_followup_to {
  id                      BigInt                  @id @default(autoincrement())
  school_id               Int
  case_record_id          BigInt
  date                    DateTime                @db.Timestamp(0)
  follow_up_to            String                  @db.VarChar(255)
  officer                 String?                 @db.VarChar(255)
  notes                   String?
  counseling_case_records counseling_case_records @relation(fields: [case_record_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "counseling_case_followup_to_case_record_id_foreign")
}

model counseling_case_offenders {
  id                      BigInt                  @id @default(autoincrement())
  school_id               Int?
  student_id              BigInt
  case_record_id          BigInt
  counseling_case_records counseling_case_records @relation(fields: [case_record_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "counseling_case_offenders_case_record_id_foreign")
  academic_students       academic_students       @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "counseling_case_offenders_student_id_foreign")
}

model counseling_case_records {
  id                          BigInt                        @id @default(autoincrement())
  school_id                   Int
  incident_date               DateTime                      @db.Timestamp(0)
  scope                       String?                       @db.VarChar(255)
  chronology_of_event         String
  notes                       String?
  status                      String                        @default("open") @db.VarChar(255)
  counselor_id                BigInt?
  created_at                  DateTime?                     @db.Timestamp(0)
  updated_at                  DateTime?                     @db.Timestamp(0)
  period_id                   Int?
  users                       users?                        @relation(fields: [counselor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "counseling_case_records_counselor_id_foreign")
  counseling_case_followup_to counseling_case_followup_to[]
  counseling_case_offenders   counseling_case_offenders[]
}

model counseling_consultation_records {
  id                               BigInt                             @id @default(autoincrement())
  school_id                        Int
  incident_date                    DateTime                           @db.Timestamp(0)
  scope                            String?                            @db.VarChar(255)
  issues                           String
  solution                         String?
  follow_up_to                     String                             @db.VarChar(255)
  notes                            String?
  status                           String                             @default("open") @db.VarChar(255)
  counselor_id                     BigInt
  created_at                       DateTime?                          @db.Timestamp(0)
  updated_at                       DateTime?                          @db.Timestamp(0)
  users                            users                              @relation(fields: [counselor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "counseling_consultation_records_counselor_id_foreign")
  counseling_consultation_students counseling_consultation_students[]
}

model counseling_consultation_students {
  id                              BigInt                          @id @default(autoincrement())
  school_id                       Int?
  student_id                      BigInt
  consultation_id                 BigInt
  counseling_consultation_records counseling_consultation_records @relation(fields: [consultation_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "counseling_consultation_students_consultation_id_foreign")
  academic_students               academic_students               @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "counseling_consultation_students_student_id_foreign")
}

model eoffice_disposition {
  id                         BigInt                       @id @default(autoincrement())
  organization_id            BigInt?
  school_id                  Int?
  document_id                BigInt
  level                      Int?
  sender                     String                       @db.VarChar(255)
  title                      String                       @db.VarChar(255)
  message                    String
  instruction                String                       @db.VarChar(255)
  priority                   String                       @default("biasa") @db.VarChar(255)
  classification             String                       @default("biasa") @db.VarChar(255)
  created_at                 DateTime?                    @db.Timestamp(0)
  updated_at                 DateTime?                    @db.Timestamp(0)
  eoffice_documents          eoffice_documents            @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eoffice_disposition_document_id_foreign")
  organizations              organizations?               @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eoffice_disposition_organization_id_foreign")
  schools                    schools?                     @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eoffice_disposition_school_id_foreign")
  eoffice_disposition_action eoffice_disposition_action[]
}

model eoffice_disposition_action {
  id                  BigInt              @id @default(autoincrement())
  organization_id     BigInt?
  school_id           Int?
  disposition_id      BigInt
  complete_at         DateTime?           @db.Timestamp(0)
  created_at          DateTime?           @db.Timestamp(0)
  updated_at          DateTime?           @db.Timestamp(0)
  eoffice_disposition eoffice_disposition @relation(fields: [disposition_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eoffice_disposition_action_disposition_id_foreign")
  organizations       organizations?      @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eoffice_disposition_action_organization_id_foreign")
  schools             schools?            @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eoffice_disposition_action_school_id_foreign")
}

model eoffice_document_files {
  attachable_id   BigInt
  attachable_type String @db.VarChar(255)
  path            String @db.VarChar(255)
  id              BigInt @id @default(autoincrement())
}

model eoffice_document_participants {
  id                BigInt            @id @default(autoincrement())
  school_id         Int?
  document_id       BigInt
  participant_id    BigInt
  type              String?           @db.VarChar(255)
  read_at           DateTime?         @db.Timestamp(0)
  created_at        DateTime?         @db.Timestamp(0)
  updated_at        DateTime?         @db.Timestamp(0)
  eoffice_documents eoffice_documents @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eoffice_document_participants_document_id_foreign")
  users             users             @relation(fields: [participant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eoffice_document_participants_participant_id_foreign")
  schools           schools?          @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eoffice_document_participants_school_id_foreign")
}

model eoffice_documents {
  id                            BigInt                          @id @default(autoincrement())
  organization_id               BigInt?
  school_id                     Int?
  type_document                 String                          @default("incoming") @db.VarChar(255)
  priority                      String                          @default("biasa") @db.VarChar(255)
  classification                String                          @default("biasa") @db.VarChar(255)
  type                          String?                         @db.VarChar(255)
  sender_organization_type      String?                         @db.VarChar(255)
  sender_organization_name      String?                         @db.VarChar(255)
  sender_organization_address   String?                         @db.VarChar(255)
  sender_name                   String?                         @db.VarChar(255)
  sender_position               String?                         @db.VarChar(255)
  received_at                   DateTime?                       @db.Timestamp(0)
  date_at                       DateTime?                       @db.Timestamp(0)
  creation_at                   DateTime?                       @db.Timestamp(0)
  nomor_surat                   String?                         @db.VarChar(255)
  outgoing_agenda               String?                         @db.VarChar(255)
  recipient                     String?                         @db.VarChar(255)
  subject                       String?                         @db.VarChar(255)
  comments                      String?
  body                          String?
  status                        String                          @default("open") @db.VarChar(255)
  created_at                    DateTime?                       @db.Timestamp(0)
  updated_at                    DateTime?                       @db.Timestamp(0)
  organizations                 organizations?                  @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eoffice_documents_organization_id_foreign")
  schools                       schools?                        @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eoffice_documents_school_id_foreign")
  eoffice_disposition           eoffice_disposition[]
  eoffice_document_participants eoffice_document_participants[]
}

model eoffice_documents_action {
  id              BigInt         @id @default(autoincrement())
  organization_id BigInt?
  school_id       Int?
  code            String         @db.VarChar(255)
  name            String         @db.VarChar(255)
  description     String?
  is_active       Boolean        @default(true)
  created_at      DateTime?      @db.Timestamp(0)
  updated_at      DateTime?      @db.Timestamp(0)
  organizations   organizations? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eoffice_documents_action_organization_id_foreign")
  schools         schools?       @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eoffice_documents_action_school_id_foreign")
}

model eoffice_documents_categories {
  id              BigInt         @id @default(autoincrement())
  organization_id BigInt?
  school_id       Int?
  code            String         @db.VarChar(255)
  name            String         @db.VarChar(255)
  description     String
  is_active       Boolean        @default(true)
  created_at      DateTime?      @db.Timestamp(0)
  updated_at      DateTime?      @db.Timestamp(0)
  organizations   organizations? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eoffice_documents_categories_organization_id_foreign")
  schools         schools?       @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eoffice_documents_categories_school_id_foreign")
}

model eoffice_events {
  id          BigInt    @id @default(autoincrement())
  school_id   Int?
  title       String    @db.VarChar(255)
  description String
  start_date  DateTime  @db.Timestamp(0)
  end_date    DateTime  @db.Timestamp(0)
  created_by  BigInt
  status      String    @db.VarChar(255)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  users       users     @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eoffice_events_created_by_foreign")
  schools     schools?  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eoffice_events_school_id_foreign")
}

model eoffice_meetings_notes {
  id              BigInt         @id @default(autoincrement())
  organization_id BigInt?
  school_id       Int?
  date_at         DateTime?      @db.Timestamp(0)
  place           String?        @db.VarChar(255)
  agenda          String?        @db.VarChar(255)
  subject         String?
  problem         String?
  solution        String?
  description     String?
  participant     String?
  created_at      DateTime?      @db.Timestamp(0)
  updated_at      DateTime?      @db.Timestamp(0)
  organizations   organizations? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eoffice_meetings_notes_organization_id_foreign")
  schools         schools?       @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "eoffice_meetings_notes_school_id_foreign")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement())
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model finance_account_payables {
  id                                                                                            Int                       @id @default(autoincrement())
  school_id                                                                                     Int
  category_id                                                                                   BigInt?
  code                                                                                          String                    @db.VarChar(255)
  name                                                                                          String                    @db.VarChar(255)
  description                                                                                   String                    @db.VarChar(255)
  cash_account                                                                                  Int
  expense_account                                                                               Int
  is_published                                                                                  Boolean                   @default(true)
  created_at                                                                                    DateTime?                 @db.Timestamp(0)
  updated_at                                                                                    DateTime?                 @db.Timestamp(0)
  deleted_at                                                                                    DateTime?                 @db.Timestamp(0)
  finance_chart_of_accounts_finance_account_payables_cash_accountTofinance_chart_of_accounts    finance_chart_of_accounts @relation("finance_account_payables_cash_accountTofinance_chart_of_accounts", fields: [cash_account], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_account_payables_cash_account_foreign")
  classifications                                                                               classifications?          @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_account_payables_category_id_foreign")
  finance_chart_of_accounts_finance_account_payables_expense_accountTofinance_chart_of_accounts finance_chart_of_accounts @relation("finance_account_payables_expense_accountTofinance_chart_of_accounts", fields: [expense_account], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_account_payables_expense_account_foreign")
  schools                                                                                       schools                   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_account_payables_school_id_foreign")
}

model finance_account_receivable_tags {
  id                          Int                         @id @default(autoincrement())
  tag_id                      BigInt
  ar_id                       Int
  finance_account_receivables finance_account_receivables @relation(fields: [ar_id], references: [id], onUpdate: NoAction)
  classifications             classifications             @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_account_receivable_tags_tag_id_foreign")
}

model finance_account_receivables {
  id                                                                                                        Int                               @id @default(autoincrement())
  school_id                                                                                                 Int
  category_id                                                                                               BigInt?
  name                                                                                                      String                            @db.VarChar(255)
  code                                                                                                      String?                           @db.VarChar(255)
  description                                                                                               String?                           @db.VarChar(255)
  parent_account                                                                                            Int?
  cash_account                                                                                              Int?
  revenue_account                                                                                           Int
  credit_account                                                                                            Int
  revenue_discount_account                                                                                  Int?
  discount_account                                                                                          Int?
  is_published                                                                                              Boolean                           @default(true)
  created_at                                                                                                DateTime?                         @db.Timestamp(0)
  updated_at                                                                                                DateTime?                         @db.Timestamp(0)
  deleted_at                                                                                                DateTime?                         @db.Timestamp(0)
  group_id                                                                                                  BigInt?
  pdd_account                                                                                               Int?
  created_by                                                                                                BigInt?
  deleted_by                                                                                                BigInt?
  finance_chart_of_accounts_finance_account_receivables_cash_accountTofinance_chart_of_accounts             finance_chart_of_accounts?        @relation("finance_account_receivables_cash_accountTofinance_chart_of_accounts", fields: [cash_account], references: [id], onDelete: Restrict, onUpdate: NoAction)
  classifications                                                                                           classifications?                  @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  finance_chart_of_accounts_finance_account_receivables_credit_accountTofinance_chart_of_accounts           finance_chart_of_accounts         @relation("finance_account_receivables_credit_accountTofinance_chart_of_accounts", fields: [credit_account], references: [id], onUpdate: NoAction)
  finance_chart_of_accounts_finance_account_receivables_discount_accountTofinance_chart_of_accounts         finance_chart_of_accounts?        @relation("finance_account_receivables_discount_accountTofinance_chart_of_accounts", fields: [discount_account], references: [id], onDelete: Restrict, onUpdate: NoAction)
  finance_dataset                                                                                           finance_dataset?                  @relation(fields: [group_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  finance_chart_of_accounts_finance_account_receivables_parent_accountTofinance_chart_of_accounts           finance_chart_of_accounts?        @relation("finance_account_receivables_parent_accountTofinance_chart_of_accounts", fields: [parent_account], references: [id], onDelete: Restrict, onUpdate: NoAction)
  finance_chart_of_accounts_finance_account_receivables_pdd_accountTofinance_chart_of_accounts              finance_chart_of_accounts?        @relation("finance_account_receivables_pdd_accountTofinance_chart_of_accounts", fields: [pdd_account], references: [id], onDelete: Restrict, onUpdate: NoAction)
  finance_chart_of_accounts_finance_account_receivables_revenue_accountTofinance_chart_of_accounts          finance_chart_of_accounts         @relation("finance_account_receivables_revenue_accountTofinance_chart_of_accounts", fields: [revenue_account], references: [id], onUpdate: NoAction)
  finance_chart_of_accounts_finance_account_receivables_revenue_discount_accountTofinance_chart_of_accounts finance_chart_of_accounts?        @relation("finance_account_receivables_revenue_discount_accountTofinance_chart_of_accounts", fields: [revenue_discount_account], references: [id], onDelete: Restrict, onUpdate: NoAction)
  schools                                                                                                   schools                           @relation(fields: [school_id], references: [id], onUpdate: NoAction)
  admission_progress_receivables                                                                            admission_progress_receivables[]  @ignore
  finance_account_receivable_tags                                                                           finance_account_receivable_tags[]
  finance_discount_receivables                                                                              finance_discount_receivables[]    @ignore
  finance_summary_monthly_revenue                                                                           finance_summary_monthly_revenue[]
}

model finance_bank_accounts {
  id                    BigInt                  @id @default(autoincrement())
  user_id               BigInt
  bank_tax_id           Int
  account_owner         String                  @db.VarChar(255)
  account_number        String                  @db.VarChar(30)
  bank_branch           String?                 @db.VarChar(255)
  deleted_at            DateTime?               @db.Timestamp(0)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  school_id             Int?
  banks                 banks                   @relation(fields: [bank_tax_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  schools               schools?                @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                 users                   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_bank_accounts_user_id_foreign")
  finance_bank_payments finance_bank_payments[]
}

model finance_bank_payments {
  id                                                                          BigInt                           @id @default(autoincrement())
  bank_id                                                                     BigInt
  bank_tax_id                                                                 Int?
  user_id                                                                     BigInt
  perform_by                                                                  BigInt?
  pay_in_id                                                                   BigInt?
  type                                                                        String                           @default("pascabayar") @db.VarChar(255)
  payment_code                                                                String?                          @db.VarChar(255)
  account_owner                                                               String?                          @db.VarChar(255)
  account_number                                                              String?                          @db.VarChar(30)
  transfer_amount                                                             BigInt                           @default(0)
  transfer_date                                                               DateTime?                        @db.Date
  proof_image                                                                 String?
  status                                                                      String                           @default("pending") @db.VarChar(255)
  rejected_note                                                               String?
  deleted_at                                                                  DateTime?                        @db.Timestamp(0)
  created_at                                                                  DateTime?                        @db.Timestamp(0)
  updated_at                                                                  DateTime?                        @db.Timestamp(0)
  school_id                                                                   Int?
  deposit_id                                                                  BigInt?
  finance_bank_accounts                                                       finance_bank_accounts            @relation(fields: [bank_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_bank_payments_bank_id_foreign")
  banks                                                                       banks?                           @relation(fields: [bank_tax_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  finance_transactions_finance_bank_payments_deposit_idTofinance_transactions finance_transactions?            @relation("finance_bank_payments_deposit_idTofinance_transactions", fields: [deposit_id], references: [id], onUpdate: NoAction)
  finance_transactions_finance_bank_payments_pay_in_idTofinance_transactions  finance_transactions?            @relation("finance_bank_payments_pay_in_idTofinance_transactions", fields: [pay_in_id], references: [id], onUpdate: NoAction)
  users_finance_bank_payments_perform_byTousers                               users?                           @relation("finance_bank_payments_perform_byTousers", fields: [perform_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schools                                                                     schools?                         @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "finance_bank_payments_school_id_b_fkey")
  users_finance_bank_payments_user_idTousers                                  users                            @relation("finance_bank_payments_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_bank_payments_user_id_foreign")
  finance_transaction_payment                                                 finance_transaction_payment[]
  finance_transactions_tokopedia                                              finance_transactions_tokopedia[]
}

model finance_chart_of_account_balances {
  id                        Int                       @id @default(autoincrement())
  account_id                Int
  last_balance              Float
  monthly_balance           Float
  last_archive_balance      Float
  created_at                DateTime?                 @db.Timestamp(0)
  updated_at                DateTime?                 @db.Timestamp(0)
  school_id                 Int
  year                      Int                       @db.SmallInt
  month                     Int                       @db.SmallInt
  finance_chart_of_accounts finance_chart_of_accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_chart_of_account_balances_account_id_foreign")
  schools                   schools                   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model finance_chart_of_accounts {
  id                                                                                                          Int                                 @id @default(autoincrement())
  school_id                                                                                                   Int?
  name                                                                                                        String                              @db.VarChar(255)
  code                                                                                                        String                              @db.VarChar(255)
  description                                                                                                 String?                             @db.VarChar(255)
  starting_balance                                                                                            Float                               @default(0)
  order                                                                                                       Int                                 @default(0)
  parent                                                                                                      Int?
  left                                                                                                        Int                                 @default(0)
  right                                                                                                       Int                                 @default(0)
  depth                                                                                                       Int                                 @default(0)
  is_published                                                                                                Boolean                             @default(true)
  category_id                                                                                                 BigInt
  deleted_at                                                                                                  DateTime?                           @db.Timestamp(0)
  organization_id                                                                                             BigInt?
  created_at                                                                                                  DateTime?                           @db.Timestamp(6)
  updated_at                                                                                                  DateTime?                           @db.Timestamp(6)
  created_by                                                                                                  BigInt?
  updated_by                                                                                                  BigInt?
  deleted_by                                                                                                  BigInt?
  classifications                                                                                             classifications                     @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  users_finance_chart_of_accounts_created_byTousers                                                           users?                              @relation("finance_chart_of_accounts_created_byTousers", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: NoAction)
  users_finance_chart_of_accounts_deleted_byTousers                                                           users?                              @relation("finance_chart_of_accounts_deleted_byTousers", fields: [deleted_by], references: [id], onDelete: Restrict, onUpdate: NoAction)
  organizations                                                                                               organizations?                      @relation(fields: [organization_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  schools                                                                                                     schools?                            @relation(fields: [school_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  finance_account_payables_finance_account_payables_cash_accountTofinance_chart_of_accounts                   finance_account_payables[]          @relation("finance_account_payables_cash_accountTofinance_chart_of_accounts")
  finance_account_payables_finance_account_payables_expense_accountTofinance_chart_of_accounts                finance_account_payables[]          @relation("finance_account_payables_expense_accountTofinance_chart_of_accounts")
  finance_account_receivables_finance_account_receivables_cash_accountTofinance_chart_of_accounts             finance_account_receivables[]       @relation("finance_account_receivables_cash_accountTofinance_chart_of_accounts")
  finance_account_receivables_finance_account_receivables_credit_accountTofinance_chart_of_accounts           finance_account_receivables[]       @relation("finance_account_receivables_credit_accountTofinance_chart_of_accounts")
  finance_account_receivables_finance_account_receivables_discount_accountTofinance_chart_of_accounts         finance_account_receivables[]       @relation("finance_account_receivables_discount_accountTofinance_chart_of_accounts")
  finance_account_receivables_finance_account_receivables_parent_accountTofinance_chart_of_accounts           finance_account_receivables[]       @relation("finance_account_receivables_parent_accountTofinance_chart_of_accounts")
  finance_account_receivables_finance_account_receivables_pdd_accountTofinance_chart_of_accounts              finance_account_receivables[]       @relation("finance_account_receivables_pdd_accountTofinance_chart_of_accounts")
  finance_account_receivables_finance_account_receivables_revenue_accountTofinance_chart_of_accounts          finance_account_receivables[]       @relation("finance_account_receivables_revenue_accountTofinance_chart_of_accounts")
  finance_account_receivables_finance_account_receivables_revenue_discount_accountTofinance_chart_of_accounts finance_account_receivables[]       @relation("finance_account_receivables_revenue_discount_accountTofinance_chart_of_accounts")
  finance_chart_of_account_balances                                                                           finance_chart_of_account_balances[]
  finance_general_ledger                                                                                      finance_general_ledger[]
  finance_general_ledger_detail                                                                               finance_general_ledger_detail[]
  finance_journal_entries_detail                                                                              finance_journal_entries_detail[]
  finance_rapbs                                                                                               finance_rapbs[]
  finance_rapbs_activities                                                                                    finance_rapbs_activities[]
  finance_rapbs_details                                                                                       finance_rapbs_details[]
  finance_summary_receivable                                                                                  finance_summary_receivable[]
  finance_transactions_finance_chart_of_accountsTofinance_transactions_cash_account_id                        finance_transactions[]              @relation("finance_chart_of_accountsTofinance_transactions_cash_account_id")
  finance_transactions_finance_chart_of_accountsTofinance_transactions_source_account_id                      finance_transactions[]              @relation("finance_chart_of_accountsTofinance_transactions_source_account_id")

  @@unique([school_id, code], map: "finance_chart_of_accounts_school_id_code")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model finance_cost_classes {
  cost_id          BigInt
  class_id         Int
  academic_classes academic_classes @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_cost_classes_class_id_foreign")
  finance_costs    finance_costs    @relation(fields: [cost_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_cost_classes_cost_id_foreign")

  @@ignore
}

model finance_cost_metadatas {
  id            Int           @id @default(autoincrement())
  cost_id       BigInt
  key           String        @db.VarChar(255)
  value         String
  finance_costs finance_costs @relation(fields: [cost_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_cost_metadatas_cost_id_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model finance_cost_specialization {
  cost_id           BigInt
  specialization_id Int
  finance_costs     finance_costs    @relation(fields: [cost_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_cost_specialization_cost_id_foreign")
  academic_dataset  academic_dataset @relation(fields: [specialization_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_cost_specialization_specialization_id_foreign")

  @@ignore
}

model finance_costs {
  id                                                            BigInt                        @id @default(autoincrement())
  school_id                                                     Int
  period_id                                                     Int
  typephase_id                                                  Int?
  line_id                                                       Int?
  program_id                                                    Int?
  gender_id                                                     Int?
  payment_method                                                String                        @default("once") @db.VarChar(255)
  amount                                                        Float
  description                                                   String?
  is_boarding                                                   Boolean?                      @default(false)
  is_mutation                                                   Boolean?                      @default(false)
  is_next_year                                                  Boolean                       @default(false)
  year_in                                                       Int?                          @db.SmallInt
  is_trial                                                      Boolean?                      @default(false)
  trial_count                                                   Int?                          @db.SmallInt
  trial_long_term_value                                         Int?                          @db.SmallInt
  trial_long_term_type                                          String?                       @db.VarChar(255)
  trial_dp_amount                                               Float?
  trial_dp_is_percentable                                       Boolean                       @default(false)
  accountentry_id                                               Int
  accountentry_type                                             String                        @db.VarChar(255)
  is_active                                                     Boolean                       @default(true)
  created_at                                                    DateTime?                     @db.Timestamp(0)
  updated_at                                                    DateTime?                     @db.Timestamp(0)
  deleted_at                                                    DateTime?                     @db.Timestamp(0)
  group_id                                                      BigInt?
  phase_id                                                      Int?
  finance_dataset                                               finance_dataset?              @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_costs_group_id_foreign")
  academic_dataset_academic_datasetTofinance_costs_line_id      academic_dataset?             @relation("academic_datasetTofinance_costs_line_id", fields: [line_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_costs_line_id_foreign")
  academic_period                                               academic_period               @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_costs_period_id_foreign")
  academic_dataset_academic_datasetTofinance_costs_program_id   academic_dataset?             @relation("academic_datasetTofinance_costs_program_id", fields: [program_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_costs_program_id_foreign")
  schools                                                       schools                       @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_costs_school_id_foreign")
  academic_dataset_academic_datasetTofinance_costs_typephase_id academic_dataset?             @relation("academic_datasetTofinance_costs_typephase_id", fields: [typephase_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_costs_phase_id_fkey")
  finance_cost_classes                                          finance_cost_classes[]        @ignore
  finance_cost_metadatas                                        finance_cost_metadatas[]
  finance_cost_specialization                                   finance_cost_specialization[] @ignore

  @@index([school_id, period_id, typephase_id, line_id, program_id, gender_id, payment_method, is_boarding, is_mutation, is_next_year, is_trial], map: "finance_costs_school_id_period_id_typephase_id_line_id_program_")
}

model finance_dataset {
  id                          BigInt                        @id @default(autoincrement())
  school_id                   Int?
  order                       Int                           @default(0)
  parent                      Int?
  depth                       Int                           @default(0)
  right                       Int                           @default(0)
  left                        Int                           @default(1)
  code                        String                        @db.VarChar(255)
  name                        String                        @db.VarChar(255)
  slug                        String                        @db.VarChar(255)
  description                 String
  is_active                   Boolean                       @default(false)
  type                        String                        @default("category") @db.VarChar(255)
  created_at                  DateTime?                     @db.Timestamp(0)
  updated_at                  DateTime?                     @db.Timestamp(0)
  deleted_at                  DateTime?                     @db.Timestamp(0)
  schools                     schools?                      @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_dataset_school_id_foreign")
  finance_account_receivables finance_account_receivables[]
  finance_costs               finance_costs[]
  finance_users_cost_groups   finance_users_cost_groups[]   @ignore

  @@index([code], map: "finance_dataset_code_index")
  @@index([order, parent, depth, right, left], map: "finance_dataset_order_parent_depth_right_left_index")
  @@index([slug], map: "finance_dataset_slug_index")
  @@index([type], map: "finance_dataset_type_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model finance_discount_receivables {
  discount_id                 Int
  school_id                   Int?
  account_receivable          Int
  amount                      Float
  is_percentable              Boolean                     @default(false)
  finance_account_receivables finance_account_receivables @relation(fields: [account_receivable], references: [id], onUpdate: NoAction)
  finance_discounts           finance_discounts           @relation(fields: [discount_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_discount_receivables_discount_id_foreign")
  schools                     schools?                    @relation(fields: [school_id], references: [id], onDelete: Restrict, onUpdate: NoAction)

  @@ignore
}

model finance_discount_rules {
  id              Int     @id @default(autoincrement())
  discount_id     Int
  name            String  @db.VarChar(255)
  assert_provider String  @db.VarChar(255)
  assert_method   String  @db.VarChar(255)
  is_enable       Boolean @default(true)
  timing          String  @default("once") @db.VarChar(255)
  school_id       Int?
}

model finance_discounts {
  id                           Int                            @id @default(autoincrement())
  school_id                    Int
  created_by                   BigInt
  code                         String                         @db.VarChar(255)
  name                         String                         @db.VarChar(255)
  description                  String
  start_date                   DateTime?                      @db.Date
  end_date                     DateTime?                      @db.Date
  is_enable                    Boolean                        @default(true)
  created_at                   DateTime?                      @db.Timestamp(0)
  updated_at                   DateTime?                      @db.Timestamp(0)
  users                        users                          @relation(fields: [created_by], references: [id], onUpdate: NoAction)
  schools                      schools                        @relation(fields: [school_id], references: [id], onUpdate: NoAction)
  finance_discount_receivables finance_discount_receivables[] @ignore
  finance_users_discounts      finance_users_discounts[]
}

model finance_ewallet_mutation {
  id                                               BigInt               @id @default(autoincrement())
  school_id                                        Int
  transaction_id                                   BigInt
  balance_before                                   Float
  amount                                           Float
  balance_after                                    Float
  type                                             String               @db.VarChar(255)
  user_id                                          BigInt
  perform_by                                       BigInt
  created_at                                       DateTime?            @db.Timestamp(0)
  updated_at                                       DateTime?            @db.Timestamp(0)
  deleted_at                                       DateTime?            @db.Timestamp(0)
  users_finance_ewallet_mutation_perform_byTousers users                @relation("finance_ewallet_mutation_perform_byTousers", fields: [perform_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_ewallet_mutation_perform_by_foreign")
  schools                                          schools              @relation(fields: [school_id], references: [id], onUpdate: NoAction)
  finance_transactions                             finance_transactions @relation(fields: [transaction_id], references: [id], onUpdate: NoAction)
  users_finance_ewallet_mutation_user_idTousers    users                @relation("finance_ewallet_mutation_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_ewallet_mutation_user_id_foreign")

  @@index([type], map: "finance_ewallet_mutation_type_index")
}

model finance_fiscal_year {
  id             Int       @id @default(autoincrement())
  school_id      Int?
  year           Int       @db.SmallInt
  to_year        Int?      @db.SmallInt
  grade          Int       @db.SmallInt
  description    String?
  start_date     DateTime  @db.Date
  end_date       DateTime? @db.Date
  prefix_receipt String?   @db.VarChar(255)
  suffix_receipt String?   @db.VarChar(255)
  is_published   Boolean   @default(true)
  deleted_at     DateTime? @db.Timestamp(0)
}

model finance_general_ledger {
  id                            BigInt                          @id @default(autoincrement())
  school_id                     Int
  coa_id                        Int
  trx_date                      DateTime                        @db.Date
  prev_balance                  Float
  debit_balance                 Float
  credit_balance                Float
  ending_balance                Float
  created_at                    DateTime?                       @db.Timestamp(0)
  updated_at                    DateTime?                       @db.Timestamp(0)
  deleted_at                    DateTime?                       @db.Timestamp(0)
  finance_chart_of_accounts     finance_chart_of_accounts       @relation(fields: [coa_id], references: [id], onUpdate: NoAction)
  schools                       schools                         @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_general_ledger_school_id_foreign")
  finance_general_ledger_detail finance_general_ledger_detail[]

  @@index([school_id, coa_id], map: "finance_general_ledger_school_id_coa_id_index")
  @@index([school_id, trx_date], map: "finance_general_ledger_school_id_trx_date_index")
}

model finance_general_ledger_detail {
  id                        BigInt                    @id @default(autoincrement())
  school_id                 Int
  general_ledger_id         BigInt
  coa_id                    Int
  trx_name                  String                    @db.VarChar(255)
  debit_balance             Float
  credit_balance            Float
  created_at                DateTime?                 @db.Timestamp(0)
  updated_at                DateTime?                 @db.Timestamp(0)
  deleted_at                DateTime?                 @db.Timestamp(0)
  finance_chart_of_accounts finance_chart_of_accounts @relation(fields: [coa_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  finance_general_ledger    finance_general_ledger    @relation(fields: [general_ledger_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_general_ledger_detail_general_ledger_id_foreign")
  schools                   schools                   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_general_ledger_detail_school_id_foreign")
}

model finance_journal_entries {
  id                             BigInt                           @id @default(autoincrement())
  school_id                      Int?
  source_transaction_details_id  Int?
  transaction_name               String                           @db.VarChar(255)
  description                    String?
  notes                          String?
  status                         String                           @default("pending") @db.VarChar(255)
  jurnal_date                    DateTime                         @db.Date
  is_last_balance                Boolean                          @default(false)
  created_at                     DateTime?                        @db.Timestamp(0)
  updated_at                     DateTime?                        @db.Timestamp(0)
  deleted_at                     DateTime?                        @db.Timestamp(0)
  schools                        schools?                         @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_journal_entries_school_id_foreign")
  finance_transaction_details    finance_transaction_details?     @relation(fields: [source_transaction_details_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_journal_entries_source_transaction_details_id_foreign")
  finance_journal_entries_detail finance_journal_entries_detail[]
}

model finance_journal_entries_detail {
  id                        BigInt                    @id @default(autoincrement())
  school_id                 Int?
  journal_entries_id        BigInt
  account_id                Int
  debit                     Float
  credit                    Float
  memo                      String?
  finance_chart_of_accounts finance_chart_of_accounts @relation(fields: [account_id], references: [id], onUpdate: NoAction)
  finance_journal_entries   finance_journal_entries   @relation(fields: [journal_entries_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  schools                   schools?                  @relation(fields: [school_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model finance_rapbs {
  id                                    BigInt                    @id @default(autoincrement())
  school_id                             Int
  period_id                             Int
  main_account_id                       Int
  ref_number                            String?                   @db.VarChar(255)
  total_amount                          Float
  type                                  String                    @db.VarChar(255)
  status                                String                    @db.VarChar(255)
  used_date_start                       DateTime?                 @db.Date
  used_date_end                         DateTime?                 @db.Date
  user_id                               BigInt?
  perform_by                            BigInt
  created_at                            DateTime?                 @db.Timestamp(0)
  updated_at                            DateTime?                 @db.Timestamp(0)
  deleted_at                            DateTime?                 @db.Timestamp(0)
  finance_chart_of_accounts             finance_chart_of_accounts @relation(fields: [main_account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_rapbs_main_account_id_foreign")
  users_finance_rapbs_perform_byTousers users                     @relation("finance_rapbs_perform_byTousers", fields: [perform_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_rapbs_perform_by_foreign")
  academic_period                       academic_period           @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_rapbs_period_id_foreign")
  schools                               schools                   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_rapbs_school_id_foreign")
  users_finance_rapbs_user_idTousers    users?                    @relation("finance_rapbs_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_rapbs_user_id_foreign")
  finance_rapbs_details                 finance_rapbs_details[]
  finance_rapbs_licenses                finance_rapbs_licenses[]
  finance_rapbs_licensors               finance_rapbs_licensors[]
}

model finance_rapbs_activities {
  id                        BigInt                     @id @default(autoincrement())
  school_id                 Int
  main_account_id           Int?
  code                      String?                    @db.VarChar(255)
  name                      String                     @db.VarChar(255)
  description               String                     @db.VarChar(255)
  starting_balance          Float                      @default(0)
  order                     Int                        @default(0)
  parent                    Int?
  right                     Int                        @default(0)
  left                      Int                        @default(0)
  depth                     Int                        @default(0)
  perform_by                BigInt
  created_at                DateTime?                  @db.Timestamp(0)
  updated_at                DateTime?                  @db.Timestamp(0)
  deleted_at                DateTime?                  @db.Timestamp(0)
  finance_chart_of_accounts finance_chart_of_accounts? @relation(fields: [main_account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_rapbs_activities_main_account_id_foreign")
  users                     users                      @relation(fields: [perform_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_rapbs_activities_perform_by_foreign")
  schools                   schools                    @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_rapbs_activities_school_id_foreign")
}

model finance_rapbs_details {
  id                        BigInt                    @id @default(autoincrement())
  rapbs_id                  BigInt
  sub_account_id            Int
  quantity                  Float                     @default(1)
  unit                      String                    @db.VarChar(30)
  unit_price                Float
  total                     Float
  uraian                    String                    @db.VarChar(255)
  created_at                DateTime?                 @db.Timestamp(0)
  updated_at                DateTime?                 @db.Timestamp(0)
  deleted_at                DateTime?                 @db.Timestamp(0)
  school_id                 Int?
  finance_rapbs             finance_rapbs             @relation(fields: [rapbs_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_rapbs_details_rapbs_id_foreign")
  finance_chart_of_accounts finance_chart_of_accounts @relation(fields: [sub_account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_rapbs_details_sub_account_id_foreign")
}

model finance_rapbs_licenses {
  id                      Int                     @id @default(autoincrement())
  licensor_id             Int
  rapbs_id                BigInt
  created_at              DateTime?               @db.Timestamp(0)
  updated_at              DateTime?               @db.Timestamp(0)
  finance_rapbs_licensors finance_rapbs_licensors @relation(fields: [licensor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_rapbs_licenses_licensor_id_foreign")
  finance_rapbs           finance_rapbs           @relation(fields: [rapbs_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_rapbs_licenses_rapbs_id_foreign")
}

model finance_rapbs_licensors {
  id                                                Int                      @id @default(autoincrement())
  rapbs_id                                          BigInt?
  user_id                                           BigInt
  performed_by                                      BigInt
  period_id                                         Int
  type                                              String                   @db.VarChar(255)
  tier                                              Int                      @default(1) @db.SmallInt
  created_at                                        DateTime?                @db.Timestamp(0)
  updated_at                                        DateTime?                @db.Timestamp(0)
  deleted_at                                        DateTime?                @db.Timestamp(0)
  school_id                                         Int?
  users_finance_rapbs_licensors_performed_byTousers users                    @relation("finance_rapbs_licensors_performed_byTousers", fields: [performed_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_rapbs_licensors_performed_by_foreign")
  academic_period                                   academic_period          @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_rapbs_licensors_period_id_foreign")
  finance_rapbs                                     finance_rapbs?           @relation(fields: [rapbs_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_rapbs_licensors_rapbs_id_foreign")
  users_finance_rapbs_licensors_user_idTousers      users                    @relation("finance_rapbs_licensors_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_rapbs_licensors_user_id_foreign")
  finance_rapbs_licenses                            finance_rapbs_licenses[]
}

model finance_school_va {
  id         BigInt    @id @default(autoincrement())
  school_id  Int
  bank_code  String?   @db.VarChar(20)
  bin        String?   @db.VarChar(6)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  schools    schools   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_school_va_school_id_foreign")

  @@unique([school_id, bank_code], map: "finance_school_va_school_id_bank_code")
}

model finance_staff_slip_details {
  slip_id             BigInt
  payroll_account_id  BigInt
  amount              Float               @default(0)
  qty                 Int                 @default(1) @db.SmallInt
  total               Float               @default(0)
  note                String?             @db.VarChar(255)
  created_at          DateTime?           @db.Timestamp(0)
  updated_at          DateTime?           @db.Timestamp(0)
  hr_payroll_account  hr_payroll_account  @relation(fields: [payroll_account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_staff_slip_details_payroll_account_id_foreign")
  finance_staff_slips finance_staff_slips @relation(fields: [slip_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_staff_slip_details_slip_id_foreign")

  @@id([slip_id, payroll_account_id])
}

model finance_staff_slips {
  id                                           BigInt                       @id @default(autoincrement())
  school_id                                    Int
  staff_id                                     BigInt
  month                                        DateTime                     @db.Date
  amount                                       Float                        @default(0)
  tax                                          Float                        @default(0)
  total                                        Float                        @default(0)
  created_by                                   BigInt
  created_at                                   DateTime?                    @db.Timestamp(0)
  updated_at                                   DateTime?                    @db.Timestamp(0)
  approved_at                                  DateTime                     @db.Timestamp(0)
  approved_by                                  BigInt
  users_finance_staff_slips_approved_byTousers users                        @relation("finance_staff_slips_approved_byTousers", fields: [approved_by], references: [id], onUpdate: NoAction, map: "finance_staff_slips_approved_by_foreign")
  users_finance_staff_slips_created_byTousers  users                        @relation("finance_staff_slips_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction, map: "finance_staff_slips_created_by_foreign")
  schools                                      schools                      @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_staff_slips_school_id_foreign")
  human_resource_staff                         human_resource_staff         @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_staff_slips_staff_id_foreign")
  finance_staff_slip_details                   finance_staff_slip_details[]

  @@unique([school_id, staff_id, month], map: "finance_staff_slips_school_id_staff_id_month_unique")
}

model finance_summary_monthly_revenue {
  id                          BigInt                      @id(map: "summary_monthly_revenue_pkey") @default(autoincrement())
  school_id                   Int
  trx_date                    DateTime?                   @db.Date
  year                        Int                         @db.SmallInt
  month                       Int                         @db.SmallInt
  receivable_id               Int
  paid_amount                 Float
  arrears_amount              Float                       @default(0)
  created_at                  DateTime?                   @db.Timestamp(0)
  updated_at                  DateTime?                   @db.Timestamp(0)
  deleted_at                  DateTime?                   @db.Timestamp(0)
  finance_account_receivables finance_account_receivables @relation(fields: [receivable_id], references: [id], onUpdate: NoAction)
  schools                     schools                     @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "summary_monthly_revenue_school_id_foreign")

  @@index([school_id, year, month], map: "finance_summary_monthly_revenue_school_id_year_month")
}

model finance_summary_receivable {
  id                          BigInt                      @id @default(autoincrement())
  school_id                   Int
  user_id                     BigInt
  student_id                  BigInt?
  person_id                   BigInt
  trx_detail_id               Int
  coa_id                      Int
  invoice_amount              Float
  paid_amount                 Float
  trx_date                    DateTime                    @db.Date
  year                        Int                         @db.SmallInt
  month                       Int                         @db.SmallInt
  created_at                  DateTime?                   @db.Timestamp(0)
  updated_at                  DateTime?                   @db.Timestamp(0)
  deleted_at                  DateTime?                   @db.Timestamp(0)
  finance_chart_of_accounts   finance_chart_of_accounts   @relation(fields: [coa_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  people                      people                      @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_summary_receivable_person_id_foreign")
  schools                     schools                     @relation(fields: [school_id], references: [id], onUpdate: NoAction)
  academic_students           academic_students?          @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_summary_receivable_student_id_foreign")
  finance_transaction_details finance_transaction_details @relation(fields: [trx_detail_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_summary_receivable_trx_detail_id_foreign")
  users                       users                       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_summary_receivable_user_id_foreign")

  @@index([school_id, student_id, trx_date, coa_id], map: "finance_summary_receivable_school_id_student_id_trx_date_coa_id")
  @@index([school_id, student_id, year, month, coa_id], map: "finance_summary_receivable_school_id_student_id_year_month_coa_")
  @@index([school_id, trx_detail_id], map: "finance_summary_receivable_school_id_trx_detail_id_index")
  @@index([school_id, user_id, trx_date, coa_id], map: "finance_summary_receivable_school_id_user_id_trx_date_coa_id_in")
  @@index([school_id, user_id, trx_detail_id], map: "finance_summary_receivable_school_id_user_id_trx_detail_id_inde")
  @@index([school_id, user_id, year, month, coa_id], map: "finance_summary_receivable_school_id_user_id_year_month_coa_id_")
}

model finance_transaction_details {
  id                         Int                          @id @default(autoincrement())
  school_id                  Int
  transaction_id             BigInt
  title                      String                       @db.VarChar(255)
  description                String?                      @db.VarChar(255)
  quantity                   Int                          @default(1)
  unit_price                 Float
  remaining                  Float
  discount                   Float?
  year                       Int                          @db.SmallInt
  month                      Int                          @db.SmallInt
  grade                      Int?                         @db.SmallInt
  itemable_id                BigInt
  itemable_type              String                       @db.VarChar(255)
  discount_id                BigInt?
  payment_method             String                       @default("once") @db.VarChar(255)
  is_trial                   Boolean                      @default(false)
  trial_count                Int?                         @db.SmallInt
  trial_long_term_value      Int?                         @db.SmallInt
  trial_long_term_type       String?                      @db.VarChar(255)
  trial_dp_amount            Float?
  trial_dp_is_percentable    Boolean                      @default(false)
  created_at                 DateTime?                    @db.Timestamp(0)
  updated_at                 DateTime?                    @db.Timestamp(0)
  source_account_id          BigInt?
  deleted_at                 DateTime?                    @db.Timestamp(6)
  paid_amount                Float                        @default(0)
  schools                    schools                      @relation(fields: [school_id], references: [id], onUpdate: NoAction)
  finance_transactions       finance_transactions         @relation(fields: [transaction_id], references: [id], onUpdate: NoAction)
  finance_journal_entries    finance_journal_entries[]
  finance_summary_receivable finance_summary_receivable[]

  @@index([grade, month], map: "finance_transaction_details_grade_month")
  @@index([is_trial], map: "finance_transaction_details_is_trial")
  @@index([payment_method, itemable_id, itemable_type], map: "finance_transaction_details_payment_method_itemable_id_itemable")
}

model finance_transaction_payment {
  id                    Int                   @id @default(autoincrement())
  transaction_id        BigInt
  bank_payment_id       BigInt
  transfer_amount       BigInt?
  finance_bank_payments finance_bank_payments @relation(fields: [bank_payment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_transaction_payment_bank_payment_id_foreign")
  finance_transactions  finance_transactions  @relation(fields: [transaction_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_transaction_payment_transaction_id_foreign")
}

model finance_transactions {
  id                                                                                          BigInt                           @id @default(autoincrement())
  school_id                                                                                   Int
  type                                                                                        String                           @db.VarChar(255)
  status                                                                                      String                           @db.VarChar(255)
  trx_date                                                                                    DateTime                         @db.Date
  due_date                                                                                    DateTime?                        @db.Date
  ref_number                                                                                  String                           @db.VarChar(255)
  total_amount                                                                                Float
  is_cash                                                                                     Boolean                          @default(true)
  billable                                                                                    Boolean                          @default(false)
  user_id                                                                                     BigInt?
  performed_by                                                                                BigInt
  note                                                                                        String?
  depositor                                                                                   String?                          @db.VarChar(255)
  receiver_name                                                                               String?                          @db.VarChar(255)
  receiver_institution                                                                        String?                          @db.VarChar(255)
  created_at                                                                                  DateTime?                        @db.Timestamp(0)
  updated_at                                                                                  DateTime?                        @db.Timestamp(0)
  deleted_at                                                                                  DateTime?                        @db.Timestamp(0)
  use_balance                                                                                 Boolean                          @default(false)
  deposit_amount                                                                              Float                            @default(0)
  deleted_by                                                                                  BigInt?
  source_account_id                                                                           Int?
  cash_account_id                                                                             Int?
  paid_amount                                                                                 Float                            @default(0)
  finance_chart_of_accounts_finance_chart_of_accountsTofinance_transactions_cash_account_id   finance_chart_of_accounts?       @relation("finance_chart_of_accountsTofinance_transactions_cash_account_id", fields: [cash_account_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  users_finance_transactions_deleted_byTousers                                                users?                           @relation("finance_transactions_deleted_byTousers", fields: [deleted_by], references: [id], onDelete: Restrict, onUpdate: NoAction)
  users_finance_transactions_performed_byTousers                                              users                            @relation("finance_transactions_performed_byTousers", fields: [performed_by], references: [id], onUpdate: NoAction)
  schools                                                                                     schools                          @relation(fields: [school_id], references: [id], onUpdate: NoAction)
  finance_chart_of_accounts_finance_chart_of_accountsTofinance_transactions_source_account_id finance_chart_of_accounts?       @relation("finance_chart_of_accountsTofinance_transactions_source_account_id", fields: [source_account_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  users_finance_transactions_user_idTousers                                                   users?                           @relation("finance_transactions_user_idTousers", fields: [user_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  canteen_transactions                                                                        canteen_transactions[]
  finance_bank_payments_finance_bank_payments_deposit_idTofinance_transactions                finance_bank_payments[]          @relation("finance_bank_payments_deposit_idTofinance_transactions")
  finance_bank_payments_finance_bank_payments_pay_in_idTofinance_transactions                 finance_bank_payments[]          @relation("finance_bank_payments_pay_in_idTofinance_transactions")
  finance_ewallet_mutation                                                                    finance_ewallet_mutation[]
  finance_transaction_details                                                                 finance_transaction_details[]
  finance_transaction_payment                                                                 finance_transaction_payment[]
  finance_transactions_tokopedia                                                              finance_transactions_tokopedia[]

  @@index([school_id, type], map: "finance_transactions_school_id_type")
  @@index([school_id, type, status, deleted_at], map: "finance_transactions_school_id_type_status_deleted_at")
  @@index([school_id, type, status, trx_date, deleted_at], map: "finance_transactions_school_id_type_status_trx_date_deleted_at")
}

model finance_transactions_tokopedia {
  id                    String                 @id @db.Uuid
  reference_id          String                 @db.VarChar(255)
  school_id             Int
  user_id               BigInt
  type                  String                 @db.VarChar(255)
  trx_id                BigInt?
  trx_vano              String                 @db.VarChar(255)
  trx_ref               String?                @db.VarChar(255)
  trx_at                DateTime?              @db.Timestamp(0)
  trx_invoices          Json
  trx_payment_id        BigInt?
  trx_payment_amount    Float?
  status                String                 @default("unknown") @db.VarChar(255)
  status_reason         String?                @db.VarChar(255)
  request_header        Json?
  request_body          Json?
  response              Json?
  response_code         String?                @db.VarChar(5)
  response_http_code    Int?                   @db.SmallInt
  token_key             String                 @db.VarChar(255)
  created_at            DateTime?              @db.Timestamp(0)
  updated_at            DateTime?              @db.Timestamp(0)
  deleted_at            DateTime?              @db.Timestamp(0)
  schools               schools                @relation(fields: [school_id], references: [id], onDelete: NoAction, map: "finance_transactions_tokopedia_school_id_foreign")
  finance_transactions  finance_transactions?  @relation(fields: [trx_id], references: [id], onDelete: NoAction, map: "finance_transactions_tokopedia_trx_id_foreign")
  finance_bank_payments finance_bank_payments? @relation(fields: [trx_payment_id], references: [id], onDelete: NoAction, map: "finance_transactions_tokopedia_trx_payment_id_foreign")
  users                 users                  @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "finance_transactions_tokopedia_user_id_foreign")

  @@index([school_id, type, trx_vano], map: "finance_transactions_tokopedia_school_id_type_trx_vano_index")
  @@index([school_id, type, user_id], map: "finance_transactions_tokopedia_school_id_type_user_id_index")
  @@index([trx_ref], map: "finance_transactions_tokopedia_trx_ref_index")
  @@index([trx_vano], map: "finance_transactions_tokopedia_trx_vano_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model finance_users_cost_groups {
  dataset_id      BigInt
  user_id         BigInt
  created_at      DateTime?       @db.Timestamp(0)
  updated_at      DateTime?       @db.Timestamp(0)
  finance_dataset finance_dataset @relation(fields: [dataset_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_users_cost_groups_dataset_id_foreign")
  users           users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_users_cost_groups_user_id_foreign")

  @@ignore
}

model finance_users_discounts {
  id                                              BigInt            @id @default(autoincrement())
  discount_id                                     Int
  user_id                                         BigInt
  start_date                                      DateTime?         @db.Date
  end_date                                        DateTime?         @db.Date
  created_at                                      DateTime?         @db.Timestamp(0)
  updated_at                                      DateTime?         @db.Timestamp(0)
  created_by                                      BigInt?
  users_finance_users_discounts_created_byTousers users?            @relation("finance_users_discounts_created_byTousers", fields: [created_by], references: [id], onDelete: Cascade)
  finance_discounts                               finance_discounts @relation(fields: [discount_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_users_discounts_discount_id_foreign")
  users_finance_users_discounts_user_idTousers    users             @relation("finance_users_discounts_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "finance_users_discounts_user_id_foreign")

  @@unique([discount_id, user_id], map: "finance_users_discounts_discount_id_user_id")
}

model frontoffice_dataset {
  id                       BigInt                     @id @default(autoincrement())
  school_id                Int?
  order                    Int                        @default(0)
  parent                   Int?
  depth                    Int                        @default(0)
  right                    Int                        @default(0)
  left                     Int                        @default(1)
  image                    String?                    @db.VarChar(255)
  code                     String?                    @db.VarChar(255)
  code2                    String?                    @db.VarChar(255)
  name                     String                     @db.VarChar(255)
  slug                     String?                    @db.VarChar(255)
  classification           String?                    @db.VarChar(255)
  description              String?
  options                  String?
  sorting                  Int                        @default(0)
  is_active                Boolean                    @default(true)
  type                     String                     @default("default") @db.VarChar(255)
  created_at               DateTime?                  @db.Timestamp(0)
  updated_at               DateTime?                  @db.Timestamp(0)
  deleted_at               DateTime?                  @db.Timestamp(0)
  schools                  schools?                   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "frontoffice_dataset_school_id_foreign")
  frontoffice_notice_board frontoffice_notice_board[]
}

model frontoffice_notice_board {
  id                  BigInt               @id @default(autoincrement())
  school_id           Int?
  title               String               @db.VarChar(255)
  message             String
  category_id         BigInt?
  tags                String?              @db.VarChar(255)
  visible             String?              @db.VarChar(255)
  publish_on          DateTime?            @db.Timestamp(0)
  is_active           Boolean              @default(true)
  created_by          BigInt
  created_at          DateTime?            @db.Timestamp(0)
  updated_at          DateTime?            @db.Timestamp(0)
  type                String?              @db.VarChar(255)
  frontoffice_dataset frontoffice_dataset? @relation(fields: [category_id], references: [id], onDelete: Restrict, map: "frontoffice_notice_board_category_id_foreign")
  users               users                @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schools             schools?             @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "frontoffice_notice_board_school_id_foreign")
}

model frontoffice_visitors_book {
  id         BigInt    @id @default(autoincrement())
  school_id  Int?
  source     String    @db.VarChar(255)
  purpose    String    @db.VarChar(255)
  id_proof   String?   @db.VarChar(255)
  name       String    @db.VarChar(255)
  email      String?   @db.VarChar(255)
  contact    String?   @db.VarChar(255)
  notes      String
  in_time    DateTime? @db.Timestamp(0)
  out_time   DateTime? @db.Timestamp(0)
  created_by BigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  users      users     @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "frontoffice_visitors_book_created_by_foreign")
  schools    schools?  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "frontoffice_visitors_book_school_id_foreign")
}

model geo_cities {
  id            Int            @id @default(autoincrement())
  province_id   Int
  name          String         @db.VarChar(255)
  postal_code   String?        @db.VarChar(5)
  latitude      String?        @db.VarChar(40)
  longitude     String?        @db.VarChar(40)
  admin_code    String         @db.VarChar(255)
  wilayah_code  Int
  geo_provinces geo_provinces  @relation(fields: [province_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "geo_cities_province_id_foreign")
  geo_district  geo_district[]

  @@index([name], map: "geo_cities_name_index")
}

model geo_district {
  id              Int               @id @default(autoincrement())
  city_id         Int
  name            String            @db.VarChar(255)
  admin_code      String            @db.VarChar(255)
  wilayah_code    Int
  geo_cities      geo_cities        @relation(fields: [city_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "geo_district_city_id_foreign")
  geo_subdistrict geo_subdistrict[]
  schools         schools[]

  @@index([name], map: "geo_district_name_index")
}

model geo_provinces {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(255)
  admin_code   String       @db.VarChar(255)
  wilayah_code Int
  geo_cities   geo_cities[]

  @@index([name], map: "geo_provinces_name_index")
}

model geo_subdistrict {
  id           Int          @id @default(autoincrement())
  district_id  Int
  name         String       @db.VarChar(255)
  admin_code   String       @db.VarChar(255)
  wilayah_code Int
  geo_district geo_district @relation(fields: [district_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "geo_subdistrict_district_id_foreign")
  schools      schools[]

  @@index([name], map: "geo_subdistrict_name_index")
}

model hr_department {
  id         BigInt    @id @default(autoincrement())
  school_id  Int
  order      Int       @default(0)
  parent     Int?
  depth      Int       @default(0)
  right      Int       @default(0)
  left       Int       @default(1)
  code       String?   @db.VarChar(100)
  name       String    @db.VarChar(255)
  notes      String?
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  schools    schools   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_department_school_id_foreign")
}

model hr_experience {
  id                BigInt    @id @default(autoincrement())
  staff_id          BigInt
  exp_company       String    @db.VarChar(255)
  exp_comp_position String    @db.VarChar(255)
  exp_comp_address  String    @db.VarChar(255)
  exp_work_duration String    @db.VarChar(255)
  exp_salary        Float?
  notes             String?
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  deleted_at        DateTime? @db.Timestamp(0)
}

model hr_group_level {
  id                   BigInt                 @id @default(autoincrement())
  school_id            Int
  group                String                 @db.VarChar(255)
  code                 String                 @db.VarChar(255)
  name                 String                 @db.VarChar(255)
  performed_by         BigInt
  deleted_at           DateTime?              @db.Timestamp(0)
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  users                users                  @relation(fields: [performed_by], references: [id], onUpdate: NoAction, map: "hr_group_level_performed_by_foreign")
  schools              schools                @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_group_level_school_id_foreign")
  hr_salary_base       hr_salary_base[]
  human_resource_staff human_resource_staff[]

  @@unique([school_id, group, code], map: "hr_group_level_school_id_group_code_unique")
  @@index([school_id, group, code, name], map: "hr_group_level_base_index")
}

model hr_job_history {
  id            BigInt    @id @default(autoincrement())
  department_id BigInt
  position_id   BigInt
  staff_id      BigInt
  start_date    DateTime  @db.Date
  end_date      DateTime  @db.Date
  notes         String?
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  deleted_at    DateTime? @db.Timestamp(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model hr_journal_attachment {
  school_id       Int?
  attachment_id   BigInt
  attachable_id   BigInt
  attachable_type String   @db.VarChar(255)
  schools         schools? @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_journal_attachment_school_id_foreign")

  @@ignore
}

model hr_pay_salary {
  id                   BigInt               @id @default(autoincrement())
  school_id            Int?
  staff_id             BigInt
  month                String?              @db.VarChar(255)
  year                 String?              @db.VarChar(255)
  paid_date            DateTime             @db.Date
  total_days           String?              @db.VarChar(255)
  basic                String?              @db.VarChar(255)
  medical              String?              @db.VarChar(255)
  bonus                String?              @db.VarChar(255)
  loan                 String?              @db.VarChar(255)
  tax                  String?              @db.VarChar(255)
  total_pay            String?              @db.VarChar(255)
  notes                String?
  status               String?              @db.VarChar(255)
  deleted_at           DateTime?            @db.Timestamp(0)
  created_at           DateTime?            @db.Timestamp(0)
  updated_at           DateTime?            @db.Timestamp(0)
  schools              schools?             @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_pay_salary_school_id_foreign")
  human_resource_staff human_resource_staff @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_pay_salary_staff_id_foreign")
}

model hr_payroll_account {
  id                         BigInt                       @id @default(autoincrement())
  school_id                  Int?
  code                       String?                      @db.VarChar(255)
  name                       String                       @db.VarChar(255)
  type                       String                       @db.VarChar(255)
  parent                     Int?
  depth                      Int                          @default(0)
  right                      Int                          @default(1)
  left                       Int                          @default(1)
  deleted_at                 DateTime?                    @db.Timestamp(0)
  created_at                 DateTime?                    @db.Timestamp(0)
  updated_at                 DateTime?                    @db.Timestamp(0)
  schools                    schools?                     @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_payroll_account_school_id_foreign")
  finance_staff_slip_details finance_staff_slip_details[]
  hr_payroll_slip_details    hr_payroll_slip_details[]
  hr_salary_base             hr_salary_base[]
  hr_staff_salary            hr_staff_salary[]

  @@unique([school_id, code], map: "hr_payroll_account_school_id_code_unique")
  @@index([school_id, code, name, type], map: "hr_payroll_account_base_index")
}

model hr_payroll_slip_details {
  id                 BigInt             @id @default(autoincrement())
  school_id          Int
  payroll_slip_id    BigInt
  payroll_account_id BigInt
  amount             Float              @default(0)
  qty                Int                @db.SmallInt
  remaining          Float              @default(0)
  note               String?            @db.VarChar(255)
  deleted_at         DateTime?          @db.Timestamp(0)
  created_at         DateTime?          @db.Timestamp(0)
  updated_at         DateTime?          @db.Timestamp(0)
  hr_payroll_account hr_payroll_account @relation(fields: [payroll_account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_payroll_slip_details_payroll_account_id_foreign")
  hr_payroll_slips   hr_payroll_slips   @relation(fields: [payroll_slip_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_payroll_slip_details_payroll_slip_id_foreign")
  schools            schools            @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_payroll_slip_details_school_id_foreign")
}

model hr_payroll_slips {
  id                      BigInt                    @id @default(autoincrement())
  school_id               Int
  staff_id                BigInt
  year                    Int                       @db.SmallInt
  month                   Int                       @db.SmallInt
  amount                  Float                     @default(0)
  note                    String?                   @db.VarChar(255)
  performed_by            BigInt
  deleted_at              DateTime?                 @db.Timestamp(0)
  created_at              DateTime?                 @db.Timestamp(0)
  updated_at              DateTime?                 @db.Timestamp(0)
  users                   users                     @relation(fields: [performed_by], references: [id], onUpdate: NoAction, map: "hr_payroll_slips_performed_by_foreign")
  schools                 schools                   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_payroll_slips_school_id_foreign")
  human_resource_staff    human_resource_staff      @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_payroll_slips_staff_id_foreign")
  hr_payroll_slip_details hr_payroll_slip_details[]

  @@unique([school_id, staff_id, year, month], map: "hr_payroll_slips_school_id_staff_id_year_month_unique")
}

model hr_position {
  id         BigInt    @id @default(autoincrement())
  school_id  Int
  code       String?   @db.VarChar(100)
  name       String    @db.VarChar(255)
  notes      String?
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  schools    schools   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_position_school_id_foreign")
}

model hr_salary_base {
  id                 BigInt             @id @default(autoincrement())
  school_id          Int
  payroll_account_id BigInt
  group_level_id     BigInt
  year_base          Int                @db.SmallInt
  years_worked       Int                @default(1) @db.SmallInt
  amount             Float              @default(0)
  is_flat            Boolean            @default(false)
  start_date         DateTime?          @db.Date
  end_date           DateTime?          @db.Date
  note               String?            @db.VarChar(255)
  performed_by       BigInt
  created_at         DateTime?          @db.Timestamp(0)
  updated_at         DateTime?          @db.Timestamp(0)
  hr_group_level     hr_group_level     @relation(fields: [group_level_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_salary_base_group_level_id_foreign")
  hr_payroll_account hr_payroll_account @relation(fields: [payroll_account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_salary_base_payroll_account_id_foreign")
  users              users              @relation(fields: [performed_by], references: [id], onUpdate: NoAction, map: "hr_salary_base_performed_by_foreign")
  schools            schools            @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_salary_base_school_id_foreign")

  @@unique([school_id, payroll_account_id, group_level_id, year_base, years_worked, start_date, end_date], map: "hr_salary_base_school_id_payroll_account_id_group_level_id_year")
  @@index([school_id, payroll_account_id, group_level_id, year_base, years_worked, start_date, end_date], map: "hr_salary_base_base_index")
}

model hr_staff_attendances {
  id                   BigInt               @id @default(autoincrement())
  school_id            Int?
  period_id            Int
  staff_id             BigInt
  attendance_date      DateTime             @db.Date
  start                DateTime?            @db.Timestamp(0)
  end                  DateTime?            @db.Timestamp(0)
  scan_in              DateTime?            @db.Timestamp(0)
  scna_out             DateTime?            @db.Timestamp(0)
  late_time            DateTime?            @db.Timestamp(0)
  duration             String?              @db.VarChar(255)
  presence             Int?                 @db.SmallInt
  absent_cause         String?              @db.VarChar(255)
  notes                String?
  deleted_at           DateTime?            @db.Timestamp(0)
  created_at           DateTime?            @db.Timestamp(0)
  updated_at           DateTime?            @db.Timestamp(0)
  academic_period      academic_period      @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_staff_attendances_period_id_foreign")
  schools              schools?             @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_staff_attendances_school_id_foreign")
  human_resource_staff human_resource_staff @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_staff_attendances_staff_id_foreign")
}

model hr_staff_journal {
  id         BigInt    @id @default(autoincrement())
  user_id    BigInt
  date       DateTime  @db.Timestamp(0)
  notes      String
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  school_id  Int
  activity   String
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_staff_journal_created_by_foreign")
}

model hr_staff_leave {
  id                   BigInt               @id @default(autoincrement())
  school_id            Int?
  staff_id             BigInt
  type                 String?              @db.VarChar(255)
  year                 String?              @db.VarChar(255)
  apply_date           DateTime             @db.Date
  start_date           DateTime             @db.Date
  end_date             DateTime             @db.Date
  leave_duration       String?              @db.VarChar(255)
  reason               String?              @db.VarChar(255)
  notes                String?
  leave_status         String?              @db.VarChar(255)
  deleted_at           DateTime?            @db.Timestamp(0)
  created_at           DateTime?            @db.Timestamp(0)
  updated_at           DateTime?            @db.Timestamp(0)
  schools              schools?             @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_staff_leave_school_id_foreign")
  human_resource_staff human_resource_staff @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_staff_leave_staff_id_foreign")
}

model hr_staff_salary {
  id                   BigInt               @id @default(autoincrement())
  school_id            Int
  staff_id             BigInt
  payroll_account_id   BigInt
  amount               Float                @default(0)
  start_date           DateTime?            @db.Date
  end_date             DateTime?            @db.Date
  note                 String?              @db.VarChar(255)
  performed_by         BigInt
  deleted_at           DateTime?            @db.Timestamp(0)
  created_at           DateTime?            @db.Timestamp(0)
  updated_at           DateTime?            @db.Timestamp(0)
  hr_payroll_account   hr_payroll_account   @relation(fields: [payroll_account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_staff_salary_payroll_account_id_foreign")
  users                users                @relation(fields: [performed_by], references: [id], onUpdate: NoAction, map: "hr_staff_salary_performed_by_foreign")
  schools              schools              @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_staff_salary_school_id_foreign")
  human_resource_staff human_resource_staff @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "hr_staff_salary_staff_id_foreign")

  @@unique([school_id, staff_id, payroll_account_id, start_date, end_date], map: "hr_staff_salary_school_id_staff_id_payroll_account_id_start_dat")
  @@index([school_id, staff_id, payroll_account_id, start_date, end_date], map: "hr_staff_salary_base_index")
}

model human_resource_staff {
  id                                                   BigInt                                                 @id @default(autoincrement())
  person_id                                            BigInt
  user_id                                              BigInt
  year_in                                              Int?                                                   @db.SmallInt
  year_out                                             Int?                                                   @db.SmallInt
  registration_number                                  String?                                                @db.VarChar(255)
  nip                                                  String?                                                @db.VarChar(50)
  nbm                                                  String?                                                @db.VarChar(50)
  nuptk                                                String?                                                @db.VarChar(50)
  website                                              String?                                                @db.VarChar(100)
  phone                                                String?                                                @db.VarChar(20)
  daily_language                                       String?                                                @db.VarChar(50)
  is_teacher                                           Boolean                                                @default(false)
  active                                               Boolean                                                @default(true)
  created_at                                           DateTime?                                              @db.Timestamp(0)
  updated_at                                           DateTime?                                              @db.Timestamp(0)
  deleted_at                                           DateTime?                                              @db.Timestamp(0)
  school_id                                            Int
  group_level_id                                       BigInt?
  salary_year_base                                     Int?                                                   @db.SmallInt
  status                                               String                                                 @default("active") @db.VarChar(50)
  is_mutation                                          Boolean                                                @default(false)
  mutation_date                                        DateTime?                                              @db.Date
  mutation_reason                                      String?
  mutation_type                                        String?
  hr_group_level                                       hr_group_level?                                        @relation(fields: [group_level_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "human_resource_staff_group_level_id_foreign")
  people                                               people                                                 @relation(fields: [person_id], references: [id], onUpdate: NoAction)
  schools                                              schools                                                @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                                                users                                                  @relation(fields: [user_id], references: [id], onUpdate: NoAction)
  academic_assignment                                  academic_assignment[]
  academic_classrooms                                  academic_classrooms[]
  academic_course_assessment_competence_basic_formulas academic_course_assessment_competence_basic_formulas[]
  academic_course_assessment_competence_formulas       academic_course_assessment_competence_formulas[]
  academic_course_assessments                          academic_course_assessments[]
  academic_course_schedules                            academic_course_schedules[]
  academic_courses_teachers                            academic_courses_teachers[]
  academic_student_courses                             academic_student_courses[]
  academic_student_report_card_details                 academic_student_report_card_details[]
  academic_teacher_course_attendances                  academic_teacher_course_attendances[]
  finance_staff_slips                                  finance_staff_slips[]
  hr_pay_salary                                        hr_pay_salary[]
  hr_payroll_slips                                     hr_payroll_slips[]
  hr_staff_attendances                                 hr_staff_attendances[]
  hr_staff_leave                                       hr_staff_leave[]
  hr_staff_salary                                      hr_staff_salary[]
  human_resource_staff_status                          human_resource_staff_status[]
  studentship_student_meal                             studentship_student_meal[]
  studentship_student_medical                          studentship_student_medical[]

  @@index([school_id, person_id, user_id, nip, nuptk, is_teacher], map: "hr_staff_base_index")
}

model human_resource_staff_status {
  staff_id             BigInt
  period_id            Int
  status               String               @default("active") @db.VarChar(50)
  reason               String?              @db.VarChar(255)
  date                 DateTime?            @db.Date
  performed_by         BigInt
  created_at           DateTime?            @db.Timestamp(0)
  updated_at           DateTime?            @db.Timestamp(0)
  users                users                @relation(fields: [performed_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "human_resource_staff_status_performed_by_foreign")
  academic_period      academic_period      @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "human_resource_staff_status_period_id_foreign")
  human_resource_staff human_resource_staff @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "human_resource_staff_status_staff_id_foreign")

  @@id([staff_id, period_id])
}

model jobs {
  id           BigInt @id @default(autoincrement())
  queue        String @db.VarChar(255)
  payload      String
  attempts     Int
  reserved_at  Int?
  available_at Int
  created_at   Int

  @@index([queue], map: "jobs_queue_index")
}

model lms_dataset {
  id             BigInt    @id @default(autoincrement())
  school_id      Int?
  order          Int       @default(0)
  parent         Int?
  depth          Int       @default(0)
  right          Int       @default(0)
  left           Int       @default(1)
  image          String?   @db.VarChar(255)
  code           String?   @db.VarChar(255)
  code2          String?   @db.VarChar(255)
  name           String    @db.VarChar(255)
  slug           String?   @db.VarChar(255)
  classification String?   @db.VarChar(255)
  description    String?
  options        String?
  sorting        Int       @default(0)
  is_active      Boolean   @default(true)
  type           String    @default("default") @db.VarChar(255)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
  deleted_at     DateTime? @db.Timestamp(0)
  schools        schools?  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lms_dataset_school_id_foreign")
}

model lms_forum_conversations {
  id                                                   BigInt    @id @default(autoincrement())
  school_id                                            Int
  forum_id                                             BigInt
  conversation_id                                      BigInt?
  user_id                                              BigInt
  content                                              String
  created_at                                           DateTime? @db.Timestamp(0)
  updated_at                                           DateTime? @db.Timestamp(0)
  users_lms_forum_conversations_conversation_idTousers users?    @relation("lms_forum_conversations_conversation_idTousers", fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lms_forum_conversations_conversation_id_foreign")
  users_lms_forum_conversations_forum_idTousers        users     @relation("lms_forum_conversations_forum_idTousers", fields: [forum_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lms_forum_conversations_forum_id_foreign")
  schools                                              schools   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lms_forum_conversations_school_id_foreign")
  users_lms_forum_conversations_user_idTousers         users     @relation("lms_forum_conversations_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lms_forum_conversations_user_id_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model lms_forum_convertation_attachments {
  school_id       Int?
  attachment_id   BigInt
  attachable_id   BigInt
  attachable_type String   @db.VarChar(255)
  schools         schools? @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lms_forum_convertation_attachments_school_id_foreign")

  @@ignore
}

model lms_forums {
  id                   BigInt               @id @default(autoincrement())
  school_id            Int
  lms_lessroom_id      BigInt
  creator_id           BigInt
  title                String               @db.VarChar(255)
  content              String
  created_at           DateTime?            @db.Timestamp(0)
  updated_at           DateTime?            @db.Timestamp(0)
  users                users                @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lms_forums_creator_id_foreign")
  lms_lesson_classroom lms_lesson_classroom @relation(fields: [lms_lessroom_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lms_forums_lms_lessroom_id_foreign")
  schools              schools              @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lms_forums_school_id_foreign")
}

model lms_lesson_classroom {
  id                  BigInt              @id @default(autoincrement())
  school_id           Int
  lesson_id           BigInt
  classroom_id        BigInt
  status              String?             @db.VarChar(255)
  access_code         String?             @db.VarChar(255)
  require_approval    Boolean             @default(false)
  created_at          DateTime?           @db.Timestamp(0)
  updated_at          DateTime?           @db.Timestamp(0)
  academic_classrooms academic_classrooms @relation(fields: [classroom_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lms_lessons         lms_lessons         @relation(fields: [lesson_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lms_lesson_classroom_lesson_id_foreign")
  schools             schools             @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lms_lesson_classroom_school_id_foreign")
  lms_forums          lms_forums[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model lms_lesson_material_logs {
  school_id     Int
  attachment_id BigInt
  user_id       BigInt
  opened_at     DateTime @db.Timestamp(0)
  schools       schools  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lms_lesson_material_logs_school_id_foreign")
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lms_lesson_material_logs_user_id_foreign")

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model lms_lesson_materials {
  attachment_id   BigInt
  attachable_id   BigInt
  attachable_type String      @db.VarChar(255)
  order           Int         @default(0) @db.SmallInt
  attachments     attachments @relation(fields: [attachment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@ignore
}

model lms_lessons {
  id                   BigInt                 @id @default(autoincrement())
  school_id            Int
  course_id            Int
  owner_id             BigInt
  order                Int                    @default(0)
  parent               Int?
  depth                Int                    @default(0)
  right                Int                    @default(0)
  left                 Int                    @default(1)
  cover                String?                @db.VarChar(255)
  image                String?                @db.VarChar(255)
  section              String?                @db.VarChar(255)
  slug                 String?                @db.VarChar(255)
  title                String                 @db.VarChar(255)
  content              String
  duration             String?                @db.VarChar(255)
  level                String?                @db.VarChar(255)
  tags                 String?                @db.VarChar(255)
  options              String?
  is_active            Boolean                @default(true)
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  deleted_at           DateTime?              @db.Timestamp(0)
  introduction         String?
  is_private           Boolean?               @default(true)
  academic_courses     academic_courses       @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lms_lessons_course_id_foreign")
  users                users                  @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lms_lessons_owner_id_foreign")
  schools              schools                @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lms_lessons_school_id_foreign")
  lms_lesson_classroom lms_lesson_classroom[]
}

model message_whatsapp {
  id                                       Int                  @id @default(autoincrement())
  service_engine                           String?              @db.VarChar(30)
  school_id                                Int?
  title                                    String               @db.VarChar(255)
  description                              String               @default("") @db.VarChar(255)
  receiver                                 String               @default("") @db.VarChar(255)
  type                                     String               @default("personal") @db.VarChar(20)
  period_id                                Int?
  class_id                                 Int?
  classroom_id                             BigInt?
  message                                  String
  sent_at                                  DateTime?            @db.Timestamp(0)
  sent_status                              String?              @db.VarChar(255)
  created_at                               DateTime?            @db.Timestamp(0)
  updated_at                               DateTime?            @db.Timestamp(0)
  deleted_at                               DateTime?            @db.Timestamp(0)
  created_by                               BigInt?
  updated_by                               BigInt?
  deleted_by                               BigInt?
  academic_classes                         academic_classes?    @relation(fields: [class_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "message_whatsapp_class_id_foreign")
  academic_classrooms                      academic_classrooms? @relation(fields: [classroom_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "message_whatsapp_classroom_id_foreign")
  users_message_whatsapp_created_byTousers users?               @relation("message_whatsapp_created_byTousers", fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "message_whatsapp_created_by_foreign")
  users_message_whatsapp_deleted_byTousers users?               @relation("message_whatsapp_deleted_byTousers", fields: [deleted_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "message_whatsapp_deleted_by_foreign")
  academic_period                          academic_period?     @relation(fields: [period_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "message_whatsapp_period_id_foreign")
  schools                                  schools?             @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "message_whatsapp_school_id_foreign")
  users_message_whatsapp_updated_byTousers users?               @relation("message_whatsapp_updated_byTousers", fields: [updated_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "message_whatsapp_updated_by_foreign")
}

model messages {
  id                    Int       @id @default(autoincrement())
  message               String
  is_seen               Boolean   @default(false)
  deleted_from_sender   Boolean   @default(false)
  deleted_from_receiver Boolean   @default(false)
  user_id               Int
  conversation_id       Int
  created_at            DateTime? @db.Timestamp(0)
  updated_at            DateTime? @db.Timestamp(0)
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String @db.VarChar(255)
  batch     Int
}

model mobile_block {
  id          BigInt    @id(map: "mobile_pages_pkey") @default(autoincrement())
  order       Int       @default(0)
  title       String    @db.VarChar(255)
  description String    @db.VarChar(255)
  content     String
  online      Boolean   @default(true)
  options     String?   @db.VarChar(255)
  deleted_at  DateTime? @db.Timestamp(0)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  icon        String?   @db.VarChar
  type        String?   @db.VarChar
}

model mpls_dataset {
  id                               Int                                @id @default(autoincrement())
  school_id                        Int
  code                             String                             @db.VarChar(255)
  name                             String                             @db.VarChar(255)
  description                      String
  is_active                        Boolean                            @default(false)
  type                             String                             @default("default") @db.VarChar(255)
  sorting                          Int?                               @db.SmallInt
  created_at                       DateTime?                          @db.Timestamp(0)
  updated_at                       DateTime?                          @db.Timestamp(0)
  deleted_at                       DateTime?                          @db.Timestamp(0)
  schools                          schools                            @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mpls_dataset_school_id_foreign")
  mpls_group_applicant_attendances mpls_group_applicant_attendances[]
  mpls_group_journal               mpls_group_journal[]
}

model mpls_group {
  id                               BigInt                             @id @default(autoincrement())
  school_id                        Int
  period_id                        Int
  leader_id                        BigInt?
  code                             String                             @db.VarChar(255)
  name                             String                             @db.VarChar(255)
  description                      String?                            @db.VarChar(255)
  created_at                       DateTime?                          @db.Timestamp(0)
  updated_at                       DateTime?                          @db.Timestamp(0)
  deleted_at                       DateTime?                          @db.Timestamp(0)
  academic_period                  academic_period                    @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mpls_group_period_id_foreign")
  schools                          schools                            @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mpls_group_school_id_foreign")
  mpls_group_applicant             mpls_group_applicant[]
  mpls_group_applicant_attendances mpls_group_applicant_attendances[]
  mpls_group_journal               mpls_group_journal[]
}

model mpls_group_applicant {
  school_id            Int
  group_id             BigInt
  applicant_id         BigInt
  notes                String?
  created_at           DateTime?            @db.Timestamp(0)
  updated_at           DateTime?            @db.Timestamp(0)
  deleted_at           DateTime?            @db.Timestamp(0)
  admission_applicants admission_applicants @relation(fields: [applicant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mpls_group_applicant_applicant_id_foreign")
  mpls_group           mpls_group           @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mpls_group_applicant_group_id_foreign")

  @@unique([group_id, applicant_id], map: "unique_group_applicant")
}

model mpls_group_applicant_attendances {
  id                   BigInt               @id @default(autoincrement())
  school_id            Int
  period_id            Int
  subject_id           Int
  group_id             BigInt?
  applicant_id         BigInt
  attendance_date      DateTime             @db.Timestamp(0)
  presence             Int                  @db.SmallInt
  absent_cause         String?              @db.VarChar(255)
  notes                String?
  created_by           BigInt?
  deleted_at           DateTime?            @db.Timestamp(0)
  created_at           DateTime?            @db.Timestamp(0)
  updated_at           DateTime?            @db.Timestamp(0)
  admission_applicants admission_applicants @relation(fields: [applicant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mpls_group_applicant_attendances_applicant_id_foreign")
  users                users?               @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mpls_group_applicant_attendances_created_by_foreign")
  mpls_group           mpls_group?          @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mpls_group_applicant_attendances_group_id_foreign")
  academic_period      academic_period      @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mpls_group_applicant_attendances_period_id_foreign")
  schools              schools              @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mpls_group_applicant_attendances_school_id_foreign")
  mpls_dataset         mpls_dataset         @relation(fields: [subject_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mpls_group_applicant_attendances_subject_id_foreign")
}

model mpls_group_journal {
  id           BigInt        @id @default(autoincrement())
  school_id    Int
  group_id     BigInt
  subject_id   Int?
  datetime     DateTime      @db.Timestamp(0)
  notes        String
  created_by   BigInt
  created_at   DateTime?     @db.Timestamp(0)
  updated_at   DateTime?     @db.Timestamp(0)
  users        users         @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mpls_group_journal_created_by_foreign")
  mpls_group   mpls_group    @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mpls_group_journal_group_id_foreign")
  schools      schools       @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mpls_group_journal_school_id_foreign")
  mpls_dataset mpls_dataset? @relation(fields: [subject_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mpls_group_journal_subject_id_foreign")
}

model notification_logs {
  id             String    @id @db.Uuid
  process_id     String    @db.Uuid
  school_id      Int?
  channel        String    @db.VarChar(50)
  source         String    @db.VarChar(255)
  sender         String    @db.VarChar(100)
  receiver       String    @db.VarChar(100)
  content        String
  sent_status    String    @default("rto") @db.VarChar(20)
  resp_status    String    @default("pending") @db.VarChar(50)
  resp_id        String?   @db.VarChar(100)
  channel_status String?   @db.VarChar(50)
  type           String    @default("system") @db.VarChar(50)
  requested_at   DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
  deleted_at     DateTime? @db.Timestamp(0)
  schools        schools?  @relation(fields: [school_id], references: [id], onDelete: Restrict, map: "notification_logs_school_id_foreign")

  @@index([channel, sender], map: "notification_logs_channel_sender_index")
}

model notification_role {
  id          Int       @id @default(autoincrement())
  channel     String    @db.VarChar(255)
  slug        String    @db.VarChar(255)
  name        String    @db.VarChar(255)
  is_personal Boolean
  is_group    Boolean
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model notification_school_role {
  school_id  Int?
  slug       String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@ignore
}

model notification_whatsapp {
  id               String    @id @default(dbgenerated("nextval('notification_whatsapp_id_seq'::regclass)")) @db.VarChar(64)
  type             String?   @db.VarChar(255)
  source           String    @default("direct") @db.VarChar(255)
  school_id        Int?
  notifable_id     BigInt
  data             String
  key              String?   @db.VarChar(255)
  receiver         String?   @db.VarChar(255)
  message_id       String    @default("0") @db.VarChar(255)
  response         String?
  response_message String?
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  process_id       String?   @db.Uuid
  users            users     @relation(fields: [notifable_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "notification_whatsapp_notifable_id_foreign")
  schools          schools?  @relation(fields: [school_id], references: [id], onUpdate: NoAction, map: "notification_whatsapp_school_id_foreign")

  @@index([key], map: "notification_whatsapp_key_index")
  @@index([receiver], map: "notification_whatsapp_receiver_index")
  @@index([response], map: "notification_whatsapp_response_index")
  @@index([type, notifable_id, data], map: "notification_whatsapp_type_notifable_id_data_index")
}

model notification_woowa {
  id         String    @id @db.VarChar(64)
  school_id  Int?
  type       String?   @db.VarChar(255)
  status     String?   @db.VarChar(255)
  trx_date   DateTime  @db.Timestamp(0)
  receiver   String?   @db.VarChar(255)
  message_id String    @default("0") @db.VarChar(255)
  data       String
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  schools    schools?  @relation(fields: [school_id], references: [id], onUpdate: NoAction, map: "notification_woowa_school_id_foreign")

  @@index([receiver], map: "notification_woowa_receiver_index")
  @@index([type, status, data], map: "notification_woowa_type_status_data_index")
}

model notifications {
  id              String    @id(map: "notifications_id") @db.Uuid
  type            String    @db.VarChar(255)
  notifiable_id   BigInt
  notifiable_type String    @db.VarChar(255)
  data            String
  read_at         DateTime? @db.Timestamp(0)
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
  school_id       Int?
  broadcast_batch Int?

  @@index([notifiable_id], map: "notifiable_type")
}

model oauth_access_tokens {
  id         String    @id @default(dbgenerated("nextval('oauth_access_tokens_id_seq'::regclass)")) @db.VarChar(100)
  user_id    Int?
  client_id  Int
  name       String?   @db.VarChar(255)
  scopes     String?
  revoked    Boolean
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  expires_at DateTime? @db.Timestamp(0)

  @@index([user_id], map: "oauth_access_tokens_user_id_index")
}

model oauth_auth_codes {
  id         String    @id @db.VarChar(100)
  user_id    Int
  client_id  Int
  scopes     String?
  revoked    Boolean
  expires_at DateTime? @db.Timestamp(0)
}

model oauth_clients {
  id                     Int       @id @default(autoincrement())
  user_id                Int?
  name                   String    @db.VarChar(255)
  secret                 String    @db.VarChar(100)
  redirect               String
  personal_access_client Boolean
  password_client        Boolean
  revoked                Boolean
  created_at             DateTime? @db.Timestamp(0)
  updated_at             DateTime? @db.Timestamp(0)
  key                    String?   @unique(map: "oauth_clients_key_unique") @db.VarChar(255)

  @@index([user_id], map: "oauth_clients_user_id_index")
}

model oauth_personal_access_clients {
  id         Int       @id @default(autoincrement())
  client_id  Int
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([client_id], map: "oauth_personal_access_clients_client_id_index")
}

model oauth_refresh_tokens {
  id              String    @id @default(dbgenerated("nextval('oauth_refresh_tokens_id_seq'::regclass)")) @db.VarChar(100)
  access_token_id String    @db.VarChar(100)
  revoked         Boolean
  expires_at      DateTime? @db.Timestamp(0)

  @@index([access_token_id], map: "oauth_refresh_tokens_access_token_id_index")
}

model oauth_rotate_tokens {
  id         String    @id @db.Uuid
  client_id  Int
  key        String    @db.VarChar(255)
  started_at DateTime  @db.Timestamp(0)
  expires_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  is_fixed   Boolean   @default(false)
}

model organizations {
  id                           BigInt                         @id @default(autoincrement())
  name                         String                         @db.VarChar(150)
  code                         String                         @db.VarChar(50)
  type                         String                         @db.VarChar(255)
  description                  String?                        @db.VarChar(255)
  geo_id                       Int?
  geo_type                     String?                        @db.VarChar(255)
  order                        Int                            @default(0)
  parent                       Int?
  depth                        Int                            @default(0)
  left                         Int                            @default(0)
  right                        Int                            @default(1)
  created_at                   DateTime?                      @db.Timestamp(0)
  updated_at                   DateTime?                      @db.Timestamp(0)
  deleted_at                   DateTime?                      @db.Timestamp(0)
  eoffice_disposition          eoffice_disposition[]
  eoffice_disposition_action   eoffice_disposition_action[]
  eoffice_documents            eoffice_documents[]
  eoffice_documents_action     eoffice_documents_action[]
  eoffice_documents_categories eoffice_documents_categories[]
  eoffice_meetings_notes       eoffice_meetings_notes[]
  finance_chart_of_accounts    finance_chart_of_accounts[]
  schools                      schools[]
  user_organizations           user_organizations[]           @ignore

  @@index([geo_id], map: "geo_type")
  @@index([code], map: "organizations_code_index")
  @@index([name], map: "organizations_name_index")
  @@index([type], map: "organizations_type_index")
}

model p_migration {
  version    String @id @db.VarChar(180)
  apply_time Int?
}

model p_role {
  id               Int           @id @default(autoincrement())
  role_name        String        @db.VarChar(255)
  role_description String        @db.VarChar(255)
  menu_path        String?       @db.VarChar(255)
  home_url         String?       @db.VarChar(255)
  repo_path        String?       @db.VarChar(255)
  p_user_role      p_user_role[]
}

model p_user {
  id          Int           @id @default(autoincrement())
  email       String        @db.VarChar(255)
  username    String        @db.VarChar(255)
  password    String        @db.VarChar(255)
  last_login  DateTime?     @db.Timestamp(6)
  is_deleted  Boolean?
  p_user_role p_user_role[]
}

model p_user_role {
  id              Int     @id @default(autoincrement())
  user_id         Int
  role_id         Int
  is_default_role String? @default("No") @db.VarChar(255)
  p_role          p_role  @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "p_role_has_p_user")
  p_user          p_user  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "p_user_has_p_role")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model package_details {
  package_id       Int
  package_itr_id   Int
  package_master   package_master   @relation(fields: [package_id], references: [id], map: "package_details_package_id_foreign")
  package_internal package_internal @relation(fields: [package_itr_id], references: [id], map: "package_details_package_itr_id_foreign")

  @@index([package_id], map: "package_details_package_id_index")
  @@index([package_itr_id], map: "package_details_package_itr_id_index")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model package_histories {
  school_id      Int
  package_id     Int
  status         String         @default("open") @db.VarChar(50)
  invoice_id     BigInt
  payment_id     BigInt
  additional     Json?
  created_at     DateTime?      @db.Timestamp(0)
  updated_at     DateTime?      @db.Timestamp(0)
  deleted_at     DateTime?      @db.Timestamp(0)
  deleted_by     BigInt?
  users          users?         @relation(fields: [deleted_by], references: [id], onDelete: Restrict, map: "package_histories_deleted_by_foreign")
  package_master package_master @relation(fields: [package_id], references: [id], map: "package_histories_package_id_foreign")
  schools        schools        @relation(fields: [school_id], references: [id], map: "package_histories_school_id_foreign")

  @@ignore
}

model package_internal {
  id              Int               @id @default(autoincrement())
  slug            String            @unique(map: "package_internal_slug_unique") @db.VarChar(255)
  name            String            @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  deleted_at      DateTime?         @db.Timestamp(0)
  package_details package_details[] @ignore

  @@index([slug], map: "package_internal_slug_index")
}

model package_master {
  id                Int                 @id @default(autoincrement())
  type              String              @default("package") @db.VarChar(20)
  name              String              @db.VarChar(255)
  price             Decimal             @default(0) @db.Decimal(10, 2)
  active            Boolean             @default(true)
  revision          Int                 @default(0) @db.SmallInt
  created_at        DateTime?           @db.Timestamp(0)
  updated_at        DateTime?           @db.Timestamp(0)
  deleted_at        DateTime?           @db.Timestamp(0)
  package_details   package_details[]   @ignore
  package_histories package_histories[] @ignore
  package_subscribe package_subscribe[] @ignore

  @@unique([type, name, revision], map: "package_master_type_name_revision_unique")
  @@index([type, name], map: "package_master_type_name_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model package_subscribe {
  school_id                                   Int
  package_id                                  Int
  price                                       Decimal        @default(0) @db.Decimal(10, 2)
  active                                      Boolean        @default(true)
  notes                                       String?
  created_at                                  DateTime?      @db.Timestamp(0)
  updated_at                                  DateTime?      @db.Timestamp(0)
  subscribe_by                                BigInt?
  deleted_at                                  DateTime?      @db.Timestamp(0)
  deleted_by                                  BigInt?
  users_package_subscribe_deleted_byTousers   users?         @relation("package_subscribe_deleted_byTousers", fields: [deleted_by], references: [id], onDelete: Restrict, map: "package_subscribe_deleted_by_foreign")
  package_master                              package_master @relation(fields: [package_id], references: [id], map: "package_subscribe_package_id_foreign")
  schools                                     schools        @relation(fields: [school_id], references: [id], map: "package_subscribe_school_id_foreign")
  users_package_subscribe_subscribe_byTousers users?         @relation("package_subscribe_subscribe_byTousers", fields: [subscribe_by], references: [id], onDelete: Restrict, map: "package_subscribe_subscribe_by_foreign")

  @@index([school_id, package_id], map: "package_subscribe_school_id_package_id_index")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@index([token], map: "password_resets_token_index")
  @@ignore
}

model people {
  id                                                  BigInt                       @id @default(autoincrement())
  school_id                                           Int?
  nik                                                 String?                      @db.VarChar(255)
  no_akta                                             String?                      @db.VarChar(255)
  title                                               String?                      @db.VarChar(255)
  title_end                                           String?                      @db.VarChar(255)
  name                                                String                       @db.VarChar(255)
  nickname                                            String?                      @db.VarChar(255)
  portrait                                            String?                      @db.VarChar(255)
  gender                                              String                       @default("other") @db.VarChar(255)
  birthplace                                          String?                      @db.VarChar(255)
  birthday                                            DateTime?                    @db.Date
  religion                                            String                       @default("other") @db.VarChar(255)
  nationality                                         String                       @default("ID") @db.VarChar(255)
  life_condition                                      String                       @default("alive") @db.VarChar(255)
  created_at                                          DateTime?                    @db.Timestamp(0)
  updated_at                                          DateTime?                    @db.Timestamp(0)
  no_kk                                               String?                      @db.VarChar(255)
  marital_status                                      String?                      @db.VarChar(255)
  schools                                             schools?                     @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "people_school_id_foreign")
  academic_parents                                    academic_parents[]
  academic_students                                   academic_students[]
  canteen_staff                                       canteen_staff[]
  canteen_tenant_staff                                canteen_tenant_staff[]
  finance_summary_receivable                          finance_summary_receivable[]
  human_resource_staff                                human_resource_staff[]
  people_addresses                                    people_addresses[]           @ignore
  people_data                                         people_data[]                @ignore
  people_educations                                   people_educations[]
  people_emails                                       people_emails[]              @ignore
  people_health                                       people_health[]
  people_phones                                       people_phones[]              @ignore
  people_relations_peopleTopeople_relations_source_id people_relations[]           @relation("peopleTopeople_relations_source_id") @ignore
  people_relations_peopleTopeople_relations_target_id people_relations[]           @relation("peopleTopeople_relations_target_id") @ignore
  people_work                                         people_work[]
  users                                               users[]

  @@index([gender], map: "people_gender_index")
  @@index([nik], map: "people_nik_index")
  @@index([religion], map: "people_religion_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model people_addresses {
  person_id    BigInt
  name         String  @db.VarChar(255)
  address      String?
  rt_rw        String?
  sub_district String?
  district     String?
  city         String? @db.VarChar(255)
  city_id      Int?
  province     String? @db.VarChar(255)
  zip_code     String? @db.VarChar(255)
  country      String? @db.VarChar(255)
  phone        String? @db.VarChar(255)
  people       people  @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "people_addresses_person_id_foreign")

  @@index([person_id], map: "name")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model people_data {
  person_id BigInt
  key       String  @db.VarChar(255)
  value     String?
  type      String  @default("string") @db.VarChar(255)
  autoload  Boolean @default(false)
  people    people  @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "people_data_person_id_foreign")

  @@index([person_id], map: "key")
  @@index([key], map: "people_data_key_index")
  @@index([type], map: "people_data_type_index")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model people_documents {
  attachment_id   BigInt
  attachable_id   BigInt
  attachable_type String @db.VarChar(255)

  @@ignore
}

model people_educations {
  id                 Int       @id @default(autoincrement())
  person_id          BigInt
  type               String    @default("formal") @db.VarChar(255)
  level              String    @default("other") @db.VarChar(255)
  concentrations     String?   @db.VarChar(255)
  name               String    @db.VarChar(255)
  address            String?   @db.VarChar(255)
  city               String?   @db.VarChar(255)
  city_id            Int?
  year_entry         Int?      @db.SmallInt
  year_graduate      Int?      @db.SmallInt
  no_registration_un String?   @db.VarChar(255)
  skhun_number       String?   @db.VarChar(255)
  skhun_date         DateTime? @db.Date
  skhune_gpa         Decimal   @default(0) @db.Decimal(6, 2)
  certificate_number String?   @db.VarChar(255)
  certificate_date   DateTime? @db.Date
  website            String?   @db.VarChar(255)
  description        String?
  order              Int?      @db.SmallInt
  people             people    @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "people_educations_person_id_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model people_emails {
  person_id   BigInt
  email       String  @db.VarChar(255)
  is_primary  Boolean @default(false)
  is_verified Boolean @default(false)
  order       Int?    @db.SmallInt
  people      people  @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "people_emails_person_id_foreign")

  @@index([person_id], map: "email")
  @@ignore
}

model people_health {
  id                     BigInt  @id @default(autoincrement())
  person_id              BigInt
  blood_group            String  @default("o") @db.VarChar(255)
  weight                 String? @db.VarChar(255)
  height                 String? @db.VarChar(255)
  disease                String? @db.VarChar(255)
  physical_abnormalities String? @db.VarChar(255)
  chronic_illness        String? @db.VarChar(255)
  allergy                String? @db.VarChar(255)
  vision                 String? @db.VarChar(255)
  hearing                String? @db.VarChar(255)
  people                 people  @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "people_health_person_id_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model people_phones {
  person_id    BigInt
  country_code String  @default("+62") @db.VarChar(255)
  phone        String  @db.VarChar(255)
  is_primary   Boolean @default(false)
  is_verified  Boolean @default(false)
  order        Int?    @db.SmallInt
  people       people  @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "people_phones_person_id_foreign")

  @@index([person_id], map: "phone")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model people_relations {
  source_id                                 BigInt
  target_id                                 BigInt
  type                                      String @default("related") @db.VarChar(255)
  people_peopleTopeople_relations_source_id people @relation("peopleTopeople_relations_source_id", fields: [source_id], references: [id], onUpdate: NoAction)
  people_peopleTopeople_relations_target_id people @relation("peopleTopeople_relations_target_id", fields: [target_id], references: [id], onUpdate: NoAction)

  @@ignore
}

model people_signs {
  id                                                      BigInt       @id @default(autoincrement())
  school_id                                               Int
  user_id                                                 BigInt
  name                                                    String       @db.VarChar(255)
  position                                                String?      @db.VarChar(255)
  attachment_id                                           BigInt?
  attachment_alt_id                                       BigInt?
  created_at                                              DateTime?    @db.Timestamp(0)
  updated_at                                              DateTime?    @db.Timestamp(0)
  deleted_at                                              DateTime?    @db.Timestamp(0)
  attachments_attachmentsTopeople_signs_attachment_alt_id attachments? @relation("attachmentsTopeople_signs_attachment_alt_id", fields: [attachment_alt_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "people_signs_attachment_alt_id_foreign")
  attachments_attachmentsTopeople_signs_attachment_id     attachments? @relation("attachmentsTopeople_signs_attachment_id", fields: [attachment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "people_signs_attachment_id_foreign")
  schools                                                 schools      @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "people_signs_school_id_foreign")
  users                                                   users        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "people_signs_user_id_foreign")
}

model people_work {
  id              BigInt    @id @default(autoincrement())
  person_id       BigInt
  company         String    @db.VarChar(255)
  department      String?   @db.VarChar(255)
  position        String?   @db.VarChar(255)
  address         String?   @db.VarChar(255)
  city            String?   @db.VarChar(255)
  city_id         Int?
  start_work      DateTime? @db.Timestamp(0)
  end_work        DateTime? @db.Timestamp(0)
  currently_worku Int?      @db.SmallInt
  website         String?   @db.VarChar(255)
  description     String?
  order           Int?      @db.SmallInt
  people          people    @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "people_work_person_id_foreign")
}

model permission_role {
  id            Int         @id @default(autoincrement())
  permission_id Int
  role_id       Int?
  granted       Boolean     @default(true)
  created_at    DateTime?   @db.Timestamp(0)
  updated_at    DateTime?   @db.Timestamp(0)
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "permission_role_permission_id_foreign")
  roles         roles?      @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "permission_role_role_id_foreign")

  @@index([permission_id], map: "permission_role_permission_id_index")
  @@index([role_id], map: "permission_role_role_id_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model permission_user {
  id            Int      @default(autoincrement())
  user_id       Int?
  permission_id Int?
  granted       Boolean?
  created_at    DateTime @db.Timestamp(6)
  updated_at    DateTime @db.Timestamp(6)

  @@ignore
}

model permissions {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  slug            String            @db.VarChar(255)
  description     String?           @db.VarChar(255)
  model           String?           @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  permission_role permission_role[]

  @@index([slug], map: "permissions_slug_index")
}

model posts {
  id             BigInt           @id @default(autoincrement())
  author_id      BigInt
  type           String?          @db.VarChar(255)
  title          String           @db.VarChar(255)
  slug           String           @db.VarChar(255)
  content        String
  online         Boolean          @default(true)
  options        String?          @db.VarChar(255)
  publish_on     DateTime?        @db.Timestamp(0)
  created_at     DateTime?        @db.Timestamp(0)
  updated_at     DateTime?        @db.Timestamp(0)
  users          users            @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "posts_author_id_foreign")
  posts_category posts_category[] @ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model posts_category {
  post_id         BigInt
  category_id     BigInt
  classifications classifications @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "posts_category_category_id_foreign")
  posts           posts           @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "posts_category_post_id_foreign")

  @@ignore
}

model posts_dataset {
  id             BigInt    @id @default(autoincrement())
  order          Int       @default(0)
  parent         Int?
  depth          Int       @default(0)
  right          Int       @default(0)
  left           Int       @default(1)
  image          String?   @db.VarChar(255)
  code           String?   @db.VarChar(255)
  code2          String?   @db.VarChar(255)
  name           String    @db.VarChar(255)
  slug           String?   @db.VarChar(255)
  classification String?   @db.VarChar(255)
  description    String?
  options        String?
  sorting        Int       @default(0)
  is_active      Boolean   @default(true)
  type           String    @default("default") @db.VarChar(255)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
  deleted_at     DateTime? @db.Timestamp(0)
}

model posts_tags {
  id         BigInt    @id @default(autoincrement())
  title      String    @db.VarChar(255)
  slug       String    @db.VarChar(255)
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model role_user {
  id         Int       @id @default(autoincrement())
  role_id    Int
  user_id    BigInt
  granted    Boolean   @default(true)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  roles      roles     @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_user_role_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_user_user_id_foreign")

  @@index([role_id], map: "role_user_role_id_index")
  @@index([user_id], map: "role_user_user_id_index")
}

model roles {
  id              Int               @id @default(autoincrement())
  school_id       Int?
  name            String            @db.VarChar(255)
  slug            String            @unique(map: "roles_slug_unique") @db.VarChar(255)
  description     String?           @db.VarChar(255)
  parent_id       Int?
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  roles           roles?            @relation("rolesToroles_parent_id", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "roles_parent_id_foreign")
  schools         schools?          @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "roles_school_id_foreign")
  permission_role permission_role[]
  role_user       role_user[]
  other_roles     roles[]           @relation("rolesToroles_parent_id")

  @@index([name], map: "roles_name_index")
  @@index([slug], map: "roles_slug_index")
}

model scan_history {
  id         BigInt    @id @default(autoincrement())
  sn_card    String?   @db.VarChar(64)
  type       String?   @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  is_read    Boolean?
}

model school_data {
  school_id  Int?
  key        String    @db.VarChar(255)
  value      String?
  type       String    @default("string") @db.VarChar(255)
  autoload   Boolean   @default(false)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  id         BigInt    @id @default(autoincrement())
  schools    schools?  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "school_data_school_id_foreign")

  @@unique([school_id, key], map: "school_data_school_id_key")
  @@index([autoload], map: "school_data_autoload_index")
  @@index([key], map: "school_data_key_index")
  @@index([type], map: "school_data_type_index")
}

model school_department {
  id         BigInt    @id @default(autoincrement())
  school_id  Int
  order      Int       @default(0)
  parent     Int?
  depth      Int       @default(0)
  right      Int       @default(0)
  left       Int       @default(1)
  code       String?   @db.VarChar(100)
  name       String    @db.VarChar(255)
  notes      String?
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  schools    schools   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "school_department_school_id_foreign")
}

model school_department_position {
  id            BigInt    @id @default(autoincrement())
  school_id     Int
  department_id BigInt
  order         Int       @default(0)
  parent        Int?
  depth         Int       @default(0)
  right         Int       @default(0)
  left          Int       @default(1)
  code          String?   @db.VarChar(100)
  name          String    @db.VarChar(255)
  notes         String?
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  deleted_at    DateTime? @db.Timestamp(0)
  schools       schools   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "school_department_position_school_id_foreign")
}

model school_structure {
  id           Int       @id @default(autoincrement())
  school_id    Int?
  code         String    @unique(map: "school_structure_code_unique") @db.VarChar(255)
  name         String    @db.VarChar(255)
  description  String?
  order        Int       @default(0)
  parent       Int?
  lft          Int       @default(0)
  rgt          Int       @default(0)
  depth        Int       @default(0)
  is_published Boolean   @default(true)
  deleted_at   DateTime? @db.Timestamp(0)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  schools      schools?  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "school_structure_school_id_foreign")

  @@index([code], map: "school_structure_code_index")
  @@index([order], map: "school_structure_order_index")
  @@index([parent], map: "school_structure_parent_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model school_subscribe_service {
  school_id  Int?
  module     String    @db.VarChar(255)
  enable     Boolean   @default(false)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  schools    schools?  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "school_subscribe_service_school_id_foreign")

  @@ignore
}

model schools {
  id                                                             Int                                                    @id @default(autoincrement())
  name                                                           String                                                 @db.VarChar(255)
  email                                                          String?                                                @unique(map: "schools_email_unique") @db.VarChar(255)
  nsss                                                           String?                                                @db.VarChar(255)
  npsn                                                           String?                                                @db.VarChar(50)
  nsp                                                            String?                                                @db.VarChar(50)
  un_code                                                        String?                                                @db.VarChar(255)
  kd_rayon                                                       String?                                                @db.VarChar(255)
  phone                                                          String?                                                @db.VarChar(255)
  kode_pos                                                       String?                                                @db.VarChar(10)
  akreditasi                                                     String?                                                @db.VarChar(2)
  headmaster_name                                                String?                                                @db.VarChar(100)
  headmaster_nip                                                 String?                                                @db.VarChar(50)
  headmaster_phone                                               String?                                                @db.VarChar(20)
  main_domain                                                    String?                                                @unique(map: "schools_main_domain_unique") @db.VarChar(50)
  ppdb_domain                                                    String?                                                @unique(map: "schools_ppdb_domain_unique") @db.VarChar(50)
  address                                                        String?
  school_status                                                  String?                                                @db.VarChar(255)
  subdistrict_id                                                 Int?
  district_id                                                    Int?
  organization_id                                                BigInt?
  deleted_at                                                     DateTime?                                              @db.Timestamp(0)
  created_at                                                     DateTime?                                              @db.Timestamp(0)
  updated_at                                                     DateTime?                                              @db.Timestamp(0)
  curriculum_id                                                  Int?
  level                                                          String?                                                @db.VarChar(255)
  kd_sek                                                         String?                                                @db.VarChar(20)
  kd_prop                                                        String?                                                @db.VarChar(20)
  provide_by                                                     String?                                                @db.VarChar(20)
  va_code                                                        String?                                                @db.VarChar(20)
  packet                                                         String?                                                @db.VarChar(20)
  fcm_key                                                        String?                                                @db.VarChar(155)
  academic_curriculum_academic_curriculumToschools_curriculum_id academic_curriculum?                                   @relation("academic_curriculumToschools_curriculum_id", fields: [curriculum_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "schools_curriculum_id_foreign")
  geo_district                                                   geo_district?                                          @relation(fields: [district_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "schools_district_id_foreign")
  organizations                                                  organizations?                                         @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "schools_organization_id_foreign")
  geo_subdistrict                                                geo_subdistrict?                                       @relation(fields: [subdistrict_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "schools_subdistrict_id_foreign")
  academic_agendas                                               academic_agendas[]
  academic_assignment                                            academic_assignment[]
  academic_attendances                                           academic_attendances[]
  academic_classes                                               academic_classes[]
  academic_classroom_journal                                     academic_classroom_journal[]
  academic_classrooms                                            academic_classrooms[]
  academic_committee                                             academic_committee[]
  academic_committee_structure                                   academic_committee_structure[]
  academic_committee_users                                       academic_committee_users[]
  academic_course_assessment_competence_basic_formulas           academic_course_assessment_competence_basic_formulas[]
  academic_course_assessment_competence_formulas                 academic_course_assessment_competence_formulas[]
  academic_course_assessment_notes_default                       academic_course_assessment_notes_default[]
  academic_course_assessment_types                               academic_course_assessment_types[]
  academic_course_assessments                                    academic_course_assessments[]
  academic_course_schedules                                      academic_course_schedules[]
  academic_courses                                               academic_courses[]
  academic_courses_teachers                                      academic_courses_teachers[]
  academic_curriculum_academic_curriculum_school_idToschools     academic_curriculum[]                                  @relation("academic_curriculum_school_idToschools")
  academic_dataset                                               academic_dataset[]
  academic_period                                                academic_period[]
  academic_predicates                                            academic_predicates[]
  academic_report_card                                           academic_report_card[]
  academic_school_hours                                          academic_school_hours[]
  academic_student_course_attendances                            academic_student_course_attendances[]
  academic_student_courses                                       academic_student_courses[]
  academic_student_report_card_details                           academic_student_report_card_details[]
  academic_student_report_cards                                  academic_student_report_cards[]
  academic_students                                              academic_students[]
  academic_teacher_course_attendances                            academic_teacher_course_attendances[]
  academic_terms                                                 academic_terms[]
  academic_user_permit                                           academic_user_permit[]
  admission_applicant_pemetaan                                   admission_applicant_pemetaan[]
  admission_applicants                                           admission_applicants[]
  admission_pemetaan                                             admission_pemetaan[]
  admission_phases                                               admission_phases[]
  asset_circulations                                             asset_circulations[]
  asset_dataset                                                  asset_dataset[]
  asset_item                                                     asset_item[]
  asset_item_metadata                                            asset_item_metadata[]
  asset_land_building                                            asset_land_building[]
  asset_master_item                                              asset_master_item[]
  asset_rooms                                                    asset_rooms[]
  asset_supplier                                                 asset_supplier[]
  attachment_logs                                                attachment_logs[]                                      @ignore
  boardings                                                      boardings[]
  canteen_dataset                                                canteen_dataset[]
  canteen_school                                                 canteen_school[]
  canteen_transaction_details                                    canteen_transaction_details[]
  canteen_transactions                                           canteen_transactions[]
  cashless_card                                                  cashless_card[]
  cbt_quizzes                                                    cbt_quizzes[]
  cbt_session_tokens                                             cbt_session_tokens[]
  classifications                                                classifications[]
  clinic_medical_record                                          clinic_medical_record[]
  cms_article                                                    cms_article[]
  cms_article_category                                           cms_article_category[]                                 @ignore
  cms_article_lang                                               cms_article_lang[]
  cms_article_medias                                             cms_article_medias[]
  cms_category_lang                                              cms_category_lang[]
  cms_fields                                                     cms_fields[]
  cms_fields_content                                             cms_fields_content[]                                   @ignore
  cms_menu                                                       cms_menu[]
  cms_menu_lang                                                  cms_menu_lang[]
  cms_page                                                       cms_page[]
  cms_page_lang                                                  cms_page_lang[]
  cms_page_medias                                                cms_page_medias[]
  cms_tags                                                       cms_tags[]
  configurations                                                 configurations[]
  eoffice_disposition                                            eoffice_disposition[]
  eoffice_disposition_action                                     eoffice_disposition_action[]
  eoffice_document_participants                                  eoffice_document_participants[]
  eoffice_documents                                              eoffice_documents[]
  eoffice_documents_action                                       eoffice_documents_action[]
  eoffice_documents_categories                                   eoffice_documents_categories[]
  eoffice_events                                                 eoffice_events[]
  eoffice_meetings_notes                                         eoffice_meetings_notes[]
  finance_account_payables                                       finance_account_payables[]
  finance_account_receivables                                    finance_account_receivables[]
  finance_bank_accounts                                          finance_bank_accounts[]
  finance_bank_payments                                          finance_bank_payments[]
  finance_chart_of_account_balances                              finance_chart_of_account_balances[]
  finance_chart_of_accounts                                      finance_chart_of_accounts[]
  finance_costs                                                  finance_costs[]
  finance_dataset                                                finance_dataset[]
  finance_discount_receivables                                   finance_discount_receivables[]                         @ignore
  finance_discounts                                              finance_discounts[]
  finance_ewallet_mutation                                       finance_ewallet_mutation[]
  finance_general_ledger                                         finance_general_ledger[]
  finance_general_ledger_detail                                  finance_general_ledger_detail[]
  finance_journal_entries                                        finance_journal_entries[]
  finance_journal_entries_detail                                 finance_journal_entries_detail[]
  finance_rapbs                                                  finance_rapbs[]
  finance_rapbs_activities                                       finance_rapbs_activities[]
  finance_school_va                                              finance_school_va[]
  finance_staff_slips                                            finance_staff_slips[]
  finance_summary_monthly_revenue                                finance_summary_monthly_revenue[]
  finance_summary_receivable                                     finance_summary_receivable[]
  finance_transaction_details                                    finance_transaction_details[]
  finance_transactions                                           finance_transactions[]
  finance_transactions_tokopedia                                 finance_transactions_tokopedia[]
  frontoffice_dataset                                            frontoffice_dataset[]
  frontoffice_notice_board                                       frontoffice_notice_board[]
  frontoffice_visitors_book                                      frontoffice_visitors_book[]
  hr_department                                                  hr_department[]
  hr_group_level                                                 hr_group_level[]
  hr_journal_attachment                                          hr_journal_attachment[]                                @ignore
  hr_pay_salary                                                  hr_pay_salary[]
  hr_payroll_account                                             hr_payroll_account[]
  hr_payroll_slip_details                                        hr_payroll_slip_details[]
  hr_payroll_slips                                               hr_payroll_slips[]
  hr_position                                                    hr_position[]
  hr_salary_base                                                 hr_salary_base[]
  hr_staff_attendances                                           hr_staff_attendances[]
  hr_staff_leave                                                 hr_staff_leave[]
  hr_staff_salary                                                hr_staff_salary[]
  human_resource_staff                                           human_resource_staff[]
  lms_dataset                                                    lms_dataset[]
  lms_forum_conversations                                        lms_forum_conversations[]
  lms_forum_convertation_attachments                             lms_forum_convertation_attachments[]                   @ignore
  lms_forums                                                     lms_forums[]
  lms_lesson_classroom                                           lms_lesson_classroom[]
  lms_lesson_material_logs                                       lms_lesson_material_logs[]                             @ignore
  lms_lessons                                                    lms_lessons[]
  message_whatsapp                                               message_whatsapp[]
  mpls_dataset                                                   mpls_dataset[]
  mpls_group                                                     mpls_group[]
  mpls_group_applicant_attendances                               mpls_group_applicant_attendances[]
  mpls_group_journal                                             mpls_group_journal[]
  notification_logs                                              notification_logs[]
  notification_whatsapp                                          notification_whatsapp[]
  notification_woowa                                             notification_woowa[]
  package_histories                                              package_histories[]                                    @ignore
  package_subscribe                                              package_subscribe[]                                    @ignore
  people                                                         people[]
  people_signs                                                   people_signs[]
  roles                                                          roles[]
  school_data                                                    school_data[]
  school_department                                              school_department[]
  school_department_position                                     school_department_position[]
  school_structure                                               school_structure[]
  school_subscribe_service                                       school_subscribe_service[]                             @ignore
  studentship_achievement_student                                studentship_achievement_student[]
  studentship_attachment                                         studentship_attachment[]                               @ignore
  studentship_case_records                                       studentship_case_records[]
  studentship_item_findings                                      studentship_item_findings[]
  studentship_item_lost                                          studentship_item_lost[]
  studentship_offense                                            studentship_offense[]
  studentship_student_meal                                       studentship_student_meal[]
  studentship_student_medical                                    studentship_student_medical[]
  studentship_tahfidz                                            studentship_tahfidz[]
  suggest_form                                                   suggest_form[]
  users                                                          users[]
  wow                                                            wow[]

  @@unique([main_domain, va_code], map: "schools_main_domain_va_code")
  @@index([email], map: "schools_email_index")
  @@index([name], map: "schools_name_index")
  @@index([npsn], map: "schools_npsn_index")
  @@index([phone], map: "schools_phone_index")
  @@index([kd_rayon], map: "schools_rayon_code_index")
  @@index([school_status], map: "schools_school_status_index")
  @@index([un_code], map: "schools_un_code_index")
}

model sessions {
  id            String  @unique(map: "sessions_id_unique") @default(dbgenerated("nextval('sessions_id_seq'::regclass)")) @db.VarChar(255)
  user_id       Int?
  ip_address    String? @db.VarChar(45)
  user_agent    String?
  payload       String
  last_activity Int
}

model studentship_achievement_student {
  id                BigInt            @id @default(autoincrement())
  school_id         Int?
  period_id         Int
  student_id        BigInt
  year              String            @db.VarChar(255)
  name              String            @db.VarChar(255)
  type              String            @db.VarChar(255)
  level             String?           @db.VarChar(255)
  organizer         String?           @db.VarChar(255)
  notes             String?
  created_at        DateTime?         @db.Timestamp(0)
  updated_at        DateTime?         @db.Timestamp(0)
  poin              Int?
  schools           schools?          @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "studentship_achievement_student_school_id_foreign")
  academic_students academic_students @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "studentship_achievement_student_student_id_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model studentship_attachment {
  school_id       Int?
  attachment_id   BigInt
  attachable_id   BigInt
  attachable_type String   @db.VarChar(255)
  schools         schools? @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "studentship_attachment_school_id_foreign")

  @@ignore
}

model studentship_case_offenders {
  id                       BigInt                   @id @default(autoincrement())
  case_id                  BigInt
  student_id               BigInt
  studentship_case_records studentship_case_records @relation(fields: [case_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "studentship_case_offenders_case_id_foreign")
  academic_students        academic_students        @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "studentship_case_offenders_student_id_foreign")
}

model studentship_case_offense {
  id                       BigInt                   @id @default(autoincrement())
  case_id                  BigInt
  offense_id               Int
  studentship_case_records studentship_case_records @relation(fields: [case_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "studentship_case_offense_case_id_foreign")
  studentship_offense      studentship_offense      @relation(fields: [offense_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "studentship_case_offense_offense_id_foreign")
}

model studentship_case_records {
  id                         BigInt                       @id @default(autoincrement())
  school_id                  Int?
  period_id                  Int
  performer_id               BigInt
  incident_date              DateTime                     @db.Timestamp(0)
  scope                      Decimal                      @default(1) @db.Decimal(2, 0)
  chronology_of_event        String
  solution                   String?
  follow_up_to               String                       @db.VarChar(255)
  notes                      String?
  status                     String                       @default("open") @db.VarChar(255)
  created_at                 DateTime?                    @db.Timestamp(0)
  updated_at                 DateTime?                    @db.Timestamp(0)
  is_private                 Boolean?                     @default(false)
  allowed_for                BigInt[]
  users                      users                        @relation(fields: [performer_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "studentship_case_records_performer_id_foreign")
  schools                    schools?                     @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "studentship_case_records_school_id_foreign")
  studentship_case_offenders studentship_case_offenders[]
  studentship_case_offense   studentship_case_offense[]
}

model studentship_item_findings {
  id                                                Int       @id @default(autoincrement())
  school_id                                         Int
  name                                              String    @db.VarChar(255)
  description                                       String
  date                                              DateTime? @db.Timestamp(0)
  user_id                                           BigInt
  created_by                                        BigInt
  created_at                                        DateTime? @db.Timestamp(0)
  updated_at                                        DateTime? @db.Timestamp(0)
  users_studentship_item_findings_created_byTousers users     @relation("studentship_item_findings_created_byTousers", fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "studentship_item_findings_created_by_foreign")
  schools                                           schools   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "studentship_item_findings_school_id_foreign")
  users_studentship_item_findings_user_idTousers    users     @relation("studentship_item_findings_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "studentship_item_findings_user_id_foreign")
}

model studentship_item_lost {
  id                                            Int       @id @default(autoincrement())
  school_id                                     Int
  name                                          String    @db.VarChar(255)
  description                                   String
  date                                          DateTime? @db.Timestamp(0)
  user_id                                       BigInt
  created_by                                    BigInt
  created_at                                    DateTime? @db.Timestamp(0)
  updated_at                                    DateTime? @db.Timestamp(0)
  users_studentship_item_lost_created_byTousers users     @relation("studentship_item_lost_created_byTousers", fields: [created_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "studentship_item_lost_created_by_foreign")
  schools                                       schools   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "studentship_item_lost_school_id_foreign")
  users_studentship_item_lost_user_idTousers    users     @relation("studentship_item_lost_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "studentship_item_lost_user_id_foreign")
}

model studentship_offense {
  id                       Int                        @id @default(autoincrement())
  school_id                Int?
  category                 String                     @db.VarChar(255)
  code                     String?                    @db.VarChar(255)
  name                     String                     @db.VarChar(255)
  poin                     String?                    @db.VarChar(255)
  description              String?
  created_at               DateTime?                  @db.Timestamp(0)
  updated_at               DateTime?                  @db.Timestamp(0)
  deleted_at               DateTime?                  @db.Timestamp(0)
  schools                  schools?                   @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "studentship_offense_school_id_foreign")
  studentship_case_offense studentship_case_offense[]
}

model studentship_student_meal {
  id                   Int                  @id @default(autoincrement())
  school_id            Int
  student_id           BigInt
  staff_id             BigInt
  datetime             DateTime             @db.Timestamp(0)
  tenant               String               @db.VarChar(255)
  menu                 String               @db.VarChar(255)
  location             String?              @db.VarChar(255)
  nominal              Decimal              @default(0) @db.Decimal(8, 2)
  notes                String?
  created_at           DateTime?            @db.Timestamp(0)
  updated_at           DateTime?            @db.Timestamp(0)
  schools              schools              @relation(fields: [school_id], references: [id], onUpdate: NoAction)
  human_resource_staff human_resource_staff @relation(fields: [staff_id], references: [id], onUpdate: NoAction)
  academic_students    academic_students    @relation(fields: [student_id], references: [id], onUpdate: NoAction)
}

model studentship_student_medical {
  id                   Int                  @id @default(autoincrement())
  school_id            Int
  student_id           BigInt
  staff_id             BigInt
  datetime             DateTime             @db.Timestamp(0)
  diagnosis            String               @db.VarChar(255)
  action               String               @db.VarChar(255)
  notes                String?
  created_at           DateTime?            @db.Timestamp(0)
  updated_at           DateTime?            @db.Timestamp(0)
  schools              schools              @relation(fields: [school_id], references: [id], onUpdate: NoAction)
  human_resource_staff human_resource_staff @relation(fields: [staff_id], references: [id], onUpdate: NoAction)
  academic_students    academic_students    @relation(fields: [student_id], references: [id], onUpdate: NoAction)
}

model studentship_tahfidz {
  id                Int               @id(map: "studentship_hafidz_pkey") @default(autoincrement())
  term_id           Int?
  student_id        BigInt
  date              DateTime          @db.Timestamp(6)
  surat             String            @db.VarChar(255)
  ayat              String            @db.VarChar(255)
  hadist            String?           @db.VarChar(255)
  created_at        DateTime?         @db.Timestamp(0)
  updated_at        DateTime?         @db.Timestamp(0)
  school_id         Int?
  teacher_id        Int?
  notes             String?
  category          String?           @db.VarChar
  page              String?           @db.VarChar(255)
  schools           schools?          @relation(fields: [school_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  academic_students academic_students @relation(fields: [student_id], references: [id], onUpdate: NoAction)
  academic_terms    academic_terms?   @relation(fields: [term_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
}

model suggest_form {
  id             Int       @id @default(autoincrement())
  school_id      Int
  user_id        BigInt
  type           String?   @db.VarChar(255)
  category       String?   @db.VarChar(255)
  message        String
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
  departement_id BigInt?
  status         String?   @db.VarChar(255)
  schools        schools   @relation(fields: [school_id], references: [id], onUpdate: NoAction)
  users          users     @relation(fields: [user_id], references: [id], onUpdate: NoAction)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model tmp_user_pin {
  school_id Int?
  user_id   Int?
  user_name String? @db.VarChar(100)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model user_organizations {
  user_id         BigInt
  organization_id BigInt
  organizations   organizations @relation(fields: [organization_id], references: [id], onUpdate: NoAction)
  users           users         @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([organization_id], map: "user_organizations_organization_id_index")
  @@index([user_id], map: "user_organizations_user_id_index")
  @@ignore
}

model users {
  id                                                                                          BigInt                                 @id @default(autoincrement())
  cid_id                                                                                      BigInt?
  person_id                                                                                   BigInt?
  school_id                                                                                   Int?
  name                                                                                        String?                                @db.VarChar(255)
  avatar                                                                                      String?                                @db.VarChar(255)
  email                                                                                       String?                                @db.VarChar(255)
  username                                                                                    String                                 @db.VarChar(255)
  phone                                                                                       String?                                @db.VarChar(255)
  is_verified                                                                                 Boolean                                @default(false)
  is_banned                                                                                   Boolean                                @default(false)
  password                                                                                    String?                                @db.VarChar(255)
  token_access                                                                                String?
  token_refresh                                                                               String?
  token_ttl                                                                                   String?                                @db.VarChar(255)
  gcm_id                                                                                      String?                                @db.VarChar(255)
  api_response                                                                                String?
  options                                                                                     String?
  last_session                                                                                String?                                @db.VarChar(255)
  last_login                                                                                  DateTime?                              @db.Timestamp(0)
  remember_token                                                                              String?                                @db.VarChar(100)
  deleted_at                                                                                  DateTime?                              @db.Timestamp(0)
  created_at                                                                                  DateTime?                              @db.Timestamp(0)
  updated_at                                                                                  DateTime?                              @db.Timestamp(0)
  rfd_id                                                                                      String?                                @db.VarChar(255)
  balance                                                                                     Float?
  pin                                                                                         String?                                @db.VarChar(255)
  va_code                                                                                     String?                                @db.VarChar(20)
  va_code_deposit                                                                             String?                                @db.VarChar(20)
  type                                                                                        Int?                                   @db.SmallInt
  ref_number                                                                                  String?                                @db.VarChar(50)
  deleted_by                                                                                  BigInt?
  users                                                                                       users?                                 @relation("usersTousers_deleted_by", fields: [deleted_by], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_deleted_by_foreign")
  people                                                                                      people?                                @relation(fields: [person_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  schools                                                                                     schools?                               @relation(fields: [school_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  academic_attendances                                                                        academic_attendances[]
  academic_classroom_journal                                                                  academic_classroom_journal[]
  academic_classroom_journal_pjj                                                              academic_classroom_journal_pjj[]
  academic_committee_users                                                                    academic_committee_users[]
  academic_parents                                                                            academic_parents[]
  academic_predicates_academic_predicates_created_byTousers                                   academic_predicates[]                  @relation("academic_predicates_created_byTousers")
  academic_predicates_academic_predicates_deleted_byTousers                                   academic_predicates[]                  @relation("academic_predicates_deleted_byTousers")
  academic_predicates_academic_predicates_updated_byTousers                                   academic_predicates[]                  @relation("academic_predicates_updated_byTousers")
  academic_report_card_academic_report_card_created_byTousers                                 academic_report_card[]                 @relation("academic_report_card_created_byTousers")
  academic_report_card_academic_report_card_updated_byTousers                                 academic_report_card[]                 @relation("academic_report_card_updated_byTousers")
  academic_student_course_attendances                                                         academic_student_course_attendances[]
  academic_student_courses_academic_student_courses_created_byTousers                         academic_student_courses[]             @relation("academic_student_courses_created_byTousers")
  academic_student_courses_academic_student_courses_updated_byTousers                         academic_student_courses[]             @relation("academic_student_courses_updated_byTousers")
  academic_student_journal                                                                    academic_student_journal[]
  academic_student_status                                                                     academic_student_status[]
  academic_students                                                                           academic_students[]
  academic_user_permit_academic_user_permit_created_byTousers                                 academic_user_permit[]                 @relation("academic_user_permit_created_byTousers")
  academic_user_permit_academic_user_permit_user_idTousers                                    academic_user_permit[]                 @relation("academic_user_permit_user_idTousers")
  admission_applicant_pemetaan_admission_applicant_pemetaan_created_byTousers                 admission_applicant_pemetaan[]         @relation("admission_applicant_pemetaan_created_byTousers")
  admission_applicant_pemetaan_admission_applicant_pemetaan_publish_byTousers                 admission_applicant_pemetaan[]         @relation("admission_applicant_pemetaan_publish_byTousers")
  admission_applicant_pemetaan_admission_applicant_pemetaan_updated_byTousers                 admission_applicant_pemetaan[]         @relation("admission_applicant_pemetaan_updated_byTousers")
  admission_applicant_pemetaan_details_admission_applicant_pemetaan_details_created_byTousers admission_applicant_pemetaan_details[] @relation("admission_applicant_pemetaan_details_created_byTousers") @ignore
  admission_applicant_pemetaan_details_admission_applicant_pemetaan_details_updated_byTousers admission_applicant_pemetaan_details[] @relation("admission_applicant_pemetaan_details_updated_byTousers") @ignore
  admission_applicant_progress                                                                admission_applicant_progress[]
  admission_applicants_admission_applicants_deleted_byTousers                                 admission_applicants[]                 @relation("admission_applicants_deleted_byTousers")
  admission_applicants_admission_applicants_user_idTousers                                    admission_applicants[]                 @relation("admission_applicants_user_idTousers")
  admission_pemetaan_admission_pemetaan_created_byTousers                                     admission_pemetaan[]                   @relation("admission_pemetaan_created_byTousers")
  admission_pemetaan_admission_pemetaan_updated_byTousers                                     admission_pemetaan[]                   @relation("admission_pemetaan_updated_byTousers")
  asset_item_asset_item_created_byTousers                                                     asset_item[]                           @relation("asset_item_created_byTousers")
  asset_item_asset_item_deleted_byTousers                                                     asset_item[]                           @relation("asset_item_deleted_byTousers")
  asset_item_asset_item_updated_byTousers                                                     asset_item[]                           @relation("asset_item_updated_byTousers")
  asset_land_building_asset_land_building_created_byTousers                                   asset_land_building[]                  @relation("asset_land_building_created_byTousers")
  asset_land_building_asset_land_building_deleted_byTousers                                   asset_land_building[]                  @relation("asset_land_building_deleted_byTousers")
  asset_land_building_asset_land_building_updated_byTousers                                   asset_land_building[]                  @relation("asset_land_building_updated_byTousers")
  asset_master_item_asset_master_item_created_byTousers                                       asset_master_item[]                    @relation("asset_master_item_created_byTousers")
  asset_master_item_asset_master_item_deleted_byTousers                                       asset_master_item[]                    @relation("asset_master_item_deleted_byTousers")
  asset_rooms_asset_rooms_created_byTousers                                                   asset_rooms[]                          @relation("asset_rooms_created_byTousers")
  asset_rooms_asset_rooms_deleted_byTousers                                                   asset_rooms[]                          @relation("asset_rooms_deleted_byTousers")
  asset_rooms_asset_rooms_responsible_byTousers                                               asset_rooms[]                          @relation("asset_rooms_responsible_byTousers")
  asset_rooms_asset_rooms_updated_byTousers                                                   asset_rooms[]                          @relation("asset_rooms_updated_byTousers")
  attachment_logs                                                                             attachment_logs[]                      @ignore
  attachments                                                                                 attachments[]
  boardings                                                                                   boardings[]
  canteen_school                                                                              canteen_school[]
  canteen_staff                                                                               canteen_staff[]
  canteen_tenant                                                                              canteen_tenant[]
  canteen_tenant_staff                                                                        canteen_tenant_staff[]
  canteen_transactions_canteen_transactions_performed_byTousers                               canteen_transactions[]                 @relation("canteen_transactions_performed_byTousers")
  canteen_transactions_canteen_transactions_user_idTousers                                    canteen_transactions[]                 @relation("canteen_transactions_user_idTousers")
  cashless_card                                                                               cashless_card[]
  cbt_attempts                                                                                cbt_attempts[]
  cbt_exam_participant                                                                        cbt_exam_participant[]
  cbt_quizzes                                                                                 cbt_quizzes[]
  cbt_session_attendance                                                                      cbt_session_attendance[]               @ignore
  clinic_medical_record_clinic_medical_record_performed_byTousers                             clinic_medical_record[]                @relation("clinic_medical_record_performed_byTousers")
  clinic_medical_record_clinic_medical_record_user_idTousers                                  clinic_medical_record[]                @relation("clinic_medical_record_user_idTousers")
  cms_article                                                                                 cms_article[]
  cms_page                                                                                    cms_page[]
  counseling_case_records                                                                     counseling_case_records[]
  counseling_consultation_records                                                             counseling_consultation_records[]
  eoffice_document_participants                                                               eoffice_document_participants[]
  eoffice_events                                                                              eoffice_events[]
  finance_bank_accounts                                                                       finance_bank_accounts[]
  finance_bank_payments_finance_bank_payments_perform_byTousers                               finance_bank_payments[]                @relation("finance_bank_payments_perform_byTousers")
  finance_bank_payments_finance_bank_payments_user_idTousers                                  finance_bank_payments[]                @relation("finance_bank_payments_user_idTousers")
  finance_chart_of_accounts_finance_chart_of_accounts_created_byTousers                       finance_chart_of_accounts[]            @relation("finance_chart_of_accounts_created_byTousers")
  finance_chart_of_accounts_finance_chart_of_accounts_deleted_byTousers                       finance_chart_of_accounts[]            @relation("finance_chart_of_accounts_deleted_byTousers")
  finance_discounts                                                                           finance_discounts[]
  finance_ewallet_mutation_finance_ewallet_mutation_perform_byTousers                         finance_ewallet_mutation[]             @relation("finance_ewallet_mutation_perform_byTousers")
  finance_ewallet_mutation_finance_ewallet_mutation_user_idTousers                            finance_ewallet_mutation[]             @relation("finance_ewallet_mutation_user_idTousers")
  finance_rapbs_finance_rapbs_perform_byTousers                                               finance_rapbs[]                        @relation("finance_rapbs_perform_byTousers")
  finance_rapbs_finance_rapbs_user_idTousers                                                  finance_rapbs[]                        @relation("finance_rapbs_user_idTousers")
  finance_rapbs_activities                                                                    finance_rapbs_activities[]
  finance_rapbs_licensors_finance_rapbs_licensors_performed_byTousers                         finance_rapbs_licensors[]              @relation("finance_rapbs_licensors_performed_byTousers")
  finance_rapbs_licensors_finance_rapbs_licensors_user_idTousers                              finance_rapbs_licensors[]              @relation("finance_rapbs_licensors_user_idTousers")
  finance_staff_slips_finance_staff_slips_approved_byTousers                                  finance_staff_slips[]                  @relation("finance_staff_slips_approved_byTousers")
  finance_staff_slips_finance_staff_slips_created_byTousers                                   finance_staff_slips[]                  @relation("finance_staff_slips_created_byTousers")
  finance_summary_receivable                                                                  finance_summary_receivable[]
  finance_transactions_finance_transactions_deleted_byTousers                                 finance_transactions[]                 @relation("finance_transactions_deleted_byTousers")
  finance_transactions_finance_transactions_performed_byTousers                               finance_transactions[]                 @relation("finance_transactions_performed_byTousers")
  finance_transactions_finance_transactions_user_idTousers                                    finance_transactions[]                 @relation("finance_transactions_user_idTousers")
  finance_transactions_tokopedia                                                              finance_transactions_tokopedia[]
  finance_users_cost_groups                                                                   finance_users_cost_groups[]            @ignore
  finance_users_discounts_finance_users_discounts_created_byTousers                           finance_users_discounts[]              @relation("finance_users_discounts_created_byTousers")
  finance_users_discounts_finance_users_discounts_user_idTousers                              finance_users_discounts[]              @relation("finance_users_discounts_user_idTousers")
  frontoffice_notice_board                                                                    frontoffice_notice_board[]
  frontoffice_visitors_book                                                                   frontoffice_visitors_book[]
  hr_group_level                                                                              hr_group_level[]
  hr_payroll_slips                                                                            hr_payroll_slips[]
  hr_salary_base                                                                              hr_salary_base[]
  hr_staff_journal                                                                            hr_staff_journal[]
  hr_staff_salary                                                                             hr_staff_salary[]
  human_resource_staff                                                                        human_resource_staff[]
  human_resource_staff_status                                                                 human_resource_staff_status[]
  lms_forum_conversations_lms_forum_conversations_conversation_idTousers                      lms_forum_conversations[]              @relation("lms_forum_conversations_conversation_idTousers")
  lms_forum_conversations_lms_forum_conversations_forum_idTousers                             lms_forum_conversations[]              @relation("lms_forum_conversations_forum_idTousers")
  lms_forum_conversations_lms_forum_conversations_user_idTousers                              lms_forum_conversations[]              @relation("lms_forum_conversations_user_idTousers")
  lms_forums                                                                                  lms_forums[]
  lms_lesson_material_logs                                                                    lms_lesson_material_logs[]             @ignore
  lms_lessons                                                                                 lms_lessons[]
  message_whatsapp_message_whatsapp_created_byTousers                                         message_whatsapp[]                     @relation("message_whatsapp_created_byTousers")
  message_whatsapp_message_whatsapp_deleted_byTousers                                         message_whatsapp[]                     @relation("message_whatsapp_deleted_byTousers")
  message_whatsapp_message_whatsapp_updated_byTousers                                         message_whatsapp[]                     @relation("message_whatsapp_updated_byTousers")
  mpls_group_applicant_attendances                                                            mpls_group_applicant_attendances[]
  mpls_group_journal                                                                          mpls_group_journal[]
  notification_whatsapp                                                                       notification_whatsapp[]
  package_histories                                                                           package_histories[]                    @ignore
  package_subscribe_package_subscribe_deleted_byTousers                                       package_subscribe[]                    @relation("package_subscribe_deleted_byTousers") @ignore
  package_subscribe_package_subscribe_subscribe_byTousers                                     package_subscribe[]                    @relation("package_subscribe_subscribe_byTousers") @ignore
  people_signs                                                                                people_signs[]
  posts                                                                                       posts[]
  role_user                                                                                   role_user[]
  studentship_case_records                                                                    studentship_case_records[]
  studentship_item_findings_studentship_item_findings_created_byTousers                       studentship_item_findings[]            @relation("studentship_item_findings_created_byTousers")
  studentship_item_findings_studentship_item_findings_user_idTousers                          studentship_item_findings[]            @relation("studentship_item_findings_user_idTousers")
  studentship_item_lost_studentship_item_lost_created_byTousers                               studentship_item_lost[]                @relation("studentship_item_lost_created_byTousers")
  studentship_item_lost_studentship_item_lost_user_idTousers                                  studentship_item_lost[]                @relation("studentship_item_lost_user_idTousers")
  suggest_form                                                                                suggest_form[]
  user_organizations                                                                          user_organizations[]                   @ignore
  other_users                                                                                 users[]                                @relation("usersTousers_deleted_by")

  @@unique([email, school_id], map: "users_email_school_id")
  @@unique([school_id, username, person_id], map: "users_school_id_username_person_id")
  @@index([email], map: "users_email_index")
  @@index([name], map: "users_name_index")
  @@index([password], map: "users_password_index")
  @@index([phone], map: "users_phone_index")
  @@index([school_id, type, deleted_at], map: "users_school_id_type_deleted_at")
  @@index([school_id, username, type, deleted_at], map: "users_school_id_username_type_deleted_at")
  @@index([school_id, va_code, deleted_at], map: "users_school_id_va_code_deleted_at")
  @@index([school_id, va_code, type, deleted_at], map: "users_school_id_va_code_type_deleted_at")
}

model wow {
  id         String    @id @db.Uuid
  school_id  Int?
  path       String    @db.VarChar(255)
  request    Json
  response   Json?
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  schools    schools?  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "wow_school_id_foreign")

  @@index([path], map: "wow_path_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model x_finance_discount_receivables {
  discount_id        Int
  school_id          Int?
  account_receivable Int
  amount             Float
  is_percentable     Boolean @default(false)

  @@ignore
}
